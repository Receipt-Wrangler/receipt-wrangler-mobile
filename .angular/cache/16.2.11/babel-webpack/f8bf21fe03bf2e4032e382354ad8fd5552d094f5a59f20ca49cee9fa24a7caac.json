{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/afrom/Documents/Projects/receipt-wrangler-mobile/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Creates a lock controller.\n *\n * Claiming a lock means that nothing else can acquire the lock until it is released.\n * This can momentarily prevent execution of code that needs to wait for the earlier code to finish.\n * For example, this can be used to prevent multiple transitions from occurring at the same time.\n */\nconst createLockController = () => {\n  let waitPromise;\n  /**\n   * When lock() is called, the lock is claimed.\n   * Once a lock has been claimed, it cannot be claimed again until it is released.\n   * When this function gets resolved, the lock is released, allowing it to be claimed again.\n   *\n   * @example ```tsx\n   * const unlock = await this.lockController.lock();\n   * // do other stuff\n   * unlock();\n   * ```\n   */\n  const lock = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      const p = waitPromise;\n      let resolve;\n      waitPromise = new Promise(r => resolve = r);\n      if (p !== undefined) {\n        yield p;\n      }\n      return resolve;\n    });\n    return function lock() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    lock\n  };\n};\nexport { createLockController as c };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
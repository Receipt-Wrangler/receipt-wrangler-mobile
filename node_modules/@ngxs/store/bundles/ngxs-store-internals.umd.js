(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@ngxs/store/internals', ['exports', '@angular/core', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ngxs = global.ngxs || {}, global.ngxs.store = global.ngxs.store || {}, global.ngxs.store.internals = {}), global.ng.core, global.rxjs));
})(this, (function (exports, i0, rxjs) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var NgxsBootstrapper = /** @class */ (function () {
        function NgxsBootstrapper() {
            /**
             * Use `ReplaySubject`, thus we can get cached value even if the stream is completed
             */
            this.bootstrap$ = new rxjs.ReplaySubject(1);
        }
        Object.defineProperty(NgxsBootstrapper.prototype, "appBootstrapped$", {
            get: function () {
                return this.bootstrap$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * This event will be emitted after attaching `ComponentRef` of the root component
         * to the tree of views, that's a signal that application has been fully rendered
         */
        NgxsBootstrapper.prototype.bootstrap = function () {
            this.bootstrap$.next(true);
            this.bootstrap$.complete();
        };
        return NgxsBootstrapper;
    }());
    /** @nocollapse */ NgxsBootstrapper.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsBootstrapper, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NgxsBootstrapper.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsBootstrapper, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsBootstrapper, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }] });

    function defaultEqualityCheck(a, b) {
        return a === b;
    }
    function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
        if (prev === null || next === null || prev.length !== next.length) {
            return false;
        }
        // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.
        var length = prev.length;
        for (var i = 0; i < length; i++) {
            if (!equalityCheck(prev[i], next[i])) {
                return false;
            }
        }
        return true;
    }
    /**
     * Memoize a function on its last inputs only.
     * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js
     *
     * @ignore
     */
    function memoize(func, equalityCheck) {
        if (equalityCheck === void 0) { equalityCheck = defaultEqualityCheck; }
        var lastArgs = null;
        var lastResult = null;
        // we reference arguments instead of spreading them for performance reasons
        function memoized() {
            // eslint-disable-next-line prefer-rest-params
            if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
                // apply arguments instead of spreading for performance.
                // eslint-disable-next-line prefer-rest-params, prefer-spread
                lastResult = func.apply(null, arguments);
            }
            // eslint-disable-next-line prefer-rest-params
            lastArgs = arguments;
            return lastResult;
        }
        memoized.reset = function () {
            // The hidden (for now) ability to reset the memoization
            lastArgs = null;
            lastResult = null;
        };
        return memoized;
    }

    var InitialState = /** @class */ (function () {
        function InitialState() {
        }
        InitialState.set = function (state) {
            this._value = state;
        };
        InitialState.pop = function () {
            var state = this._value;
            this._value = {};
            return state;
        };
        return InitialState;
    }());
    InitialState._value = {};
    var INITIAL_STATE_TOKEN = new i0.InjectionToken('INITIAL_STATE_TOKEN', {
        providedIn: 'root',
        factory: function () { return InitialState.pop(); }
    });

    // These tokens are internal and can change at any point.
    var ɵNGXS_STATE_FACTORY = new i0.InjectionToken('ɵNGXS_STATE_FACTORY');
    var ɵNGXS_STATE_CONTEXT_FACTORY = new i0.InjectionToken('ɵNGXS_STATE_CONTEXT_FACTORY');

    /**
     * Generated bundle index. Do not edit.
     */

    exports.INITIAL_STATE_TOKEN = INITIAL_STATE_TOKEN;
    exports.InitialState = InitialState;
    exports.NgxsBootstrapper = NgxsBootstrapper;
    exports.memoize = memoize;
    exports["ɵNGXS_STATE_CONTEXT_FACTORY"] = ɵNGXS_STATE_CONTEXT_FACTORY;
    exports["ɵNGXS_STATE_FACTORY"] = ɵNGXS_STATE_FACTORY;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngxs-store-internals.umd.js.map

import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';
import { OrderedSubject } from './internal/custom-rxjs-subjects';
import * as i0 from "@angular/core";
/**
 * Status of a dispatched action
 */
export declare const enum ActionStatus {
    Dispatched = "DISPATCHED",
    Successful = "SUCCESSFUL",
    Canceled = "CANCELED",
    Errored = "ERRORED"
}
export interface ActionContext<T = any> {
    status: ActionStatus;
    action: T;
    error?: Error;
}
/**
 * Internal Action stream that is emitted anytime an action is dispatched.
 */
export declare class InternalActions extends OrderedSubject<ActionContext> implements OnDestroy {
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InternalActions, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<InternalActions>;
}
/**
 * Action stream that is emitted anytime an action is dispatched.
 *
 * You can listen to this in services to react without stores.
 */
export declare class Actions extends Observable<ActionContext> {
    constructor(internalActions$: InternalActions, internalExecutionStrategy: InternalNgxsExecutionStrategy);
    static ɵfac: i0.ɵɵFactoryDeclaration<Actions, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<Actions>;
}

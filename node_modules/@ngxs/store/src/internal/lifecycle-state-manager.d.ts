import { OnDestroy } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { Store } from '../store';
import { InternalErrorReporter } from './error-handler';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
import { StatesAndDefaults } from './internals';
import * as i0 from "@angular/core";
export declare class LifecycleStateManager implements OnDestroy {
    private _store;
    private _internalErrorReporter;
    private _internalStateOperations;
    private _stateContextFactory;
    private _bootstrapper;
    private readonly _destroy$;
    constructor(_store: Store, _internalErrorReporter: InternalErrorReporter, _internalStateOperations: InternalStateOperations, _stateContextFactory: StateContextFactory, _bootstrapper: NgxsBootstrapper);
    ngOnDestroy(): void;
    ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void;
    private _invokeInitOnStates;
    private _invokeBootstrapOnStates;
    private _getStateContext;
    static ɵfac: i0.ɵɵFactoryDeclaration<LifecycleStateManager, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LifecycleStateManager>;
}

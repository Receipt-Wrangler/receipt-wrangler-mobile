/// <reference types="jest" />
export function skipConsoleLogging(fn) {
    const consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation(() => { }),
        jest.spyOn(console, 'warn').mockImplementation(() => { }),
        jest.spyOn(console, 'error').mockImplementation(() => { }),
        jest.spyOn(console, 'info').mockImplementation(() => { })
    ];
    function restoreSpies() {
        consoleSpies.forEach(spy => spy.mockRestore());
    }
    let restoreSpyAsync = false;
    try {
        const returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return returnValue.finally(() => restoreSpies());
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1jb25zb2xlLWxvZ2dpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy9zcmMvc2tpcC1jb25zb2xlLWxvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCO0FBRTlCLE1BQU0sVUFBVSxrQkFBa0IsQ0FBb0MsRUFBSztJQUN6RSxNQUFNLFlBQVksR0FBRztRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7S0FDekQsQ0FBQztJQUNGLFNBQVMsWUFBWTtRQUNuQixZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUNELElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQztJQUM1QixJQUFJO1FBQ0YsTUFBTSxXQUFXLEdBQUcsRUFBRSxFQUFFLENBQUM7UUFDekIsSUFBSSxXQUFXLFlBQVksT0FBTyxFQUFFO1lBQ2xDLGVBQWUsR0FBRyxJQUFJLENBQUM7WUFDdkIsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFrQixDQUFDO1NBQ25FO1FBQ0QsT0FBTyxXQUFXLENBQUM7S0FDcEI7WUFBUztRQUNSLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsWUFBWSxFQUFFLENBQUM7U0FDaEI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImplc3RcIiAvPlxuXG5leHBvcnQgZnVuY3Rpb24gc2tpcENvbnNvbGVMb2dnaW5nPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueT4oZm46IFQpOiBSZXR1cm5UeXBlPFQ+IHtcbiAgY29uc3QgY29uc29sZVNwaWVzID0gW1xuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSksXG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSksXG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pLFxuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2luZm8nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pXG4gIF07XG4gIGZ1bmN0aW9uIHJlc3RvcmVTcGllcygpIHtcbiAgICBjb25zb2xlU3BpZXMuZm9yRWFjaChzcHkgPT4gc3B5Lm1vY2tSZXN0b3JlKCkpO1xuICB9XG4gIGxldCByZXN0b3JlU3B5QXN5bmMgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXR1cm5WYWx1ZSA9IGZuKCk7XG4gICAgaWYgKHJldHVyblZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgcmVzdG9yZVNweUFzeW5jID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZS5maW5hbGx5KCgpID0+IHJlc3RvcmVTcGllcygpKSBhcyBSZXR1cm5UeXBlPFQ+O1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKCFyZXN0b3JlU3B5QXN5bmMpIHtcbiAgICAgIHJlc3RvcmVTcGllcygpO1xuICAgIH1cbiAgfVxufVxuIl19
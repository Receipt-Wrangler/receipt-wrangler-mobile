import { __awaiter } from "tslib";
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { VERSION, destroyPlatform, createPlatform } from '@angular/core';
function createRootElement() {
    const document = TestBed.inject(DOCUMENT);
    const root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
function removeRootElement() {
    const root = document.getElementsByTagName('app-root').item(0);
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    const version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
export function freshPlatform(fn) {
    let resolve = null;
    let reject = null;
    let whenDoneIsCalledPromise = null;
    const hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        });
    }
    return function testWithAFreshPlatform() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                destroyPlatformBeforeBootstrappingTheNewOne();
                if (hasDoneArgument) {
                    yield fn((error) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve();
                        }
                    });
                    yield whenDoneIsCalledPromise;
                }
                else {
                    yield fn();
                }
            }
            finally {
                resetPlatformAfterBootstrapping();
            }
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy9zcmMvZnJlc2gtcGxhdGZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sSUFBSSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekUsU0FBUyxpQkFBaUI7SUFDeEIsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQyxNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzFELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRCxTQUFTLGlCQUFpQjtJQUN4QixNQUFNLElBQUksR0FBWSxRQUFRLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRSxDQUFDO0lBQ3pFLElBQUk7UUFDRixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqQztJQUFDLFdBQU0sR0FBRTtBQUNaLENBQUM7QUFFRCxTQUFTLDJDQUEyQztJQUNsRCxlQUFlLEVBQUUsQ0FBQztJQUNsQixpQkFBaUIsRUFBRSxDQUFDO0FBQ3RCLENBQUM7QUFFRCx5REFBeUQ7QUFDekQsbURBQW1EO0FBQ25ELG1CQUFtQjtBQUNuQixTQUFTLCtCQUErQjtJQUN0QyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUMvQixxRkFBcUY7SUFDckYsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFO1FBQ2hCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQTBDO0lBQ3RFLElBQUksT0FBTyxHQUF3QixJQUFJLENBQUM7SUFDeEMsSUFBSSxNQUFNLEdBQW9DLElBQUksQ0FBQztJQUNuRCxJQUFJLHVCQUF1QixHQUF5QixJQUFJLENBQUM7SUFFekQsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFFeEMsSUFBSSxlQUFlLEVBQUU7UUFDbkIsdUJBQXVCLEdBQUcsSUFBSSxPQUFPLENBQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDaEUsT0FBTyxHQUFHLFFBQVEsQ0FBQztZQUNuQixNQUFNLEdBQUcsT0FBTyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxPQUFPLFNBQWUsc0JBQXNCOztZQUMxQyxJQUFJO2dCQUNGLDJDQUEyQyxFQUFFLENBQUM7Z0JBRTlDLElBQUksZUFBZSxFQUFFO29CQUNuQixNQUFNLEVBQUUsQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFO3dCQUN6QixJQUFJLEtBQUssRUFBRTs0QkFDVCxNQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7eUJBQ2hCOzZCQUFNOzRCQUNMLE9BQVEsRUFBRSxDQUFDO3lCQUNaO29CQUNILENBQUMsQ0FBQyxDQUFDO29CQUNILE1BQU0sdUJBQXdCLENBQUM7aUJBQ2hDO3FCQUFNO29CQUNMLE1BQU0sRUFBRSxFQUFFLENBQUM7aUJBQ1o7YUFDRjtvQkFBUztnQkFDUiwrQkFBK0IsRUFBRSxDQUFDO2FBQ25DO1FBQ0gsQ0FBQztLQUFBLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyDJtWdldERPTSBhcyBnZXRET00gfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IFZFUlNJT04sIGRlc3Ryb3lQbGF0Zm9ybSwgY3JlYXRlUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZnVuY3Rpb24gY3JlYXRlUm9vdEVsZW1lbnQoKSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gVGVzdEJlZC5pbmplY3QoRE9DVU1FTlQpO1xuICBjb25zdCByb290ID0gZ2V0RE9NKCkuY3JlYXRlRWxlbWVudCgnYXBwLXJvb3QnLCBkb2N1bWVudCk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocm9vdCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJvb3RFbGVtZW50KCkge1xuICBjb25zdCByb290OiBFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2FwcC1yb290JykuaXRlbSgwKSE7XG4gIHRyeSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChyb290KTtcbiAgfSBjYXRjaCB7fVxufVxuXG5mdW5jdGlvbiBkZXN0cm95UGxhdGZvcm1CZWZvcmVCb290c3RyYXBwaW5nVGhlTmV3T25lKCkge1xuICBkZXN0cm95UGxhdGZvcm0oKTtcbiAgY3JlYXRlUm9vdEVsZW1lbnQoKTtcbn1cblxuLy8gQXMgd2UgY3JlYXRlIG91ciBjdXN0b20gcGxhdGZvcm0gdmlhIGBib290c3RyYXBNb2R1bGVgXG4vLyB3ZSBoYXZlIHRvIGRlc3Ryb3kgaXQgYWZ0ZXIgYXNzZXRpb25zIGFuZCByZXZlcnRcbi8vIHRoZSBwcmV2aW91cyBvbmVcbmZ1bmN0aW9uIHJlc2V0UGxhdGZvcm1BZnRlckJvb3RzdHJhcHBpbmcoKSB7XG4gIHJlbW92ZVJvb3RFbGVtZW50KCk7XG4gIGRlc3Ryb3lQbGF0Zm9ybSgpO1xuICBjb25zdCB2ZXJzaW9uID0gK1ZFUlNJT04ubWFqb3I7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvY29tbWl0L2UyNTBkYjRmMjYxNzQxYjA0ZWU0Y2JhZDRkZWM0MWE4OTA4YTEyYWFcbiAgaWYgKHZlcnNpb24gPCAxNCkge1xuICAgIGNyZWF0ZVBsYXRmb3JtKFRlc3RCZWQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcmVzaFBsYXRmb3JtKGZuOiAoZG9uZT86IFZvaWRGdW5jdGlvbikgPT4gUHJvbWlzZTx2b2lkPikge1xuICBsZXQgcmVzb2x2ZTogVm9pZEZ1bmN0aW9uIHwgbnVsbCA9IG51bGw7XG4gIGxldCByZWplY3Q6ICgoZXJyb3I6IEVycm9yKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuICBsZXQgd2hlbkRvbmVJc0NhbGxlZFByb21pc2U6IFByb21pc2U8dm9pZD4gfCBudWxsID0gbnVsbDtcblxuICBjb25zdCBoYXNEb25lQXJndW1lbnQgPSBmbi5sZW5ndGggPT09IDE7XG5cbiAgaWYgKGhhc0RvbmVBcmd1bWVudCkge1xuICAgIHdoZW5Eb25lSXNDYWxsZWRQcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4oKF9yZXNvbHZlLCBfcmVqZWN0KSA9PiB7XG4gICAgICByZXNvbHZlID0gX3Jlc29sdmU7XG4gICAgICByZWplY3QgPSBfcmVqZWN0O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHRlc3RXaXRoQUZyZXNoUGxhdGZvcm0oKSB7XG4gICAgdHJ5IHtcbiAgICAgIGRlc3Ryb3lQbGF0Zm9ybUJlZm9yZUJvb3RzdHJhcHBpbmdUaGVOZXdPbmUoKTtcblxuICAgICAgaWYgKGhhc0RvbmVBcmd1bWVudCkge1xuICAgICAgICBhd2FpdCBmbigoZXJyb3I/OiBFcnJvcikgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0IShlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUhKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgd2hlbkRvbmVJc0NhbGxlZFByb21pc2UhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgZm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgcmVzZXRQbGF0Zm9ybUFmdGVyQm9vdHN0cmFwcGluZygpO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==
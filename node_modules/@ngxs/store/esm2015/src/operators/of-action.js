import { map, filter } from 'rxjs/operators';
import { getActionTypeFromInstance } from '../utils/utils';
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will grab actions that have just been dispatched as well as actions that have completed
 */
export function ofAction(...allowedTypes) {
    return ofActionOperator(allowedTypes);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been dispatched
 */
export function ofActionDispatched(...allowedTypes) {
    return ofActionOperator(allowedTypes, ["DISPATCHED" /* Dispatched */]);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been successfully completed
 */
export function ofActionSuccessful(...allowedTypes) {
    return ofActionOperator(allowedTypes, ["SUCCESSFUL" /* Successful */]);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been canceled
 */
export function ofActionCanceled(...allowedTypes) {
    return ofActionOperator(allowedTypes, ["CANCELED" /* Canceled */]);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been completed
 */
export function ofActionCompleted(...allowedTypes) {
    const allowedStatuses = [
        "SUCCESSFUL" /* Successful */,
        "CANCELED" /* Canceled */,
        "ERRORED" /* Errored */
    ];
    return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just thrown an error
 */
export function ofActionErrored(...allowedTypes) {
    return ofActionOperator(allowedTypes, ["ERRORED" /* Errored */]);
}
function ofActionOperator(allowedTypes, statuses, 
// This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,
// since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`
// defaults to `any`, thus there is no sense from union type.
mapOperator = mapAction) {
    const allowedMap = createAllowedActionTypesMap(allowedTypes);
    const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);
    return function (o) {
        return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());
    };
}
function filterStatus(allowedTypes, allowedStatuses) {
    return filter((ctx) => {
        const actionType = getActionTypeFromInstance(ctx.action);
        const typeMatch = allowedTypes[actionType];
        const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;
        return typeMatch && statusMatch;
    });
}
function mapActionResult() {
    return map(({ action, status, error }) => {
        return {
            action,
            result: {
                successful: "SUCCESSFUL" /* Successful */ === status,
                canceled: "CANCELED" /* Canceled */ === status,
                error
            }
        };
    });
}
function mapAction() {
    return map((ctx) => ctx.action);
}
function createAllowedActionTypesMap(types) {
    return types.reduce((filterMap, klass) => {
        filterMap[getActionTypeFromInstance(klass)] = true;
        return filterMap;
    }, {});
}
function createAllowedStatusesMap(statuses) {
    return statuses.reduce((filterMap, status) => {
        filterMap[status] = true;
        return filterMap;
    }, {});
}
//# sourceMappingURL=data:application/json;base64,
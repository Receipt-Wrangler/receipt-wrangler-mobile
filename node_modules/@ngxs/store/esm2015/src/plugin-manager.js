import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';
import { NGXS_PLUGINS } from './symbols';
import * as i0 from "@angular/core";
export class PluginManager {
    constructor(_parentManager, _pluginHandlers) {
        this._parentManager = _parentManager;
        this._pluginHandlers = _pluginHandlers;
        this.plugins = [];
        this.registerHandlers();
    }
    get rootPlugins() {
        return (this._parentManager && this._parentManager.plugins) || this.plugins;
    }
    registerHandlers() {
        const pluginHandlers = this.getPluginHandlers();
        this.rootPlugins.push(...pluginHandlers);
    }
    getPluginHandlers() {
        const handlers = this._pluginHandlers || [];
        return handlers.map((plugin) => (plugin.handle ? plugin.handle.bind(plugin) : plugin));
    }
}
/** @nocollapse */ PluginManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PluginManager, deps: [{ token: PluginManager, optional: true, skipSelf: true }, { token: NGXS_PLUGINS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PluginManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PluginManager });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PluginManager, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: PluginManager, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGXS_PLUGINS]
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9zcmMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUE0QixNQUFNLFdBQVcsQ0FBQzs7QUFHbkUsTUFBTSxPQUFPLGFBQWE7SUFHeEIsWUFHVSxjQUE2QixFQUc3QixlQUE2QjtRQUg3QixtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUc3QixvQkFBZSxHQUFmLGVBQWUsQ0FBYztRQVJoQyxZQUFPLEdBQW1CLEVBQUUsQ0FBQztRQVVsQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBWSxXQUFXO1FBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM5RSxDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLE1BQU0sY0FBYyxHQUFtQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNoRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsTUFBTSxRQUFRLEdBQWlCLElBQUksQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO1FBQzFELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FDakIsQ0FBQyxNQUFrQixFQUFFLEVBQUUsQ0FDckIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFpQixDQUN4RSxDQUFDO0lBQ0osQ0FBQzs7OEhBN0JVLGFBQWEsa0JBTUUsYUFBYSw2Q0FDN0IsWUFBWTtrSUFQWCxhQUFhOzRGQUFiLGFBQWE7a0JBRHpCLFVBQVU7MERBT2lCLGFBQWE7MEJBRnBDLFFBQVE7OzBCQUNSLFFBQVE7OzBCQUVSLE1BQU07MkJBQUMsWUFBWTs7MEJBQ25CLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdYU19QTFVHSU5TLCBOZ3hzUGx1Z2luLCBOZ3hzUGx1Z2luRm4gfSBmcm9tICcuL3N5bWJvbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGx1Z2luTWFuYWdlciB7XG4gIHB1YmxpYyBwbHVnaW5zOiBOZ3hzUGx1Z2luRm5bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNraXBTZWxmKClcbiAgICBwcml2YXRlIF9wYXJlbnRNYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLFxuICAgIEBJbmplY3QoTkdYU19QTFVHSU5TKVxuICAgIEBPcHRpb25hbCgpXG4gICAgcHJpdmF0ZSBfcGx1Z2luSGFuZGxlcnM6IE5neHNQbHVnaW5bXVxuICApIHtcbiAgICB0aGlzLnJlZ2lzdGVySGFuZGxlcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHJvb3RQbHVnaW5zKCk6IE5neHNQbHVnaW5GbltdIHtcbiAgICByZXR1cm4gKHRoaXMuX3BhcmVudE1hbmFnZXIgJiYgdGhpcy5fcGFyZW50TWFuYWdlci5wbHVnaW5zKSB8fCB0aGlzLnBsdWdpbnM7XG4gIH1cblxuICBwcml2YXRlIHJlZ2lzdGVySGFuZGxlcnMoKTogdm9pZCB7XG4gICAgY29uc3QgcGx1Z2luSGFuZGxlcnM6IE5neHNQbHVnaW5GbltdID0gdGhpcy5nZXRQbHVnaW5IYW5kbGVycygpO1xuICAgIHRoaXMucm9vdFBsdWdpbnMucHVzaCguLi5wbHVnaW5IYW5kbGVycyk7XG4gIH1cblxuICBwcml2YXRlIGdldFBsdWdpbkhhbmRsZXJzKCk6IE5neHNQbHVnaW5GbltdIHtcbiAgICBjb25zdCBoYW5kbGVyczogTmd4c1BsdWdpbltdID0gdGhpcy5fcGx1Z2luSGFuZGxlcnMgfHwgW107XG4gICAgcmV0dXJuIGhhbmRsZXJzLm1hcChcbiAgICAgIChwbHVnaW46IE5neHNQbHVnaW4pID0+XG4gICAgICAgIChwbHVnaW4uaGFuZGxlID8gcGx1Z2luLmhhbmRsZS5iaW5kKHBsdWdpbikgOiBwbHVnaW4pIGFzIE5neHNQbHVnaW5GblxuICAgICk7XG4gIH1cbn1cbiJdfQ==
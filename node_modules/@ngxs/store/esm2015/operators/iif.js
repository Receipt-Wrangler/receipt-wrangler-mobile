import { isStateOperator, isUndefined, isPredicate } from './utils';
function retrieveValue(operatorOrValue, existing) {
    // If state operator is a function
    // then call it with an original value
    if (isStateOperator(operatorOrValue)) {
        const value = operatorOrValue(existing);
        return value;
    }
    // If operator or value was not provided
    // e.g. `elseOperatorOrValue` is `undefined`
    // then we just return an original value
    if (isUndefined(operatorOrValue)) {
        return existing;
    }
    return operatorOrValue;
}
/**
 * @param condition - Condition can be a plain boolean value or a function,
 * that returns boolean, also this function can take a value as an argument
 * to which this state operator applies
 * @param trueOperatorOrValue - Any value or a state operator
 * @param elseOperatorOrValue - Any value or a state operator
 */
export function iif(condition, trueOperatorOrValue, elseOperatorOrValue) {
    return function iifOperator(existing) {
        // Convert the value to a boolean
        let result = !!condition;
        // but if it is a function then run it to get the result
        if (isPredicate(condition)) {
            result = condition(existing);
        }
        if (result) {
            return retrieveValue(trueOperatorOrValue, existing);
        }
        return retrieveValue(elseOperatorOrValue, existing);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWlmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmUvb3BlcmF0b3JzL3NyYy9paWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFhLE1BQU0sU0FBUyxDQUFDO0FBRS9FLFNBQVMsYUFBYSxDQUNwQixlQUFxQyxFQUNyQyxRQUEwQjtJQUUxQixrQ0FBa0M7SUFDbEMsc0NBQXNDO0lBQ3RDLElBQUksZUFBZSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxPQUFPLEtBQVUsQ0FBQztLQUNuQjtJQUVELHdDQUF3QztJQUN4Qyw0Q0FBNEM7SUFDNUMsd0NBQXdDO0lBQ3hDLElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQ2hDLE9BQU8sUUFBYSxDQUFDO0tBQ3RCO0lBRUQsT0FBTyxlQUFvQixDQUFDO0FBQzlCLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsR0FBRyxDQUNqQixTQUEwQyxFQUMxQyxtQkFBa0QsRUFDbEQsbUJBQW1EO0lBRW5ELE9BQU8sU0FBUyxXQUFXLENBQUMsUUFBMEI7UUFDcEQsaUNBQWlDO1FBQ2pDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDekIsd0RBQXdEO1FBQ3hELElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sR0FBRyxTQUFTLENBQUMsUUFBYSxDQUFDLENBQUM7U0FDbkM7UUFFRCxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sYUFBYSxDQUFJLG1CQUEyQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2hGO1FBRUQsT0FBTyxhQUFhLENBQUksbUJBQTRDLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbEYsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4aXN0aW5nU3RhdGUsIE5vSW5mZXIsIFN0YXRlT3BlcmF0b3IgfSBmcm9tICcuL3R5cGVzJztcblxuaW1wb3J0IHsgaXNTdGF0ZU9wZXJhdG9yLCBpc1VuZGVmaW5lZCwgaXNQcmVkaWNhdGUsIFByZWRpY2F0ZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5mdW5jdGlvbiByZXRyaWV2ZVZhbHVlPFQ+KFxuICBvcGVyYXRvck9yVmFsdWU6IFN0YXRlT3BlcmF0b3I8VD4gfCBULFxuICBleGlzdGluZzogRXhpc3RpbmdTdGF0ZTxUPlxuKTogVCB7XG4gIC8vIElmIHN0YXRlIG9wZXJhdG9yIGlzIGEgZnVuY3Rpb25cbiAgLy8gdGhlbiBjYWxsIGl0IHdpdGggYW4gb3JpZ2luYWwgdmFsdWVcbiAgaWYgKGlzU3RhdGVPcGVyYXRvcihvcGVyYXRvck9yVmFsdWUpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBvcGVyYXRvck9yVmFsdWUoZXhpc3RpbmcpO1xuICAgIHJldHVybiB2YWx1ZSBhcyBUO1xuICB9XG5cbiAgLy8gSWYgb3BlcmF0b3Igb3IgdmFsdWUgd2FzIG5vdCBwcm92aWRlZFxuICAvLyBlLmcuIGBlbHNlT3BlcmF0b3JPclZhbHVlYCBpcyBgdW5kZWZpbmVkYFxuICAvLyB0aGVuIHdlIGp1c3QgcmV0dXJuIGFuIG9yaWdpbmFsIHZhbHVlXG4gIGlmIChpc1VuZGVmaW5lZChvcGVyYXRvck9yVmFsdWUpKSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nIGFzIFQ7XG4gIH1cblxuICByZXR1cm4gb3BlcmF0b3JPclZhbHVlIGFzIFQ7XG59XG5cbi8qKlxuICogQHBhcmFtIGNvbmRpdGlvbiAtIENvbmRpdGlvbiBjYW4gYmUgYSBwbGFpbiBib29sZWFuIHZhbHVlIG9yIGEgZnVuY3Rpb24sXG4gKiB0aGF0IHJldHVybnMgYm9vbGVhbiwgYWxzbyB0aGlzIGZ1bmN0aW9uIGNhbiB0YWtlIGEgdmFsdWUgYXMgYW4gYXJndW1lbnRcbiAqIHRvIHdoaWNoIHRoaXMgc3RhdGUgb3BlcmF0b3IgYXBwbGllc1xuICogQHBhcmFtIHRydWVPcGVyYXRvck9yVmFsdWUgLSBBbnkgdmFsdWUgb3IgYSBzdGF0ZSBvcGVyYXRvclxuICogQHBhcmFtIGVsc2VPcGVyYXRvck9yVmFsdWUgLSBBbnkgdmFsdWUgb3IgYSBzdGF0ZSBvcGVyYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24gaWlmPFQ+KFxuICBjb25kaXRpb246IE5vSW5mZXI8UHJlZGljYXRlPFQ+PiB8IGJvb2xlYW4sXG4gIHRydWVPcGVyYXRvck9yVmFsdWU6IE5vSW5mZXI8U3RhdGVPcGVyYXRvcjxUPiB8IFQ+LFxuICBlbHNlT3BlcmF0b3JPclZhbHVlPzogTm9JbmZlcjxTdGF0ZU9wZXJhdG9yPFQ+IHwgVD5cbik6IFN0YXRlT3BlcmF0b3I8VD4ge1xuICByZXR1cm4gZnVuY3Rpb24gaWlmT3BlcmF0b3IoZXhpc3Rpbmc6IEV4aXN0aW5nU3RhdGU8VD4pOiBUIHtcbiAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byBhIGJvb2xlYW5cbiAgICBsZXQgcmVzdWx0ID0gISFjb25kaXRpb247XG4gICAgLy8gYnV0IGlmIGl0IGlzIGEgZnVuY3Rpb24gdGhlbiBydW4gaXQgdG8gZ2V0IHRoZSByZXN1bHRcbiAgICBpZiAoaXNQcmVkaWNhdGUoY29uZGl0aW9uKSkge1xuICAgICAgcmVzdWx0ID0gY29uZGl0aW9uKGV4aXN0aW5nIGFzIFQpO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXRyaWV2ZVZhbHVlPFQ+KHRydWVPcGVyYXRvck9yVmFsdWUgYXMgU3RhdGVPcGVyYXRvcjxUPiB8IFQsIGV4aXN0aW5nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0cmlldmVWYWx1ZTxUPihlbHNlT3BlcmF0b3JPclZhbHVlISBhcyBTdGF0ZU9wZXJhdG9yPFQ+IHwgVCwgZXhpc3RpbmcpO1xuICB9O1xufVxuIl19
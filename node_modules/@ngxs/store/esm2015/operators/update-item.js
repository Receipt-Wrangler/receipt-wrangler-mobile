import { isStateOperator, isPredicate, isNumber, invalidIndex } from './utils';
/**
 * @param selector - Index of item in the array or a predicate function
 * that can be provided in `Array.prototype.findIndex`
 * @param operatorOrValue - New value under the `selector` index or a
 * function that can be applied to an existing value
 */
export function updateItem(selector, operatorOrValue) {
    return function updateItemOperator(existing) {
        let index = -1;
        if (isPredicate(selector)) {
            index = existing.findIndex(selector);
        }
        else if (isNumber(selector)) {
            index = selector;
        }
        if (invalidIndex(index)) {
            return existing;
        }
        let value = null;
        // Need to check if the new item value will change the existing item value
        // then, only if it will change it then clone the array and set the item
        const theOperatorOrValue = operatorOrValue;
        if (isStateOperator(theOperatorOrValue)) {
            value = theOperatorOrValue(existing[index]);
        }
        else {
            value = theOperatorOrValue;
        }
        // If the value hasn't been mutated
        // then we just return `existing` array
        if (value === existing[index]) {
            return existing;
        }
        const clone = existing.slice();
        clone[index] = value;
        return clone;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9zdG9yZS9vcGVyYXRvcnMvc3JjL3VwZGF0ZS1pdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQWEsTUFBTSxTQUFTLENBQUM7QUFFMUY7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsVUFBVSxDQUN4QixRQUF3QyxFQUN4QyxlQUF1RDtJQUV2RCxPQUFPLFNBQVMsa0JBQWtCLENBQUMsUUFBNEI7UUFDN0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFZixJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN6QixLQUFLLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUF3QixDQUFDLENBQUM7U0FDdEQ7YUFBTSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3QixLQUFLLEdBQUcsUUFBUSxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdkIsT0FBTyxRQUFlLENBQUM7U0FDeEI7UUFFRCxJQUFJLEtBQUssR0FBTSxJQUFLLENBQUM7UUFDckIsMEVBQTBFO1FBQzFFLHdFQUF3RTtRQUN4RSxNQUFNLGtCQUFrQixHQUFHLGVBQXVDLENBQUM7UUFDbkUsSUFBSSxlQUFlLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUN2QyxLQUFLLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBcUIsQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDTCxLQUFLLEdBQUcsa0JBQWtCLENBQUM7U0FDNUI7UUFFRCxtQ0FBbUM7UUFDbkMsdUNBQXVDO1FBQ3ZDLElBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLFFBQWUsQ0FBQztTQUN4QjtRQUVELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMvQixLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBVSxDQUFDO1FBQzFCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4aXN0aW5nU3RhdGUsIE5vSW5mZXIsIFN0YXRlT3BlcmF0b3IgfSBmcm9tICcuL3R5cGVzJztcblxuaW1wb3J0IHsgaXNTdGF0ZU9wZXJhdG9yLCBpc1ByZWRpY2F0ZSwgaXNOdW1iZXIsIGludmFsaWRJbmRleCwgUHJlZGljYXRlIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogQHBhcmFtIHNlbGVjdG9yIC0gSW5kZXggb2YgaXRlbSBpbiB0aGUgYXJyYXkgb3IgYSBwcmVkaWNhdGUgZnVuY3Rpb25cbiAqIHRoYXQgY2FuIGJlIHByb3ZpZGVkIGluIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YFxuICogQHBhcmFtIG9wZXJhdG9yT3JWYWx1ZSAtIE5ldyB2YWx1ZSB1bmRlciB0aGUgYHNlbGVjdG9yYCBpbmRleCBvciBhXG4gKiBmdW5jdGlvbiB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIGFuIGV4aXN0aW5nIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVJdGVtPFQ+KFxuICBzZWxlY3RvcjogbnVtYmVyIHwgTm9JbmZlcjxQcmVkaWNhdGU8VD4+LFxuICBvcGVyYXRvck9yVmFsdWU6IE5vSW5mZXI8VD4gfCBOb0luZmVyPFN0YXRlT3BlcmF0b3I8VD4+XG4pOiBTdGF0ZU9wZXJhdG9yPFRbXT4ge1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlSXRlbU9wZXJhdG9yKGV4aXN0aW5nOiBFeGlzdGluZ1N0YXRlPFRbXT4pOiBUW10ge1xuICAgIGxldCBpbmRleCA9IC0xO1xuXG4gICAgaWYgKGlzUHJlZGljYXRlKHNlbGVjdG9yKSkge1xuICAgICAgaW5kZXggPSBleGlzdGluZy5maW5kSW5kZXgoc2VsZWN0b3IgYXMgUHJlZGljYXRlPFQ+KTtcbiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKHNlbGVjdG9yKSkge1xuICAgICAgaW5kZXggPSBzZWxlY3RvcjtcbiAgICB9XG5cbiAgICBpZiAoaW52YWxpZEluZGV4KGluZGV4KSkge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nIGFzIFRbXTtcbiAgICB9XG5cbiAgICBsZXQgdmFsdWU6IFQgPSBudWxsITtcbiAgICAvLyBOZWVkIHRvIGNoZWNrIGlmIHRoZSBuZXcgaXRlbSB2YWx1ZSB3aWxsIGNoYW5nZSB0aGUgZXhpc3RpbmcgaXRlbSB2YWx1ZVxuICAgIC8vIHRoZW4sIG9ubHkgaWYgaXQgd2lsbCBjaGFuZ2UgaXQgdGhlbiBjbG9uZSB0aGUgYXJyYXkgYW5kIHNldCB0aGUgaXRlbVxuICAgIGNvbnN0IHRoZU9wZXJhdG9yT3JWYWx1ZSA9IG9wZXJhdG9yT3JWYWx1ZSBhcyBUIHwgU3RhdGVPcGVyYXRvcjxUPjtcbiAgICBpZiAoaXNTdGF0ZU9wZXJhdG9yKHRoZU9wZXJhdG9yT3JWYWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdGhlT3BlcmF0b3JPclZhbHVlKGV4aXN0aW5nW2luZGV4XSBhcyBFeGlzdGluZ1N0YXRlPFQ+KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSB0aGVPcGVyYXRvck9yVmFsdWU7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHZhbHVlIGhhc24ndCBiZWVuIG11dGF0ZWRcbiAgICAvLyB0aGVuIHdlIGp1c3QgcmV0dXJuIGBleGlzdGluZ2AgYXJyYXlcbiAgICBpZiAodmFsdWUgPT09IGV4aXN0aW5nW2luZGV4XSkge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nIGFzIFRbXTtcbiAgICB9XG5cbiAgICBjb25zdCBjbG9uZSA9IGV4aXN0aW5nLnNsaWNlKCk7XG4gICAgY2xvbmVbaW5kZXhdID0gdmFsdWUgYXMgVDtcbiAgICByZXR1cm4gY2xvbmU7XG4gIH07XG59XG4iXX0=
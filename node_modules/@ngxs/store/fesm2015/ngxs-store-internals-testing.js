import * as i0 from '@angular/core';
import { Component, NgModule, ApplicationRef, destroyPlatform, VERSION, createPlatform } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { BrowserModule, ɵBrowserDomAdapter, ɵgetDOM } from '@angular/platform-browser';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { NgxsModule, Store } from '@ngxs/store';
import { __awaiter } from 'tslib';

class NgxsTestComponent {
    ngOnInit() { }
    ngAfterViewInit() { }
}
/** @nocollapse */ NgxsTestComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsTestComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ NgxsTestComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: NgxsTestComponent, selector: "app-root", ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsTestComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-root',
                    template: ''
                }]
        }] });

class NgxsTestModule {
    static ngDoBootstrap(app) {
        app.bootstrap(NgxsTestComponent);
    }
}
/** @nocollapse */ NgxsTestModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsTestModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ NgxsTestModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsTestModule, declarations: [NgxsTestComponent], imports: [BrowserModule] });
/** @nocollapse */ NgxsTestModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsTestModule, imports: [[BrowserModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: NgxsTestModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [BrowserModule],
                    declarations: [NgxsTestComponent],
                    entryComponents: [NgxsTestComponent]
                }]
        }] });

class NgxsTestBed {
    static configureTestingStates(options) {
        this.resetTestBed();
        if (options.before) {
            options.before();
        }
        TestBed.configureTestingModule({
            imports: [
                NgxsTestModule,
                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {}),
                ...(options.imports || [])
            ]
        }).compileComponents();
        NgxsTestBed.ngxsBootstrap();
        return {
            get store() {
                return TestBed.inject(Store);
            },
            get getTestBed() {
                return TestBed;
            }
        };
    }
    static ngxsBootstrap() {
        NgxsTestBed.createRootNode();
        NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));
    }
    static resetTestBed() {
        TestBed.resetTestEnvironment();
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    }
    static createRootNode(selector = 'app-root') {
        const document = TestBed.inject(DOCUMENT);
        const adapter = new ɵBrowserDomAdapter();
        const root = adapter.createElement(selector);
        document.body.appendChild(root);
    }
}

function createRootElement() {
    const document = TestBed.inject(DOCUMENT);
    const root = ɵgetDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
function removeRootElement() {
    const root = document.getElementsByTagName('app-root').item(0);
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    const version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
function freshPlatform(fn) {
    let resolve = null;
    let reject = null;
    let whenDoneIsCalledPromise = null;
    const hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        });
    }
    return function testWithAFreshPlatform() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                destroyPlatformBeforeBootstrappingTheNewOne();
                if (hasDoneArgument) {
                    yield fn((error) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve();
                        }
                    });
                    yield whenDoneIsCalledPromise;
                }
                else {
                    yield fn();
                }
            }
            finally {
                resetPlatformAfterBootstrapping();
            }
        });
    };
}

/// <reference types="jest" />
function skipConsoleLogging(fn) {
    const consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation(() => { }),
        jest.spyOn(console, 'warn').mockImplementation(() => { }),
        jest.spyOn(console, 'error').mockImplementation(() => { }),
        jest.spyOn(console, 'info').mockImplementation(() => { })
    ];
    function restoreSpies() {
        consoleSpies.forEach(spy => spy.mockRestore());
    }
    let restoreSpyAsync = false;
    try {
        const returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return returnValue.finally(() => restoreSpies());
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}

/**
 * Generated bundle index. Do not edit.
 */

export { NgxsTestBed, freshPlatform, skipConsoleLogging };
//# sourceMappingURL=ngxs-store-internals-testing.js.map

import { InjectionToken } from '@angular/core';
import { exctractStringKey, isKeyWithExplicitEngine } from './storage-key';
import { STORAGE_ENGINE } from '../symbols';
const NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;
export const FINAL_NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken(NG_DEV_MODE ? 'FINAL_NGXS_STORAGE_PLUGIN_OPTIONS' : '');
export function createFinalStoragePluginOptions(injector, options) {
    const storageKeys = Array.isArray(options.key) ? options.key : [options.key];
    const keysWithEngines = storageKeys.map((storageKey) => {
        const key = exctractStringKey(storageKey);
        const engine = isKeyWithExplicitEngine(storageKey)
            ? injector.get(storageKey.engine)
            : injector.get(STORAGE_ENGINE);
        return { key, engine };
    });
    return Object.assign(Object.assign({}, options), { keysWithEngines });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluYWwtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JhZ2UtcGx1Z2luL3NyYy9pbnRlcm5hbHMvZmluYWwtb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSx1QkFBdUIsRUFBYyxNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQTJDLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQVdyRixNQUFNLFdBQVcsR0FBRyxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUM1QyxJQUFJLGNBQWMsQ0FDaEIsV0FBVyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUN2RCxDQUFDO0FBRUosTUFBTSxVQUFVLCtCQUErQixDQUM3QyxRQUFrQixFQUNsQixPQUFpQztJQUVqQyxNQUFNLFdBQVcsR0FBaUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUksQ0FBQyxDQUFDO0lBRTVGLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFzQixFQUFFLEVBQUU7UUFDakUsTUFBTSxHQUFHLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUMsTUFBTSxNQUFNLEdBQUcsdUJBQXVCLENBQUMsVUFBVSxDQUFDO1lBQ2hELENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7WUFDakMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDakMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILHVDQUNLLE9BQU8sS0FDVixlQUFlLElBQ2Y7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGV4Y3RyYWN0U3RyaW5nS2V5LCBpc0tleVdpdGhFeHBsaWNpdEVuZ2luZSwgU3RvcmFnZUtleSB9IGZyb20gJy4vc3RvcmFnZS1rZXknO1xuaW1wb3J0IHsgTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zLCBTdG9yYWdlRW5naW5lLCBTVE9SQUdFX0VOR0lORSB9IGZyb20gJy4uL3N5bWJvbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbmFsTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zIGV4dGVuZHMgTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zIHtcbiAga2V5c1dpdGhFbmdpbmVzOiB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgZW5naW5lOiBTdG9yYWdlRW5naW5lO1xuICB9W107XG59XG5cbmRlY2xhcmUgY29uc3QgbmdEZXZNb2RlOiBib29sZWFuO1xuXG5jb25zdCBOR19ERVZfTU9ERSA9IHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZTtcblxuZXhwb3J0IGNvbnN0IEZJTkFMX05HWFNfU1RPUkFHRV9QTFVHSU5fT1BUSU9OUyA9XG4gIG5ldyBJbmplY3Rpb25Ub2tlbjxGaW5hbE5neHNTdG9yYWdlUGx1Z2luT3B0aW9ucz4oXG4gICAgTkdfREVWX01PREUgPyAnRklOQUxfTkdYU19TVE9SQUdFX1BMVUdJTl9PUFRJT05TJyA6ICcnXG4gICk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaW5hbFN0b3JhZ2VQbHVnaW5PcHRpb25zKFxuICBpbmplY3RvcjogSW5qZWN0b3IsXG4gIG9wdGlvbnM6IE5neHNTdG9yYWdlUGx1Z2luT3B0aW9uc1xuKTogRmluYWxOZ3hzU3RvcmFnZVBsdWdpbk9wdGlvbnMge1xuICBjb25zdCBzdG9yYWdlS2V5czogU3RvcmFnZUtleVtdID0gQXJyYXkuaXNBcnJheShvcHRpb25zLmtleSkgPyBvcHRpb25zLmtleSA6IFtvcHRpb25zLmtleSFdO1xuXG4gIGNvbnN0IGtleXNXaXRoRW5naW5lcyA9IHN0b3JhZ2VLZXlzLm1hcCgoc3RvcmFnZUtleTogU3RvcmFnZUtleSkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGV4Y3RyYWN0U3RyaW5nS2V5KHN0b3JhZ2VLZXkpO1xuICAgIGNvbnN0IGVuZ2luZSA9IGlzS2V5V2l0aEV4cGxpY2l0RW5naW5lKHN0b3JhZ2VLZXkpXG4gICAgICA/IGluamVjdG9yLmdldChzdG9yYWdlS2V5LmVuZ2luZSlcbiAgICAgIDogaW5qZWN0b3IuZ2V0KFNUT1JBR0VfRU5HSU5FKTtcbiAgICByZXR1cm4geyBrZXksIGVuZ2luZSB9O1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAga2V5c1dpdGhFbmdpbmVzXG4gIH07XG59XG4iXX0=
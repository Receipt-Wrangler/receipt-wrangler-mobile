(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('@angular/common'), require('rxjs/operators')) :
  typeof define === 'function' && define.amd ? define('@ngxs/storage-plugin', ['exports', '@angular/core', '@ngxs/store', '@angular/common', 'rxjs/operators'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ngxs = global.ngxs || {}, global.ngxs["storage-plugin"] = {}), global.ng.core, global["ngxs-store"], global.ng.common, global.rxjs.operators));
})(this, (function (exports, i0, store, common, operators) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

  var NG_DEV_MODE$4 = typeof ngDevMode === 'undefined' || ngDevMode;
  var NGXS_STORAGE_PLUGIN_OPTIONS = new i0.InjectionToken(NG_DEV_MODE$4 ? 'NGXS_STORAGE_PLUGIN_OPTIONS' : '');
  var STORAGE_ENGINE = new i0.InjectionToken(NG_DEV_MODE$4 ? 'STORAGE_ENGINE' : '');

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise, SuppressedError, Symbol */
  var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b)
              if (Object.prototype.hasOwnProperty.call(b, p))
                  d[p] = b[p]; };
      return extendStatics(d, b);
  };
  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign = function () {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p))
                      t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };
  function __rest(s, e) {
      var t = {};
      for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }
  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
      else
          for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                  r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __param(paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); };
  }
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
      function accept(f) { if (f !== void 0 && typeof f !== "function")
          throw new TypeError("Function expected"); return f; }
      var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
      var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
      var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
      var _, done = false;
      for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn)
              context[p] = p === "access" ? {} : contextIn[p];
          for (var p in contextIn.access)
              context.access[p] = contextIn.access[p];
          context.addInitializer = function (f) { if (done)
              throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
          var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
          if (kind === "accessor") {
              if (result === void 0)
                  continue;
              if (result === null || typeof result !== "object")
                  throw new TypeError("Object expected");
              if (_ = accept(result.get))
                  descriptor.get = _;
              if (_ = accept(result.set))
                  descriptor.set = _;
              if (_ = accept(result.init))
                  initializers.unshift(_);
          }
          else if (_ = accept(result)) {
              if (kind === "field")
                  initializers.unshift(_);
              else
                  descriptor[key] = _;
          }
      }
      if (target)
          Object.defineProperty(target, contextIn.name, descriptor);
      done = true;
  }
  ;
  function __runInitializers(thisArg, initializers, value) {
      var useValue = arguments.length > 2;
      for (var i = 0; i < initializers.length; i++) {
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
      }
      return useValue ? value : void 0;
  }
  ;
  function __propKey(x) {
      return typeof x === "symbol" ? x : "".concat(x);
  }
  ;
  function __setFunctionName(f, name, prefix) {
      if (typeof name === "symbol")
          name = name.description ? "[".concat(name.description, "]") : "";
      return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
  }
  ;
  function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try {
              step(generator.next(value));
          }
          catch (e) {
              reject(e);
          } }
          function rejected(value) { try {
              step(generator["throw"](value));
          }
          catch (e) {
              reject(e);
          } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }
  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function () { if (t[0] & 1)
              throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f)
              throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _)
              try {
                  if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                      return t;
                  if (y = 0, t)
                      op = [op[0] & 2, t.value];
                  switch (op[0]) {
                      case 0:
                      case 1:
                          t = op;
                          break;
                      case 4:
                          _.label++;
                          return { value: op[1], done: false };
                      case 5:
                          _.label++;
                          y = op[1];
                          op = [0];
                          continue;
                      case 7:
                          op = _.ops.pop();
                          _.trys.pop();
                          continue;
                      default:
                          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                              _ = 0;
                              continue;
                          }
                          if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                              _.label = op[1];
                              break;
                          }
                          if (op[0] === 6 && _.label < t[1]) {
                              _.label = t[1];
                              t = op;
                              break;
                          }
                          if (t && _.label < t[2]) {
                              _.label = t[2];
                              _.ops.push(op);
                              break;
                          }
                          if (t[2])
                              _.ops.pop();
                          _.trys.pop();
                          continue;
                  }
                  op = body.call(thisArg, _);
              }
              catch (e) {
                  op = [6, e];
                  y = 0;
              }
              finally {
                  f = t = 0;
              }
          if (op[0] & 5)
              throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
      }
  }
  var __createBinding = Object.create ? (function (o, m, k, k2) {
      if (k2 === undefined)
          k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function () { return m[k]; } };
      }
      Object.defineProperty(o, k2, desc);
  }) : (function (o, m, k, k2) {
      if (k2 === undefined)
          k2 = k;
      o[k2] = m[k];
  });
  function __exportStar(m, o) {
      for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
  }
  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
          return m.call(o);
      if (o && typeof o.length === "number")
          return {
              next: function () {
                  if (o && i >= o.length)
                      o = void 0;
                  return { value: o && o[i++], done: !o };
              }
          };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
          return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
      }
      catch (error) {
          e = { error: error };
      }
      finally {
          try {
              if (r && !r.done && (m = i["return"]))
                  m.call(i);
          }
          finally {
              if (e)
                  throw e.error;
          }
      }
      return ar;
  }
  /** @deprecated */
  function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
      return ar;
  }
  /** @deprecated */
  function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }
  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                  if (!ar)
                      ar = Array.prototype.slice.call(from, 0, i);
                  ar[i] = from[i];
              }
          }
      return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
      function verb(n) { if (g[n])
          i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
      function resume(n, v) { try {
          step(g[n](v));
      }
      catch (e) {
          settle(q[0][3], e);
      } }
      function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
      function fulfill(value) { resume("next", value); }
      function reject(value) { resume("throw", value); }
      function settle(f, v) { if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]); }
  }
  function __asyncDelegator(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
      function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
  }
  function __asyncValues(o) {
      if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
  }
  function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
      }
      else {
          cooked.raw = raw;
      }
      return cooked;
  }
  ;
  var __setModuleDefault = Object.create ? (function (o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
  }) : function (o, v) {
      o["default"] = v;
  };
  function __importStar(mod) {
      if (mod && mod.__esModule)
          return mod;
      var result = {};
      if (mod != null)
          for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                  __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
  }
  function __importDefault(mod) {
      return (mod && mod.__esModule) ? mod : { default: mod };
  }
  function __classPrivateFieldGet(receiver, state, kind, f) {
      if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  }
  function __classPrivateFieldSet(receiver, state, value, kind, f) {
      if (kind === "m")
          throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
  }
  function __classPrivateFieldIn(state, receiver) {
      if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function"))
          throw new TypeError("Cannot use 'in' operator on non-object");
      return typeof state === "function" ? receiver === state : state.has(receiver);
  }
  function __addDisposableResource(env, value, async) {
      if (value !== null && value !== void 0) {
          if (typeof value !== "object" && typeof value !== "function")
              throw new TypeError("Object expected.");
          var dispose;
          if (async) {
              if (!Symbol.asyncDispose)
                  throw new TypeError("Symbol.asyncDispose is not defined.");
              dispose = value[Symbol.asyncDispose];
          }
          if (dispose === void 0) {
              if (!Symbol.dispose)
                  throw new TypeError("Symbol.dispose is not defined.");
              dispose = value[Symbol.dispose];
          }
          if (typeof dispose !== "function")
              throw new TypeError("Object not disposable.");
          env.stack.push({ value: value, dispose: dispose, async: async });
      }
      else if (async) {
          env.stack.push({ async: true });
      }
      return value;
  }
  var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  function __disposeResources(env) {
      function fail(e) {
          env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
          env.hasError = true;
      }
      function next() {
          while (env.stack.length) {
              var rec = env.stack.pop();
              try {
                  var result = rec.dispose && rec.dispose.call(rec.value);
                  if (rec.async)
                      return Promise.resolve(result).then(next, function (e) { fail(e); return next(); });
              }
              catch (e) {
                  fail(e);
              }
          }
          if (env.hasError)
              throw env.error;
      }
      return next();
  }
  var tslib_es6 = {
      __extends: __extends,
      __assign: __assign,
      __rest: __rest,
      __decorate: __decorate,
      __param: __param,
      __metadata: __metadata,
      __awaiter: __awaiter,
      __generator: __generator,
      __createBinding: __createBinding,
      __exportStar: __exportStar,
      __values: __values,
      __read: __read,
      __spread: __spread,
      __spreadArrays: __spreadArrays,
      __spreadArray: __spreadArray,
      __await: __await,
      __asyncGenerator: __asyncGenerator,
      __asyncDelegator: __asyncDelegator,
      __asyncValues: __asyncValues,
      __makeTemplateObject: __makeTemplateObject,
      __importStar: __importStar,
      __importDefault: __importDefault,
      __classPrivateFieldGet: __classPrivateFieldGet,
      __classPrivateFieldSet: __classPrivateFieldSet,
      __classPrivateFieldIn: __classPrivateFieldIn,
      __addDisposableResource: __addDisposableResource,
      __disposeResources: __disposeResources,
  };

  /**
   * The following key is used to store the entire serialized
   * state when there's no specific state provided.
   */
  var DEFAULT_STATE_KEY = '@@STATE';
  function storageOptionsFactory(options) {
      return Object.assign({ key: [DEFAULT_STATE_KEY], storage: 0 /* LocalStorage */, serialize: JSON.stringify, deserialize: JSON.parse, beforeSerialize: function (obj) { return obj; }, afterDeserialize: function (obj) { return obj; } }, options);
  }
  function engineFactory(options, platformId) {
      if (common.isPlatformServer(platformId)) {
          return null;
      }
      if (options.storage === 0 /* LocalStorage */) {
          return localStorage;
      }
      else if (options.storage === 1 /* SessionStorage */) {
          return sessionStorage;
      }
      return null;
  }
  function getStorageKey(key, options) {
      // Prepends the `namespace` option to any key if it's been provided by a user.
      // So `@@STATE` becomes `my-app:@@STATE`.
      return options && options.namespace ? options.namespace + ":" + key : key;
  }

  /** Determines whether the provided key has the following structure. */
  function isKeyWithExplicitEngine(key) {
      return key != null && !!key.engine;
  }
  /** This symbol is used to store the metadata on state classes. */
  var META_OPTIONS_KEY = 'NGXS_OPTIONS_META';
  function exctractStringKey(storageKey) {
      // Extract the actual key out of the `{ key, engine }` structure.
      if (isKeyWithExplicitEngine(storageKey)) {
          storageKey = storageKey.key;
      }
      // Given the `storageKey` is a class, for instance, `AuthState`.
      // We should retrieve its metadata and the `name` property.
      // The `name` property might be a string (state name) or a state token.
      if (storageKey.hasOwnProperty(META_OPTIONS_KEY)) {
          storageKey = storageKey[META_OPTIONS_KEY].name;
      }
      return storageKey instanceof store.StateToken ? storageKey.getName() : storageKey;
  }

  var NG_DEV_MODE$3 = typeof ngDevMode === 'undefined' || ngDevMode;
  var FINAL_NGXS_STORAGE_PLUGIN_OPTIONS = new i0.InjectionToken(NG_DEV_MODE$3 ? 'FINAL_NGXS_STORAGE_PLUGIN_OPTIONS' : '');
  function createFinalStoragePluginOptions(injector, options) {
      var storageKeys = Array.isArray(options.key) ? options.key : [options.key];
      var keysWithEngines = storageKeys.map(function (storageKey) {
          var key = exctractStringKey(storageKey);
          var engine = isKeyWithExplicitEngine(storageKey)
              ? injector.get(storageKey.engine)
              : injector.get(STORAGE_ENGINE);
          return { key: key, engine: engine };
      });
      return Object.assign(Object.assign({}, options), { keysWithEngines: keysWithEngines });
  }

  var NG_DEV_MODE$2 = typeof ngDevMode === 'undefined' || ngDevMode;
  var NgxsStoragePlugin = /** @class */ (function () {
      function NgxsStoragePlugin(_options, _platformId) {
          this._options = _options;
          this._platformId = _platformId;
          this._keysWithEngines = this._options.keysWithEngines;
          // We default to `[DEFAULT_STATE_KEY]` if the user explicitly does not provide the `key` option.
          this._usesDefaultStateKey = this._keysWithEngines.length === 1 && this._keysWithEngines[0].key === DEFAULT_STATE_KEY;
      }
      NgxsStoragePlugin.prototype.handle = function (state, event, next) {
          var e_1, _c;
          var _this = this;
          var _a;
          if (common.isPlatformServer(this._platformId)) {
              return next(state, event);
          }
          var matches = store.actionMatcher(event);
          var isInitAction = matches(store.InitState);
          var isUpdateAction = matches(store.UpdateState);
          var isInitOrUpdateAction = isInitAction || isUpdateAction;
          var hasMigration = false;
          if (isInitOrUpdateAction) {
              var addedStates = isUpdateAction && event.addedStates;
              var _loop_1 = function (key, engine) {
                  // We're checking what states have been added by NGXS and if any of these states should be handled by
                  // the storage plugin. For instance, we only want to deserialize the `auth` state, NGXS has added
                  // the `user` state, the storage plugin will be rerun and will do redundant deserialization.
                  // `usesDefaultStateKey` is necessary to check since `event.addedStates` never contains `@@STATE`.
                  if (!this_1._usesDefaultStateKey && addedStates) {
                      // We support providing keys that can be deeply nested via dot notation, for instance,
                      // `keys: ['myState.myProperty']` is a valid key.
                      // The state name should always go first. The below code checks if the `key` includes dot
                      // notation and extracts the state name out of the key.
                      // Given the `key` is `myState.myProperty`, the `addedStates` will only contain `myState`.
                      var dotNotationIndex = key.indexOf(DOT);
                      var stateName = dotNotationIndex > -1 ? key.slice(0, dotNotationIndex) : key;
                      if (!addedStates.hasOwnProperty(stateName)) {
                          return "continue";
                      }
                  }
                  var storageKey = getStorageKey(key, this_1._options);
                  var storedValue = engine.getItem(storageKey);
                  if (storedValue !== 'undefined' && storedValue != null) {
                      try {
                          var newVal = this_1._options.deserialize(storedValue);
                          storedValue = this_1._options.afterDeserialize(newVal, key);
                      }
                      catch (_b) {
                          if (NG_DEV_MODE$2) {
                              console.error("Error ocurred while deserializing the " + storageKey + " store value, falling back to empty object, the value obtained from the store: ", storedValue);
                          }
                          storedValue = {};
                      }
                      (_a = this_1._options.migrations) === null || _a === void 0 ? void 0 : _a.forEach(function (strategy) {
                          var versionMatch = strategy.version === store.getValue(storedValue, strategy.versionKey || 'version');
                          var keyMatch = (!strategy.key && _this._usesDefaultStateKey) || strategy.key === key;
                          if (versionMatch && keyMatch) {
                              storedValue = strategy.migrate(storedValue);
                              hasMigration = true;
                          }
                      });
                      if (!this_1._usesDefaultStateKey) {
                          state = store.setValue(state, key, storedValue);
                      }
                      else {
                          // The `UpdateState` action is dispatched whenever the feature
                          // state is added. The condition below is satisfied only when
                          // the `UpdateState` action is dispatched. Let's consider two states:
                          // `counter` and `@ngxs/router-plugin` state. When we call `NgxsModule.forRoot()`,
                          // `CounterState` is provided at the root level, while `@ngxs/router-plugin`
                          // is provided as a feature state. Beforehand, the storage plugin may have
                          // stored the value of the counter state as `10`. If `CounterState` implements
                          // the `ngxsOnInit` hook and calls `ctx.setState(999)`, the storage plugin
                          // will rehydrate the entire state when the `RouterState` is registered.
                          // Consequently, the `counter` state will revert back to `10` instead of `999`.
                          if (storedValue && addedStates && Object.keys(addedStates).length > 0) {
                              storedValue = Object.keys(addedStates).reduce(function (accumulator, addedState) {
                                  // The `storedValue` can be equal to the entire state when the default
                                  // state key is used. However, if `addedStates` only contains the `router` value,
                                  // we only want to merge the state with the `router` value.
                                  // Let's assume that the `storedValue` is an object:
                                  // `{ counter: 10, router: {...} }`
                                  // This will pick only the `router` object from the `storedValue` and `counter`
                                  // state will not be rehydrated unnecessary.
                                  if (storedValue.hasOwnProperty(addedState)) {
                                      accumulator[addedState] = storedValue[addedState];
                                  }
                                  return accumulator;
                              }, {});
                          }
                          state = Object.assign(Object.assign({}, state), storedValue);
                      }
                  }
              };
              var this_1 = this;
              try {
                  for (var _d = __values(this._keysWithEngines), _e = _d.next(); !_e.done; _e = _d.next()) {
                      var _f = _e.value, key = _f.key, engine = _f.engine;
                      _loop_1(key, engine);
                  }
              }
              catch (e_1_1) { e_1 = { error: e_1_1 }; }
              finally {
                  try {
                      if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                  }
                  finally { if (e_1) throw e_1.error; }
              }
          }
          return next(state, event).pipe(operators.tap(function (nextState) {
              var e_2, _c;
              if (isInitOrUpdateAction && !hasMigration) {
                  return;
              }
              try {
                  for (var _d = __values(_this._keysWithEngines), _e = _d.next(); !_e.done; _e = _d.next()) {
                      var _f = _e.value, key = _f.key, engine = _f.engine;
                      var storedValue = nextState;
                      var storageKey = getStorageKey(key, _this._options);
                      if (key !== DEFAULT_STATE_KEY) {
                          storedValue = store.getValue(nextState, key);
                      }
                      try {
                          var newStoredValue = _this._options.beforeSerialize(storedValue, key);
                          engine.setItem(storageKey, _this._options.serialize(newStoredValue));
                      }
                      catch (error) {
                          if (NG_DEV_MODE$2) {
                              if (error &&
                                  (error.name === 'QuotaExceededError' ||
                                      error.name === 'NS_ERROR_DOM_QUOTA_REACHED')) {
                                  console.error("The " + storageKey + " store value exceeds the browser storage quota: ", storedValue);
                              }
                              else {
                                  console.error("Error ocurred while serializing the " + storageKey + " store value, value not updated, the value obtained from the store: ", storedValue);
                              }
                          }
                      }
                  }
              }
              catch (e_2_1) { e_2 = { error: e_2_1 }; }
              finally {
                  try {
                      if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                  }
                  finally { if (e_2) throw e_2.error; }
              }
          }));
      };
      return NgxsStoragePlugin;
  }());
  /** @nocollapse */ NgxsStoragePlugin.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsStoragePlugin, deps: [{ token: FINAL_NGXS_STORAGE_PLUGIN_OPTIONS }, { token: i0.PLATFORM_ID }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
  /** @nocollapse */ NgxsStoragePlugin.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsStoragePlugin });
  i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsStoragePlugin, decorators: [{
              type: i0.Injectable
          }], ctorParameters: function () {
          return [{ type: undefined, decorators: [{
                          type: i0.Inject,
                          args: [FINAL_NGXS_STORAGE_PLUGIN_OPTIONS]
                      }] }, { type: undefined, decorators: [{
                          type: i0.Inject,
                          args: [i0.PLATFORM_ID]
                      }] }];
      } });
  var DOT = '.';

  var NG_DEV_MODE$1 = typeof ngDevMode === 'undefined' || ngDevMode;
  var USER_OPTIONS = new i0.InjectionToken(NG_DEV_MODE$1 ? 'USER_OPTIONS' : '');
  var NgxsStoragePluginModule = /** @class */ (function () {
      function NgxsStoragePluginModule() {
      }
      NgxsStoragePluginModule.forRoot = function (options) {
          return {
              ngModule: NgxsStoragePluginModule,
              providers: [
                  {
                      provide: store.NGXS_PLUGINS,
                      useClass: NgxsStoragePlugin,
                      multi: true
                  },
                  {
                      provide: USER_OPTIONS,
                      useValue: options
                  },
                  {
                      provide: NGXS_STORAGE_PLUGIN_OPTIONS,
                      useFactory: storageOptionsFactory,
                      deps: [USER_OPTIONS]
                  },
                  {
                      provide: STORAGE_ENGINE,
                      useFactory: engineFactory,
                      deps: [NGXS_STORAGE_PLUGIN_OPTIONS, i0.PLATFORM_ID]
                  },
                  {
                      provide: FINAL_NGXS_STORAGE_PLUGIN_OPTIONS,
                      useFactory: createFinalStoragePluginOptions,
                      deps: [i0.Injector, NGXS_STORAGE_PLUGIN_OPTIONS]
                  }
              ]
          };
      };
      return NgxsStoragePluginModule;
  }());
  /** @nocollapse */ NgxsStoragePluginModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsStoragePluginModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
  /** @nocollapse */ NgxsStoragePluginModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsStoragePluginModule });
  /** @nocollapse */ NgxsStoragePluginModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsStoragePluginModule });
  i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsStoragePluginModule, decorators: [{
              type: i0.NgModule
          }] });

  var NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;
  var LOCAL_STORAGE_ENGINE = new i0.InjectionToken(NG_DEV_MODE ? 'LOCAL_STORAGE_ENGINE' : '', {
      providedIn: 'root',
      factory: function () { return (common.isPlatformBrowser(i0.inject(i0.PLATFORM_ID)) ? localStorage : null); }
  });
  var SESSION_STORAGE_ENGINE = new i0.InjectionToken(NG_DEV_MODE ? 'SESSION_STORAGE_ENGINE' : '', {
      providedIn: 'root',
      factory: function () { return (common.isPlatformBrowser(i0.inject(i0.PLATFORM_ID)) ? sessionStorage : null); }
  });

  /**
   * The public api for consumers of @ngxs/storage-plugin
   */

  /**
   * Generated bundle index. Do not edit.
   */

  exports.LOCAL_STORAGE_ENGINE = LOCAL_STORAGE_ENGINE;
  exports.NGXS_STORAGE_PLUGIN_OPTIONS = NGXS_STORAGE_PLUGIN_OPTIONS;
  exports.NgxsStoragePlugin = NgxsStoragePlugin;
  exports.NgxsStoragePluginModule = NgxsStoragePluginModule;
  exports.SESSION_STORAGE_ENGINE = SESSION_STORAGE_ENGINE;
  exports.STORAGE_ENGINE = STORAGE_ENGINE;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngxs-storage-plugin.umd.js.map

{"version":3,"file":"ngxs-storage-plugin.js","sources":["../../../packages/storage-plugin/src/symbols.ts","../../../packages/storage-plugin/src/internals.ts","../../../packages/storage-plugin/src/internals/storage-key.ts","../../../packages/storage-plugin/src/internals/final-options.ts","../../../packages/storage-plugin/src/storage.plugin.ts","../../../packages/storage-plugin/src/storage.module.ts","../../../packages/storage-plugin/src/engines.ts","../../../packages/storage-plugin/index.ts","../../../packages/storage-plugin/ngxs-storage-plugin.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nimport { StorageKey } from './internals/storage-key';\n\nexport const enum StorageOption {\n  LocalStorage,\n  SessionStorage\n}\n\nexport interface NgxsStoragePluginOptions {\n  /**\n   * Key for the state slice to store in the storage engine.\n   */\n  key?: undefined | StorageKey | StorageKey[];\n\n  /**\n   * The namespace is used to prefix the key for the state slice. This is\n   * necessary when running micro frontend applications which use storage plugin.\n   * The namespace will eliminate the conflict between keys that might overlap.\n   */\n  namespace?: string;\n\n  /**\n   * Storage engine to use. Deaults to localStorage but can provide\n   *\n   * sessionStorage or custom implementation of the StorageEngine interface\n   */\n  storage?: StorageOption;\n\n  /**\n   * Migration strategies.\n   */\n  migrations?: {\n    /**\n     * Version to key off.\n     */\n    version: number | string;\n\n    /**\n     * Method to migrate the previous state.\n     */\n    migrate: (state: any) => any;\n\n    /**\n     * Key to migrate.\n     */\n    key?: string;\n\n    /**\n     * Key for the version. Defaults to 'version'.\n     */\n    versionKey?: string;\n  }[];\n\n  /**\n   * Serailizer for the object before its pushed into the engine.\n   */\n  serialize?(obj: any): string;\n\n  /**\n   * Deserializer for the object before its pulled out of the engine.\n   */\n  deserialize?(obj: any): any;\n\n  /**\n   * Method to alter object before serialization.\n   */\n  beforeSerialize?(obj: any, key: string): any;\n\n  /**\n   * Method to alter object after deserialization.\n   */\n  afterDeserialize?(obj: any, key: string): any;\n}\n\ndeclare const ngDevMode: boolean;\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n\nexport const NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken(\n  NG_DEV_MODE ? 'NGXS_STORAGE_PLUGIN_OPTIONS' : ''\n);\n\nexport const STORAGE_ENGINE = new InjectionToken<StorageEngine>(\n  NG_DEV_MODE ? 'STORAGE_ENGINE' : ''\n);\n\nexport interface StorageEngine {\n  getItem(key: string): any;\n  setItem(key: string, value: any): void;\n}\n","import { isPlatformServer } from '@angular/common';\n\nimport { StorageOption, StorageEngine, NgxsStoragePluginOptions } from './symbols';\n\n/**\n * The following key is used to store the entire serialized\n * state when there's no specific state provided.\n */\nexport const DEFAULT_STATE_KEY = '@@STATE';\n\nexport function storageOptionsFactory(\n  options: NgxsStoragePluginOptions | undefined\n): NgxsStoragePluginOptions {\n  return {\n    key: [DEFAULT_STATE_KEY],\n    storage: StorageOption.LocalStorage,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    beforeSerialize: obj => obj,\n    afterDeserialize: obj => obj,\n    ...options\n  };\n}\n\nexport function engineFactory(\n  options: NgxsStoragePluginOptions,\n  platformId: string\n): StorageEngine | null {\n  if (isPlatformServer(platformId)) {\n    return null;\n  }\n\n  if (options.storage === StorageOption.LocalStorage) {\n    return localStorage;\n  } else if (options.storage === StorageOption.SessionStorage) {\n    return sessionStorage;\n  }\n\n  return null;\n}\n\nexport function getStorageKey(key: string, options?: NgxsStoragePluginOptions): string {\n  // Prepends the `namespace` option to any key if it's been provided by a user.\n  // So `@@STATE` becomes `my-app:@@STATE`.\n  return options && options.namespace ? `${options.namespace}:${key}` : key;\n}\n","import { InjectionToken, Type } from '@angular/core';\nimport { StateToken } from '@ngxs/store';\nimport { StateClass } from '@ngxs/store/internals';\n\nimport { StorageEngine } from '../symbols';\n\n/** This enables the user to provide a storage engine per individual key. */\nexport interface KeyWithExplicitEngine {\n  key: string | StateClass | StateToken<any>;\n  engine: Type<StorageEngine> | InjectionToken<StorageEngine>;\n}\n\n/** Determines whether the provided key has the following structure. */\nexport function isKeyWithExplicitEngine(key: any): key is KeyWithExplicitEngine {\n  return key != null && !!key.engine;\n}\n\n/**\n * This tuples all of the possible types allowed in the `key` property.\n * This is not exposed publicly and used internally only.\n */\nexport type StorageKey = string | StateClass | StateToken<any> | KeyWithExplicitEngine;\n\n/** This symbol is used to store the metadata on state classes. */\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\nexport function exctractStringKey(storageKey: StorageKey): string {\n  // Extract the actual key out of the `{ key, engine }` structure.\n  if (isKeyWithExplicitEngine(storageKey)) {\n    storageKey = storageKey.key;\n  }\n\n  // Given the `storageKey` is a class, for instance, `AuthState`.\n  // We should retrieve its metadata and the `name` property.\n  // The `name` property might be a string (state name) or a state token.\n  if (storageKey.hasOwnProperty(META_OPTIONS_KEY)) {\n    storageKey = (storageKey as any)[META_OPTIONS_KEY].name;\n  }\n\n  return storageKey instanceof StateToken ? storageKey.getName() : <string>storageKey;\n}\n","import { InjectionToken, Injector } from '@angular/core';\n\nimport { exctractStringKey, isKeyWithExplicitEngine, StorageKey } from './storage-key';\nimport { NgxsStoragePluginOptions, StorageEngine, STORAGE_ENGINE } from '../symbols';\n\nexport interface FinalNgxsStoragePluginOptions extends NgxsStoragePluginOptions {\n  keysWithEngines: {\n    key: string;\n    engine: StorageEngine;\n  }[];\n}\n\ndeclare const ngDevMode: boolean;\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n\nexport const FINAL_NGXS_STORAGE_PLUGIN_OPTIONS =\n  new InjectionToken<FinalNgxsStoragePluginOptions>(\n    NG_DEV_MODE ? 'FINAL_NGXS_STORAGE_PLUGIN_OPTIONS' : ''\n  );\n\nexport function createFinalStoragePluginOptions(\n  injector: Injector,\n  options: NgxsStoragePluginOptions\n): FinalNgxsStoragePluginOptions {\n  const storageKeys: StorageKey[] = Array.isArray(options.key) ? options.key : [options.key!];\n\n  const keysWithEngines = storageKeys.map((storageKey: StorageKey) => {\n    const key = exctractStringKey(storageKey);\n    const engine = isKeyWithExplicitEngine(storageKey)\n      ? injector.get(storageKey.engine)\n      : injector.get(STORAGE_ENGINE);\n    return { key, engine };\n  });\n\n  return {\n    ...options,\n    keysWithEngines\n  };\n}\n","import { PLATFORM_ID, Inject, Injectable } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { PlainObject } from '@ngxs/store/internals';\nimport {\n  NgxsPlugin,\n  setValue,\n  getValue,\n  InitState,\n  UpdateState,\n  actionMatcher,\n  NgxsNextPluginFn\n} from '@ngxs/store';\nimport { tap } from 'rxjs/operators';\n\nimport { DEFAULT_STATE_KEY, getStorageKey } from './internals';\nimport {\n  FinalNgxsStoragePluginOptions,\n  FINAL_NGXS_STORAGE_PLUGIN_OPTIONS\n} from './internals/final-options';\n\ndeclare const ngDevMode: boolean;\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n\n@Injectable()\nexport class NgxsStoragePlugin implements NgxsPlugin {\n  private _keysWithEngines = this._options.keysWithEngines;\n  // We default to `[DEFAULT_STATE_KEY]` if the user explicitly does not provide the `key` option.\n  private _usesDefaultStateKey =\n    this._keysWithEngines.length === 1 && this._keysWithEngines[0].key === DEFAULT_STATE_KEY;\n\n  constructor(\n    @Inject(FINAL_NGXS_STORAGE_PLUGIN_OPTIONS) private _options: FinalNgxsStoragePluginOptions,\n    @Inject(PLATFORM_ID) private _platformId: string\n  ) {}\n\n  handle(state: any, event: any, next: NgxsNextPluginFn) {\n    if (isPlatformServer(this._platformId)) {\n      return next(state, event);\n    }\n\n    const matches = actionMatcher(event);\n    const isInitAction = matches(InitState);\n    const isUpdateAction = matches(UpdateState);\n    const isInitOrUpdateAction = isInitAction || isUpdateAction;\n    let hasMigration = false;\n\n    if (isInitOrUpdateAction) {\n      const addedStates = isUpdateAction && event.addedStates;\n\n      for (const { key, engine } of this._keysWithEngines) {\n        // We're checking what states have been added by NGXS and if any of these states should be handled by\n        // the storage plugin. For instance, we only want to deserialize the `auth` state, NGXS has added\n        // the `user` state, the storage plugin will be rerun and will do redundant deserialization.\n        // `usesDefaultStateKey` is necessary to check since `event.addedStates` never contains `@@STATE`.\n        if (!this._usesDefaultStateKey && addedStates) {\n          // We support providing keys that can be deeply nested via dot notation, for instance,\n          // `keys: ['myState.myProperty']` is a valid key.\n          // The state name should always go first. The below code checks if the `key` includes dot\n          // notation and extracts the state name out of the key.\n          // Given the `key` is `myState.myProperty`, the `addedStates` will only contain `myState`.\n          const dotNotationIndex = key.indexOf(DOT);\n          const stateName = dotNotationIndex > -1 ? key.slice(0, dotNotationIndex) : key;\n          if (!addedStates.hasOwnProperty(stateName)) {\n            continue;\n          }\n        }\n\n        const storageKey = getStorageKey(key, this._options);\n        let storedValue: any = engine.getItem(storageKey);\n\n        if (storedValue !== 'undefined' && storedValue != null) {\n          try {\n            const newVal = this._options.deserialize!(storedValue);\n            storedValue = this._options.afterDeserialize!(newVal, key);\n          } catch {\n            if (NG_DEV_MODE) {\n              console.error(\n                `Error ocurred while deserializing the ${storageKey} store value, falling back to empty object, the value obtained from the store: `,\n                storedValue\n              );\n            }\n            storedValue = {};\n          }\n\n          this._options.migrations?.forEach(strategy => {\n            const versionMatch =\n              strategy.version === getValue(storedValue, strategy.versionKey || 'version');\n            const keyMatch =\n              (!strategy.key && this._usesDefaultStateKey) || strategy.key === key;\n            if (versionMatch && keyMatch) {\n              storedValue = strategy.migrate(storedValue);\n              hasMigration = true;\n            }\n          });\n\n          if (!this._usesDefaultStateKey) {\n            state = setValue(state, key, storedValue);\n          } else {\n            // The `UpdateState` action is dispatched whenever the feature\n            // state is added. The condition below is satisfied only when\n            // the `UpdateState` action is dispatched. Let's consider two states:\n            // `counter` and `@ngxs/router-plugin` state. When we call `NgxsModule.forRoot()`,\n            // `CounterState` is provided at the root level, while `@ngxs/router-plugin`\n            // is provided as a feature state. Beforehand, the storage plugin may have\n            // stored the value of the counter state as `10`. If `CounterState` implements\n            // the `ngxsOnInit` hook and calls `ctx.setState(999)`, the storage plugin\n            // will rehydrate the entire state when the `RouterState` is registered.\n            // Consequently, the `counter` state will revert back to `10` instead of `999`.\n            if (storedValue && addedStates && Object.keys(addedStates).length > 0) {\n              storedValue = Object.keys(addedStates).reduce((accumulator, addedState) => {\n                // The `storedValue` can be equal to the entire state when the default\n                // state key is used. However, if `addedStates` only contains the `router` value,\n                // we only want to merge the state with the `router` value.\n                // Let's assume that the `storedValue` is an object:\n                // `{ counter: 10, router: {...} }`\n                // This will pick only the `router` object from the `storedValue` and `counter`\n                // state will not be rehydrated unnecessary.\n                if (storedValue.hasOwnProperty(addedState)) {\n                  accumulator[addedState] = storedValue[addedState];\n                }\n                return accumulator;\n              }, <PlainObject>{});\n            }\n\n            state = { ...state, ...storedValue };\n          }\n        }\n      }\n    }\n\n    return next(state, event).pipe(\n      tap(nextState => {\n        if (isInitOrUpdateAction && !hasMigration) {\n          return;\n        }\n\n        for (const { key, engine } of this._keysWithEngines) {\n          let storedValue = nextState;\n\n          const storageKey = getStorageKey(key, this._options);\n\n          if (key !== DEFAULT_STATE_KEY) {\n            storedValue = getValue(nextState, key);\n          }\n\n          try {\n            const newStoredValue = this._options.beforeSerialize!(storedValue, key);\n            engine.setItem(storageKey, this._options.serialize!(newStoredValue));\n          } catch (error) {\n            if (NG_DEV_MODE) {\n              if (\n                error &&\n                (error.name === 'QuotaExceededError' ||\n                  error.name === 'NS_ERROR_DOM_QUOTA_REACHED')\n              ) {\n                console.error(\n                  `The ${storageKey} store value exceeds the browser storage quota: `,\n                  storedValue\n                );\n              } else {\n                console.error(\n                  `Error ocurred while serializing the ${storageKey} store value, value not updated, the value obtained from the store: `,\n                  storedValue\n                );\n              }\n            }\n          }\n        }\n      })\n    );\n  }\n}\n\nconst DOT = '.';\n","import {\n  NgModule,\n  ModuleWithProviders,\n  PLATFORM_ID,\n  InjectionToken,\n  Injector\n} from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\n\nimport {\n  NgxsStoragePluginOptions,\n  STORAGE_ENGINE,\n  NGXS_STORAGE_PLUGIN_OPTIONS\n} from './symbols';\nimport { NgxsStoragePlugin } from './storage.plugin';\nimport { engineFactory, storageOptionsFactory } from './internals';\nimport {\n  createFinalStoragePluginOptions,\n  FINAL_NGXS_STORAGE_PLUGIN_OPTIONS\n} from './internals/final-options';\n\ndeclare const ngDevMode: boolean;\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n\nexport const USER_OPTIONS = new InjectionToken(NG_DEV_MODE ? 'USER_OPTIONS' : '');\n\n@NgModule()\nexport class NgxsStoragePluginModule {\n  static forRoot(\n    options?: NgxsStoragePluginOptions\n  ): ModuleWithProviders<NgxsStoragePluginModule> {\n    return {\n      ngModule: NgxsStoragePluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsStoragePlugin,\n          multi: true\n        },\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_STORAGE_PLUGIN_OPTIONS,\n          useFactory: storageOptionsFactory,\n          deps: [USER_OPTIONS]\n        },\n        {\n          provide: STORAGE_ENGINE,\n          useFactory: engineFactory,\n          deps: [NGXS_STORAGE_PLUGIN_OPTIONS, PLATFORM_ID]\n        },\n        {\n          provide: FINAL_NGXS_STORAGE_PLUGIN_OPTIONS,\n          useFactory: createFinalStoragePluginOptions,\n          deps: [Injector, NGXS_STORAGE_PLUGIN_OPTIONS]\n        }\n      ]\n    };\n  }\n}\n","import { InjectionToken, PLATFORM_ID, inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { StorageEngine } from './symbols';\n\ndeclare const ngDevMode: boolean;\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n\nexport const LOCAL_STORAGE_ENGINE = new InjectionToken<StorageEngine | null>(\n  NG_DEV_MODE ? 'LOCAL_STORAGE_ENGINE' : '',\n  {\n    providedIn: 'root',\n    factory: () => (isPlatformBrowser(inject(PLATFORM_ID)) ? localStorage : null)\n  }\n);\n\nexport const SESSION_STORAGE_ENGINE = new InjectionToken<StorageEngine | null>(\n  NG_DEV_MODE ? 'SESSION_STORAGE_ENGINE' : '',\n  {\n    providedIn: 'root',\n    factory: () => (isPlatformBrowser(inject(PLATFORM_ID)) ? sessionStorage : null)\n  }\n);\n","/**\n * The public api for consumers of @ngxs/storage-plugin\n */\nexport * from './src/public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["NG_DEV_MODE"],"mappings":"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"}
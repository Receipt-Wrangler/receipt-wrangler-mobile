(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngxs/devtools-plugin', ['exports', '@angular/core', '@ngxs/store', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ngxs = global.ngxs || {}, global.ngxs["devtools-plugin"] = {}), global.ng.core, global["ngxs-store"], global.rxjs.operators));
})(this, (function (exports, i0, store, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var NGXS_DEVTOOLS_OPTIONS = new i0.InjectionToken('NGXS_DEVTOOLS_OPTIONS');

    /**
     * Adds support for the Redux Devtools extension:
     * http://extension.remotedev.io/
     */
    var NgxsReduxDevtoolsPlugin = /** @class */ (function () {
        function NgxsReduxDevtoolsPlugin(_options, _injector, _ngZone) {
            this._options = _options;
            this._injector = _injector;
            this._ngZone = _ngZone;
            this.devtoolsExtension = null;
            this.globalDevtools = i0["ɵglobal"]['__REDUX_DEVTOOLS_EXTENSION__'] || i0["ɵglobal"]['devToolsExtension'];
            this.unsubscribe = null;
            this.connect();
        }
        NgxsReduxDevtoolsPlugin.prototype.ngOnDestroy = function () {
            if (this.unsubscribe !== null) {
                this.unsubscribe();
            }
            if (this.globalDevtools) {
                this.globalDevtools.disconnect();
            }
        };
        Object.defineProperty(NgxsReduxDevtoolsPlugin.prototype, "store", {
            /**
             * Lazy get the store for circular dependency issues
             */
            get: function () {
                return this._injector.get(store.Store);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Middleware handle function
         */
        NgxsReduxDevtoolsPlugin.prototype.handle = function (state, action, next) {
            var _this = this;
            if (!this.devtoolsExtension || this._options.disabled) {
                return next(state, action);
            }
            return next(state, action).pipe(operators.catchError(function (error) {
                var newState = _this.store.snapshot();
                _this.sendToDevTools(state, action, newState);
                throw error;
            }), operators.tap(function (newState) {
                _this.sendToDevTools(state, action, newState);
            }));
        };
        NgxsReduxDevtoolsPlugin.prototype.sendToDevTools = function (state, action, newState) {
            var type = store.getActionTypeFromInstance(action);
            // if init action, send initial state to dev tools
            var isInitAction = type === store.InitState.type;
            if (isInitAction) {
                this.devtoolsExtension.init(state);
            }
            else {
                this.devtoolsExtension.send(Object.assign(Object.assign({}, action), { action: null, type: type }), newState);
            }
        };
        /**
         * Handle the action from the dev tools subscription
         */
        NgxsReduxDevtoolsPlugin.prototype.dispatched = function (action) {
            var _this = this;
            if (action.type === "DISPATCH" /* Dispatch */) {
                if (action.payload.type === "JUMP_TO_ACTION" /* JumpToAction */ ||
                    action.payload.type === "JUMP_TO_STATE" /* JumpToState */) {
                    var prevState = JSON.parse(action.state);
                    // This makes the DevTools and Router plugins compatible with each other.
                    // We check for the existence of the `router` state and ensure it has the
                    // `trigger` property, confirming that it is our router state (coming from `@ngxs/router-plugin`).
                    // This enables a time-traveling feature, as it not only restores the state but
                    // also allows the `RouterState` to navigate back when the action is jumped.
                    if (prevState.router && prevState.router.trigger) {
                        prevState.router.trigger = 'devtools';
                    }
                    this.store.reset(prevState);
                }
                else if (action.payload.type === "TOGGLE_ACTION" /* ToggleAction */) {
                    console.warn('Skip is not supported at this time.');
                }
                else if (action.payload.type === "IMPORT_STATE" /* ImportState */) {
                    var _a = action.payload.nextLiftedState, actionsById_1 = _a.actionsById, computedStates_1 = _a.computedStates, currentStateIndex = _a.currentStateIndex;
                    this.devtoolsExtension.init(computedStates_1[0].state);
                    Object.keys(actionsById_1)
                        .filter(function (actionId) { return actionId !== '0'; })
                        .forEach(function (actionId) { return _this.devtoolsExtension.send(actionsById_1[actionId], computedStates_1[actionId].state); });
                    this.store.reset(computedStates_1[currentStateIndex].state);
                }
            }
            else if (action.type === "ACTION" /* Action */) {
                var actionPayload = JSON.parse(action.payload);
                this.store.dispatch(actionPayload);
            }
        };
        NgxsReduxDevtoolsPlugin.prototype.connect = function () {
            var _this = this;
            if (!this.globalDevtools || this._options.disabled) {
                return;
            }
            // The `connect` method adds a `message` event listener to communicate
            // with an extension through `window.postMessage` and handle message events.
            // Since we only handle two specific events, we aim to avoid unnecessary change
            // detections triggered by events that the extension sends, but we don't need to handle.
            this.devtoolsExtension = this._ngZone.runOutsideAngular(function () { return _this.globalDevtools.connect(_this._options); });
            this.unsubscribe = this.devtoolsExtension.subscribe(function (action) {
                if (action.type === "DISPATCH" /* Dispatch */ ||
                    action.type === "ACTION" /* Action */) {
                    _this.dispatched(action);
                }
            });
        };
        return NgxsReduxDevtoolsPlugin;
    }());
    /** @nocollapse */ NgxsReduxDevtoolsPlugin.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsReduxDevtoolsPlugin, deps: [{ token: NGXS_DEVTOOLS_OPTIONS }, { token: i0__namespace.Injector }, { token: i0__namespace.NgZone }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NgxsReduxDevtoolsPlugin.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsReduxDevtoolsPlugin });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsReduxDevtoolsPlugin, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [NGXS_DEVTOOLS_OPTIONS]
                        }] }, { type: i0__namespace.Injector }, { type: i0__namespace.NgZone }];
        } });

    function devtoolsOptionsFactory(options) {
        return Object.assign({ name: 'NGXS' }, options);
    }
    var USER_OPTIONS = new i0.InjectionToken('USER_OPTIONS');
    var NgxsReduxDevtoolsPluginModule = /** @class */ (function () {
        function NgxsReduxDevtoolsPluginModule() {
        }
        NgxsReduxDevtoolsPluginModule.forRoot = function (options) {
            return {
                ngModule: NgxsReduxDevtoolsPluginModule,
                providers: [
                    {
                        provide: store.NGXS_PLUGINS,
                        useClass: NgxsReduxDevtoolsPlugin,
                        multi: true
                    },
                    {
                        provide: USER_OPTIONS,
                        useValue: options
                    },
                    {
                        provide: NGXS_DEVTOOLS_OPTIONS,
                        useFactory: devtoolsOptionsFactory,
                        deps: [USER_OPTIONS]
                    }
                ]
            };
        };
        return NgxsReduxDevtoolsPluginModule;
    }());
    /** @nocollapse */ NgxsReduxDevtoolsPluginModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsReduxDevtoolsPluginModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NgxsReduxDevtoolsPluginModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsReduxDevtoolsPluginModule });
    /** @nocollapse */ NgxsReduxDevtoolsPluginModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsReduxDevtoolsPluginModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: NgxsReduxDevtoolsPluginModule, decorators: [{
                type: i0.NgModule
            }] });

    /**
     * The public api for consumers of @ngxs/devtools-plugin
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NGXS_DEVTOOLS_OPTIONS = NGXS_DEVTOOLS_OPTIONS;
    exports.NgxsReduxDevtoolsPlugin = NgxsReduxDevtoolsPlugin;
    exports.NgxsReduxDevtoolsPluginModule = NgxsReduxDevtoolsPluginModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngxs-devtools-plugin.umd.js.map

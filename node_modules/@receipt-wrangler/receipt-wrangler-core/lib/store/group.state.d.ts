import { StateContext } from '@ngxs/store';
import { Group } from '../api/model/group';
import { AddGroup, RemoveGroup, SetGroups, SetSelectedDashboardId, SetSelectedGroupId, UpdateGroup } from './group.state.actions';
import { GroupMember } from '../api/model/groupMember';
import * as i0 from "@angular/core";
export interface GroupStateInterface {
    groups: Group[];
    selectedGroupId: string;
    selectedDashboardId: string;
}
export declare class GroupState {
    static groups(state: GroupStateInterface): Group[];
    static allGroupMembers(state: GroupStateInterface): GroupMember[];
    static groupsWithoutAll(state: GroupStateInterface): Group[];
    static groupsWithoutSelectedGroup(state: GroupStateInterface): Group[];
    static selectedDashboardId(state: GroupStateInterface): string;
    static selectedGroupId(state: GroupStateInterface): string;
    static receiptListLink(state: GroupStateInterface): string;
    static dashboardLink(state: GroupStateInterface): string;
    static settingsLinkBase(state: GroupStateInterface): string;
    static getGroupById(groupId: string): (state: GroupStateInterface) => Group | undefined;
    addGroup({ getState, patchState }: StateContext<GroupStateInterface>, payload: AddGroup): void;
    removeGroup({ getState, patchState }: StateContext<GroupStateInterface>, payload: RemoveGroup): void;
    setGroups({ patchState }: StateContext<GroupStateInterface>, payload: SetGroups): void;
    updateGroup({ getState, patchState }: StateContext<GroupStateInterface>, payload: UpdateGroup): void;
    setSelectedDashboardId({ getState, patchState }: StateContext<GroupStateInterface>, payload: SetSelectedDashboardId): void;
    setSelectedGroupId({ getState, patchState }: StateContext<GroupStateInterface>, payload: SetSelectedGroupId): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GroupState, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<GroupState>;
}

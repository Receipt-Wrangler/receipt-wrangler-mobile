import { StateContext } from '@ngxs/store';
import { User } from '../api/model/user';
import { AuthStateInterface } from './auth-state.interface';
import { SetAuthState, SetUserPreferences } from './auth.state.actions';
import { UserPreferences } from '../api';
import * as i0 from "@angular/core";
export declare class AuthState {
    static userPreferences(state: AuthStateInterface): UserPreferences | undefined;
    static userRole(state: AuthStateInterface): string;
    static isLoggedIn(state: AuthStateInterface): boolean;
    static userId(state: AuthStateInterface): string;
    static isTokenExpired(state: AuthStateInterface): boolean;
    static loggedInUser(state: AuthStateInterface): User;
    static hasRole(role: string): (state: AuthStateInterface) => boolean;
    setAuthState({ getState, patchState }: StateContext<AuthStateInterface>, payload: SetAuthState): void;
    logout({ getState, patchState }: StateContext<AuthStateInterface>): void;
    setUserPreferences({ patchState }: StateContext<AuthStateInterface>, payload: SetUserPreferences): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthState, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthState>;
}

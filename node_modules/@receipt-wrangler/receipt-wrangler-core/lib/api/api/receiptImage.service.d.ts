import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { EncodedImage } from '../model/encodedImage';
import { FileDataView } from '../model/fileDataView';
import { Receipt } from '../model/receipt';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class ReceiptImageService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Converts a receipt image to jpg
     * This will convert a receipt image to jpg, [SYSTEM USER]
     * @param file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    convertToJpgForm(file: Blob, observe?: 'body', reportProgress?: boolean): Observable<EncodedImage>;
    convertToJpgForm(file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EncodedImage>>;
    convertToJpgForm(file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EncodedImage>>;
    /**
     * Delete receipt image
     * This will delete a receipt image by id [SYSTEM USER]
     * @param receiptImageId Id of receipt image to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteReceiptImageById(receiptImageId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteReceiptImageById(receiptImageId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteReceiptImageById(receiptImageId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get receipt image
     * This will get a receipt image by id, [SYSTEM USER]
     * @param receiptImageId Id of receipt image to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReceiptImageById(receiptImageId: number, observe?: 'body', reportProgress?: boolean): Observable<FileDataView>;
    getReceiptImageById(receiptImageId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileDataView>>;
    getReceiptImageById(receiptImageId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileDataView>>;
    /**
     * Reads a receipt image and returns the parsed results
     * This will parse and read a receipt image, [SYSTEM USER]
     * @param file
     * @param receiptImageId Id of receipt image to perform magic fill on
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;
    magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;
    magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;
    /**
     * Uploads a receipt image
     * This will upload a receipt image, [SYSTEM USER]
     * @param file
     * @param receiptId
     * @param encodedImage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'body', reportProgress?: boolean): Observable<FileDataView>;
    uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileDataView>>;
    uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileDataView>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReceiptImageService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ReceiptImageService>;
}

import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { UserPreferences } from '../model/userPreferences';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class UserPreferencesService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Get user preferences
     * This will return the user&#x27;s preferences for the currently logged in user [SYSTEM USER]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUserPreferences(observe?: 'body', reportProgress?: boolean): Observable<UserPreferences>;
    getUserPreferences(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPreferences>>;
    getUserPreferences(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPreferences>>;
    /**
     * Update user preferences
     * This will update the user&#x27;s preferences for the currently logged in user [SYSTEM USER]
     * @param body User preferences to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateUserPreferences(body: UserPreferences, observe?: 'body', reportProgress?: boolean): Observable<UserPreferences>;
    updateUserPreferences(body: UserPreferences, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPreferences>>;
    updateUserPreferences(body: UserPreferences, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPreferences>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserPreferencesService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserPreferencesService>;
}

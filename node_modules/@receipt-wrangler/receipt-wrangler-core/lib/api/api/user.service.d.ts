import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ResetPasswordCommand } from '../model/resetPasswordCommand';
import { UpdateProfileCommand } from '../model/updateProfileCommand';
import { User } from '../model/user';
import { UserView } from '../model/userView';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class UserService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Converts dummy user
     * This will convert a dummy user to a normal system user, [SYSTEM ADMIN]
     * @param body Login credentials for new user
     * @param userId Id of user to convert to normal system user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Create user
     * This will to create a user, [SYSTEM ADMIN]
     * @param body User to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createUser(body: User, observe?: 'body', reportProgress?: boolean): Observable<any>;
    createUser(body: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    createUser(body: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Delete user
     * This will delete a system user by id [SYSTEM ADMIN]
     * @param userId Id of user to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteUserById(userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteUserById(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteUserById(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get amount owed for user
     * This will return the amount owed for the logged in user, in the specified group, [SYSTEM USER]
     * @param groupId The Id of the group to get amount owed for
     * @param receiptIds The Id of the receipts to get amount owed for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get claims for logged in user
     * This will return the user&#x27;s token claims for the currently logged in user [SYSTEM USER]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUserClaims(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getUserClaims(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getUserClaims(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get username count
     * This will return the number of users in the system with the same username
     * @param username Username to get the count of
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUsernameCount(username: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    getUsernameCount(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    getUsernameCount(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    /**
     * Get users
     * This will get all the users in the system and return a view without sensative information
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUsers(observe?: 'body', reportProgress?: boolean): Observable<Array<UserView>>;
    getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserView>>>;
    getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserView>>>;
    /**
     * Reset password
     * This will reset a password for a user, [SYSTEM ADMIN]
     * @param body Login credentials for new user
     * @param userId Id of user to reset password
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Update user by id
     * This will update a user by id, [SYSTEM ADMIN]
     * @param body User to update
     * @param userId Id of user to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateUserById(body: User, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateUserById(body: User, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateUserById(body: User, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Update user profile
     * This will update the logged in user&#x27;s user profile
     * @param body User profile to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateUserProfile(body: UpdateProfileCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateUserProfile(body: UpdateProfileCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateUserProfile(body: UpdateProfileCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserService>;
}

import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Group } from '../model/group';
import { GroupSettings } from '../model/groupSettings';
import { UpdateGroupSettingsCommand } from '../model/updateGroupSettingsCommand';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class GroupsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Create group
     * This will create a group
     * @param body Group to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createGroup(body: Group, observe?: 'body', reportProgress?: boolean): Observable<any>;
    createGroup(body: Group, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    createGroup(body: Group, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Delete group
     * This will delete a group by id
     * @param groupId Group Id to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteGroup(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteGroup(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteGroup(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Gets a group by Id
     * This will get a group by Id
     * @param groupId Group Id to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getGroupById(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getGroupById(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getGroupById(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get groups for user
     * This will get groups for the currently logged in user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getGroupsForuser(observe?: 'body', reportProgress?: boolean): Observable<Array<Group>>;
    getGroupsForuser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Group>>>;
    getGroupsForuser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Group>>>;
    /**
     * Poll group email
     * This will poll the group email for new receipts and add them to the group
     * @param groupId Group Id to poll
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    pollGroupEmail(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    pollGroupEmail(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    pollGroupEmail(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Update a group
     * This will update a group
     * @param body Group to update
     * @param groupId Group Id to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateGroup(body: Group, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateGroup(body: Group, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateGroup(body: Group, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Update group settings
     * This will update the group settings for a group
     * @param body Group settings to update
     * @param groupId Group Id to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<GroupSettings>;
    updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupSettings>>;
    updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupSettings>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<GroupsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<GroupsService>;
}

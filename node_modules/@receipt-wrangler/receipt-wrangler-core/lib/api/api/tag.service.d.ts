import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PagedData } from '../model/pagedData';
import { PagedRequestCommand } from '../model/pagedRequestCommand';
import { Tag } from '../model/tag';
import { UpsertTagCommand } from '../model/upsertTagCommand';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class TagService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Create tag
     * This will create a tag
     * @param body Tag to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createTag(body: UpsertTagCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;
    createTag(body: UpsertTagCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    createTag(body: UpsertTagCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Delete tag
     * This will delete a tag by id
     * @param tagId Id of tag to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteTag(tagId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteTag(tagId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteTag(tagId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get all tags
     * This will return all tags in the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllTags(observe?: 'body', reportProgress?: boolean): Observable<Array<Tag>>;
    getAllTags(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tag>>>;
    getAllTags(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tag>>>;
    /**
     * Get paged tags
     * This will return paged tags
     * @param body Paging and sorting data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPagedTags(body: PagedRequestCommand, observe?: 'body', reportProgress?: boolean): Observable<PagedData>;
    getPagedTags(body: PagedRequestCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedData>>;
    getPagedTags(body: PagedRequestCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedData>>;
    /**
     * Get tag count by name
     * This will count of names with the same name
     * @param tagName Tag name to get count of
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getTagCountByName(tagName: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    getTagCountByName(tagName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    getTagCountByName(tagName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    /**
     * Update tag
     * This will update a tag
     * @param body Tag to update
     * @param tagId Id of tag to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateTag(body: UpsertTagCommand, tagId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateTag(body: UpsertTagCommand, tagId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateTag(body: UpsertTagCommand, tagId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<TagService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TagService>;
}

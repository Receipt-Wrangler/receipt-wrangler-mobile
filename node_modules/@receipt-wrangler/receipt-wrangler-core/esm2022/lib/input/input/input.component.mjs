import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { BaseInputComponent } from '../../base-input/base-input/base-input.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/button";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/input";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "ngx-mask";
import * as i8 from "@angular/forms";
class InputComponent extends BaseInputComponent {
    constructor() {
        super(...arguments);
        this.inputId = '';
        this.type = 'text';
        this.showVisibilityEye = false;
        this.isCurrency = false;
        this.mask = '';
        this.maskPrefix = '';
        this.thousandSeparator = '';
        this.inputBlur = new EventEmitter(undefined);
    }
    ngOnChanges(changes) {
        if (changes['isCurrency']?.currentValue) {
            this.maskPrefix = '$ ';
            this.mask = 'separator.2';
            this.thousandSeparator = ',';
        }
    }
    toggleVisibility() {
        if (this.type !== 'password') {
            this.type = 'password';
        }
        else {
            this.type = 'text';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: InputComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.11", type: InputComponent, selector: "app-input", inputs: { inputId: "inputId", type: "type", showVisibilityEye: "showVisibilityEye", isCurrency: "isCurrency", mask: "mask", maskPrefix: "maskPrefix", thousandSeparator: "thousandSeparator" }, outputs: { inputBlur: "inputBlur" }, viewQueries: [{ propertyName: "nativeInput", first: true, predicate: ["nativeInput"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<mat-form-field class=\"w-100\">\n  <mat-label>{{ label }}</mat-label>\n  <div class=\"d-flex align-items-center\">\n    <input\n      #nativeInput\n      matInput\n      [id]=\"inputId\"\n      [type]=\"type\"\n      [readonly]=\"readonly\"\n      [formControl]=\"inputFormControl\"\n      [prefix]=\"maskPrefix\"\n      [mask]=\"mask\"\n      [thousandSeparator]=\"thousandSeparator\"\n      (blur)=\"inputBlur.emit($event)\"\n    />\n    <button\n      *ngIf=\"showVisibilityEye\"\n      mat-icon-button\n      type=\"button\"\n      [matTooltip]=\"type === 'password' ? 'Show ' + label : 'Hide ' + label\"\n      (click)=\"toggleVisibility()\"\n    >\n      <mat-icon *ngIf=\"type === 'password'\">visibility</mat-icon>\n      <mat-icon *ngIf=\"type !== 'password'\">visibility_off</mat-icon>\n    </button>\n  </div>\n  <mat-error *ngFor=\"let err of formControlErrors | async\">{{\n    err.message\n  }}</mat-error>\n</mat-form-field>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.MatIconButton, selector: "button[mat-icon-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i3.MatLabel, selector: "mat-label" }, { kind: "directive", type: i3.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i5.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "directive", type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i7.NgxMaskDirective, selector: "input[mask], textarea[mask]", inputs: ["mask", "specialCharacters", "patterns", "prefix", "suffix", "thousandSeparator", "decimalMarker", "dropSpecialCharacters", "hiddenInput", "showMaskTyped", "placeHolderCharacter", "shownMaskExpression", "showTemplate", "clearIfNotMatch", "validation", "separatorLimit", "allowNegativeNumbers", "leadZeroDateTime", "leadZero", "triggerOnMaskChange", "apm", "inputTransformFn", "outputTransformFn", "keepCharacterPositions"], outputs: ["maskFilled"], exportAs: ["mask", "ngxMask"] }, { kind: "directive", type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i8.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }] }); }
}
export { InputComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: InputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-input', template: "<mat-form-field class=\"w-100\">\n  <mat-label>{{ label }}</mat-label>\n  <div class=\"d-flex align-items-center\">\n    <input\n      #nativeInput\n      matInput\n      [id]=\"inputId\"\n      [type]=\"type\"\n      [readonly]=\"readonly\"\n      [formControl]=\"inputFormControl\"\n      [prefix]=\"maskPrefix\"\n      [mask]=\"mask\"\n      [thousandSeparator]=\"thousandSeparator\"\n      (blur)=\"inputBlur.emit($event)\"\n    />\n    <button\n      *ngIf=\"showVisibilityEye\"\n      mat-icon-button\n      type=\"button\"\n      [matTooltip]=\"type === 'password' ? 'Show ' + label : 'Hide ' + label\"\n      (click)=\"toggleVisibility()\"\n    >\n      <mat-icon *ngIf=\"type === 'password'\">visibility</mat-icon>\n      <mat-icon *ngIf=\"type !== 'password'\">visibility_off</mat-icon>\n    </button>\n  </div>\n  <mat-error *ngFor=\"let err of formControlErrors | async\">{{\n    err.message\n  }}</mat-error>\n</mat-form-field>\n" }]
        }], propDecorators: { nativeInput: [{
                type: ViewChild,
                args: ['nativeInput']
            }], inputId: [{
                type: Input
            }], type: [{
                type: Input
            }], showVisibilityEye: [{
                type: Input
            }], isCurrency: [{
                type: Input
            }], mask: [{
                type: Input
            }], maskPrefix: [{
                type: Input
            }], thousandSeparator: [{
                type: Input
            }], inputBlur: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvbGliL2lucHV0L2lucHV0L2lucHV0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9pbnB1dC9pbnB1dC9pbnB1dC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxFQUVOLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQzs7Ozs7Ozs7OztBQUV0RixNQUthLGNBQ1gsU0FBUSxrQkFBa0I7SUFONUI7O1FBV2tCLFlBQU8sR0FBVyxFQUFFLENBQUM7UUFFckIsU0FBSSxHQUFXLE1BQU0sQ0FBQztRQUV0QixzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFFMUIsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUU1QixTQUFJLEdBQVcsRUFBRSxDQUFDO1FBRWxCLGVBQVUsR0FBVyxFQUFFLENBQUM7UUFFeEIsc0JBQWlCLEdBQVcsRUFBRSxDQUFDO1FBRTlCLGNBQVMsR0FBc0IsSUFBSSxZQUFZLENBQzlELFNBQVMsQ0FDVixDQUFDO0tBdUJIO0lBckJRLFdBQVcsQ0FBQyxPQUFzQjtRQUN2QyxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxZQUFZLEVBQUU7WUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxhQUFhLENBQUM7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtZQUM1QixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztTQUN4QjthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7U0FDcEI7SUFDSCxDQUFDOytHQXRDVSxjQUFjO21HQUFkLGNBQWMsOGFDakIzQixnN0JBOEJBOztTRGJhLGNBQWM7NEZBQWQsY0FBYztrQkFMMUIsU0FBUzsrQkFDRSxXQUFXOzhCQVFZLFdBQVc7c0JBQTNDLFNBQVM7dUJBQUMsYUFBYTtnQkFFUixPQUFPO3NCQUF0QixLQUFLO2dCQUVVLElBQUk7c0JBQW5CLEtBQUs7Z0JBRVUsaUJBQWlCO3NCQUFoQyxLQUFLO2dCQUVVLFVBQVU7c0JBQXpCLEtBQUs7Z0JBRVUsSUFBSTtzQkFBbkIsS0FBSztnQkFFVSxVQUFVO3NCQUF6QixLQUFLO2dCQUVVLGlCQUFpQjtzQkFBaEMsS0FBSztnQkFFVyxTQUFTO3NCQUF6QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmFzZUlucHV0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vYmFzZS1pbnB1dC9iYXNlLWlucHV0L2Jhc2UtaW5wdXQuY29tcG9uZW50JztcbmltcG9ydCB7IElucHV0SW50ZXJmYWNlIH0gZnJvbSAnLi4vaW5wdXQuaW50ZXJmYWNlJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1pbnB1dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2lucHV0LmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIElucHV0Q29tcG9uZW50XG4gIGV4dGVuZHMgQmFzZUlucHV0Q29tcG9uZW50XG4gIGltcGxlbWVudHMgSW5wdXRJbnRlcmZhY2UsIE9uQ2hhbmdlc1xue1xuICBAVmlld0NoaWxkKCduYXRpdmVJbnB1dCcpIHB1YmxpYyBuYXRpdmVJbnB1dCE6IHsgbmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQgfTtcblxuICBASW5wdXQoKSBwdWJsaWMgaW5wdXRJZDogc3RyaW5nID0gJyc7XG5cbiAgQElucHV0KCkgcHVibGljIHR5cGU6IHN0cmluZyA9ICd0ZXh0JztcblxuICBASW5wdXQoKSBwdWJsaWMgc2hvd1Zpc2liaWxpdHlFeWUgPSBmYWxzZTtcblxuICBASW5wdXQoKSBwdWJsaWMgaXNDdXJyZW5jeTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBtYXNrOiBzdHJpbmcgPSAnJztcblxuICBASW5wdXQoKSBwdWJsaWMgbWFza1ByZWZpeDogc3RyaW5nID0gJyc7XG5cbiAgQElucHV0KCkgcHVibGljIHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcgPSAnJztcblxuICBAT3V0cHV0KCkgcHVibGljIGlucHV0Qmx1cjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oXG4gICAgdW5kZWZpbmVkXG4gICk7XG5cbiAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlc1snaXNDdXJyZW5jeSddPy5jdXJyZW50VmFsdWUpIHtcbiAgICAgIHRoaXMubWFza1ByZWZpeCA9ICckICc7XG4gICAgICB0aGlzLm1hc2sgPSAnc2VwYXJhdG9yLjInO1xuICAgICAgdGhpcy50aG91c2FuZFNlcGFyYXRvciA9ICcsJztcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlVmlzaWJpbGl0eSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAncGFzc3dvcmQnKSB7XG4gICAgICB0aGlzLnR5cGUgPSAncGFzc3dvcmQnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnR5cGUgPSAndGV4dCc7XG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETzogRmlndXJlIHRoaXMgb3V0IGFzIGFwYXJ0IG9mIHZhbGlkYXRpb24gaXNzdWVzXG4gIC8vIHByaXZhdGUgZ2V0TWluVmFsdWUoKTogc3RyaW5nIHtcbiAgLy8gICBjb25zdCBlcnIgPSB0aGlzLmlucHV0Rm9ybUNvbnRyb2wuZXJyb3JzIGFzIGFueTtcbiAgLy8gICByZXR1cm4gZXJyWydtaW4nXVsnbWluJ10gPz8gJzAnO1xuICAvLyB9XG59XG4iLCI8bWF0LWZvcm0tZmllbGQgY2xhc3M9XCJ3LTEwMFwiPlxuICA8bWF0LWxhYmVsPnt7IGxhYmVsIH19PC9tYXQtbGFiZWw+XG4gIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgPGlucHV0XG4gICAgICAjbmF0aXZlSW5wdXRcbiAgICAgIG1hdElucHV0XG4gICAgICBbaWRdPVwiaW5wdXRJZFwiXG4gICAgICBbdHlwZV09XCJ0eXBlXCJcbiAgICAgIFtyZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICBbZm9ybUNvbnRyb2xdPVwiaW5wdXRGb3JtQ29udHJvbFwiXG4gICAgICBbcHJlZml4XT1cIm1hc2tQcmVmaXhcIlxuICAgICAgW21hc2tdPVwibWFza1wiXG4gICAgICBbdGhvdXNhbmRTZXBhcmF0b3JdPVwidGhvdXNhbmRTZXBhcmF0b3JcIlxuICAgICAgKGJsdXIpPVwiaW5wdXRCbHVyLmVtaXQoJGV2ZW50KVwiXG4gICAgLz5cbiAgICA8YnV0dG9uXG4gICAgICAqbmdJZj1cInNob3dWaXNpYmlsaXR5RXllXCJcbiAgICAgIG1hdC1pY29uLWJ1dHRvblxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBbbWF0VG9vbHRpcF09XCJ0eXBlID09PSAncGFzc3dvcmQnID8gJ1Nob3cgJyArIGxhYmVsIDogJ0hpZGUgJyArIGxhYmVsXCJcbiAgICAgIChjbGljayk9XCJ0b2dnbGVWaXNpYmlsaXR5KClcIlxuICAgID5cbiAgICAgIDxtYXQtaWNvbiAqbmdJZj1cInR5cGUgPT09ICdwYXNzd29yZCdcIj52aXNpYmlsaXR5PC9tYXQtaWNvbj5cbiAgICAgIDxtYXQtaWNvbiAqbmdJZj1cInR5cGUgIT09ICdwYXNzd29yZCdcIj52aXNpYmlsaXR5X29mZjwvbWF0LWljb24+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuICA8bWF0LWVycm9yICpuZ0Zvcj1cImxldCBlcnIgb2YgZm9ybUNvbnRyb2xFcnJvcnMgfCBhc3luY1wiPnt7XG4gICAgZXJyLm1lc3NhZ2VcbiAgfX08L21hdC1lcnJvcj5cbjwvbWF0LWZvcm0tZmllbGQ+XG4iXX0=
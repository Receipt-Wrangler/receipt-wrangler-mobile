var UserState_1;
import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Action, createSelector, Selector, State, } from '@ngxs/store';
import { AddUser, RemoveUser, SetUsers, UpdateUser, } from './user.state.actions';
import * as i0 from "@angular/core";
let UserState = UserState_1 = class UserState {
    static users(state) {
        return state.users;
    }
    static getUserById(userId) {
        return createSelector([UserState_1], (state) => {
            return state.users.find((u) => u.id.toString() === userId.toString());
        });
    }
    static findUserById(userId) {
        return createSelector([UserState_1], (state) => {
            return state.users.find((u) => u.id.toString() === userId.toString());
        });
    }
    static findUserIndexById(userId, users) {
        return users.findIndex((u) => u.id.toString() === userId);
    }
    setUsers({ getState, patchState }, payload) {
        patchState({
            users: payload.users,
        });
    }
    updateUser({ getState, patchState }, payload) {
        const users = Array.from(getState().users);
        const index = UserState_1.findUserIndexById(payload.userId, users);
        if (index >= 0) {
            users.splice(index, 1, payload.user);
            patchState({
                users: users,
            });
        }
    }
    addUser({ getState, patchState }, payload) {
        const users = Array.from(getState().users);
        users.push(payload.user);
        patchState({
            users: users,
        });
    }
    removeUser({ getState, patchState }, payload) {
        const users = Array.from(getState().users);
        patchState({
            users: users.filter((u) => u.id.toString() !== payload.userId.toString()),
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: UserState, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: UserState }); }
};
__decorate([
    Action(SetUsers),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, SetUsers]),
    __metadata("design:returntype", void 0)
], UserState.prototype, "setUsers", null);
__decorate([
    Action(UpdateUser),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, UpdateUser]),
    __metadata("design:returntype", void 0)
], UserState.prototype, "updateUser", null);
__decorate([
    Action(AddUser),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, AddUser]),
    __metadata("design:returntype", void 0)
], UserState.prototype, "addUser", null);
__decorate([
    Action(RemoveUser),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, RemoveUser]),
    __metadata("design:returntype", void 0)
], UserState.prototype, "removeUser", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Array)
], UserState, "users", null);
UserState = UserState_1 = __decorate([
    State({
        name: 'users',
        defaults: {
            users: [],
        },
    })
], UserState);
export { UserState };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: UserState, decorators: [{
            type: Injectable
        }], propDecorators: { setUsers: [], updateUser: [], addUser: [], removeUser: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9zdG9yZS91c2VyLnN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsTUFBTSxFQUNOLGNBQWMsRUFDZCxRQUFRLEVBQ1IsS0FBSyxHQUVOLE1BQU0sYUFBYSxDQUFDO0FBRXJCLE9BQU8sRUFDTCxPQUFPLEVBQ1AsVUFBVSxFQUNWLFFBQVEsRUFDUixVQUFVLEdBQ1gsTUFBTSxzQkFBc0IsQ0FBQzs7QUFZOUIsSUFDYSxTQUFTLGlCQUR0QixNQUNhLFNBQVM7SUFFYixBQUFQLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBeUI7UUFDcEMsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQWM7UUFDL0IsT0FBTyxjQUFjLENBQUMsQ0FBQyxXQUFTLENBQUMsRUFBRSxDQUFDLEtBQXlCLEVBQUUsRUFBRTtZQUMvRCxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBYztRQUNoQyxPQUFPLGNBQWMsQ0FBQyxDQUFDLFdBQVMsQ0FBQyxFQUFFLENBQUMsS0FBeUIsRUFBRSxFQUFFO1lBQy9ELE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE1BQWMsRUFBRSxLQUFhO1FBQ3BELE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxNQUFNLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBR0QsUUFBUSxDQUNOLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBb0MsRUFDMUQsT0FBaUI7UUFFakIsVUFBVSxDQUFDO1lBQ1QsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxVQUFVLENBQ1IsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFvQyxFQUMxRCxPQUFtQjtRQUVuQixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLE1BQU0sS0FBSyxHQUFHLFdBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pFLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNkLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsVUFBVSxDQUFDO2dCQUNULEtBQUssRUFBRSxLQUFLO2FBQ2IsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBR0QsT0FBTyxDQUNMLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBb0MsRUFDMUQsT0FBZ0I7UUFFaEIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixVQUFVLENBQUM7WUFDVCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxVQUFVLENBQ1IsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFvQyxFQUMxRCxPQUFtQjtRQUVuQixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLFVBQVUsQ0FBQztZQUNULEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0FwRVUsU0FBUzttSEFBVCxTQUFTOztBQXVCcEI7SUFEQyxNQUFNLENBQUMsUUFBUSxDQUFDOzs2Q0FHTixRQUFROzt5Q0FLbEI7QUFHRDtJQURDLE1BQU0sQ0FBQyxVQUFVLENBQUM7OzZDQUdSLFVBQVU7OzJDQVVwQjtBQUdEO0lBREMsTUFBTSxDQUFDLE9BQU8sQ0FBQzs7NkNBR0wsT0FBTzs7d0NBT2pCO0FBR0Q7SUFEQyxNQUFNLENBQUMsVUFBVSxDQUFDOzs2Q0FHUixVQUFVOzsyQ0FNcEI7QUFsRU07SUFETixRQUFRLEVBQUU7Ozs7NEJBR1Y7QUFKVSxTQUFTO0lBUHJCLEtBQUssQ0FBcUI7UUFDekIsSUFBSSxFQUFFLE9BQU87UUFDYixRQUFRLEVBQUU7WUFDUixLQUFLLEVBQUUsRUFBRTtTQUNWO0tBQ0YsQ0FBQztHQUVXLFNBQVMsQ0FxRXJCO1NBckVZLFNBQVM7NEZBQVQsU0FBUztrQkFEckIsVUFBVTs4QkF3QlQsUUFBUSxNQVVSLFVBQVUsTUFlVixPQUFPLE1BWVAsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFjdGlvbixcbiAgY3JlYXRlU2VsZWN0b3IsXG4gIFNlbGVjdG9yLFxuICBTdGF0ZSxcbiAgU3RhdGVDb250ZXh0LFxufSBmcm9tICdAbmd4cy9zdG9yZSc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vYXBpL21vZGVsL3VzZXInO1xuaW1wb3J0IHtcbiAgQWRkVXNlcixcbiAgUmVtb3ZlVXNlcixcbiAgU2V0VXNlcnMsXG4gIFVwZGF0ZVVzZXIsXG59IGZyb20gJy4vdXNlci5zdGF0ZS5hY3Rpb25zJztcblxuZXhwb3J0IGludGVyZmFjZSBVc2VyU3RhdGVJbnRlcmZhY2Uge1xuICB1c2VyczogVXNlcltdO1xufVxuXG5AU3RhdGU8VXNlclN0YXRlSW50ZXJmYWNlPih7XG4gIG5hbWU6ICd1c2VycycsXG4gIGRlZmF1bHRzOiB7XG4gICAgdXNlcnM6IFtdLFxuICB9LFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2VyU3RhdGUge1xuICBAU2VsZWN0b3IoKVxuICBzdGF0aWMgdXNlcnMoc3RhdGU6IFVzZXJTdGF0ZUludGVyZmFjZSk6IFVzZXJbXSB7XG4gICAgcmV0dXJuIHN0YXRlLnVzZXJzO1xuICB9XG5cbiAgc3RhdGljIGdldFVzZXJCeUlkKHVzZXJJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFtVc2VyU3RhdGVdLCAoc3RhdGU6IFVzZXJTdGF0ZUludGVyZmFjZSkgPT4ge1xuICAgICAgcmV0dXJuIHN0YXRlLnVzZXJzLmZpbmQoKHUpID0+IHUuaWQudG9TdHJpbmcoKSA9PT0gdXNlcklkLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGZpbmRVc2VyQnlJZCh1c2VySWQ6IHN0cmluZykge1xuICAgIHJldHVybiBjcmVhdGVTZWxlY3RvcihbVXNlclN0YXRlXSwgKHN0YXRlOiBVc2VyU3RhdGVJbnRlcmZhY2UpID0+IHtcbiAgICAgIHJldHVybiBzdGF0ZS51c2Vycy5maW5kKCh1KSA9PiB1LmlkLnRvU3RyaW5nKCkgPT09IHVzZXJJZC50b1N0cmluZygpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBmaW5kVXNlckluZGV4QnlJZCh1c2VySWQ6IHN0cmluZywgdXNlcnM6IFVzZXJbXSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHVzZXJzLmZpbmRJbmRleCgodSkgPT4gdS5pZC50b1N0cmluZygpID09PSB1c2VySWQpO1xuICB9XG5cbiAgQEFjdGlvbihTZXRVc2VycylcbiAgc2V0VXNlcnMoXG4gICAgeyBnZXRTdGF0ZSwgcGF0Y2hTdGF0ZSB9OiBTdGF0ZUNvbnRleHQ8VXNlclN0YXRlSW50ZXJmYWNlPixcbiAgICBwYXlsb2FkOiBTZXRVc2Vyc1xuICApIHtcbiAgICBwYXRjaFN0YXRlKHtcbiAgICAgIHVzZXJzOiBwYXlsb2FkLnVzZXJzLFxuICAgIH0pO1xuICB9XG5cbiAgQEFjdGlvbihVcGRhdGVVc2VyKVxuICB1cGRhdGVVc2VyKFxuICAgIHsgZ2V0U3RhdGUsIHBhdGNoU3RhdGUgfTogU3RhdGVDb250ZXh0PFVzZXJTdGF0ZUludGVyZmFjZT4sXG4gICAgcGF5bG9hZDogVXBkYXRlVXNlclxuICApIHtcbiAgICBjb25zdCB1c2VycyA9IEFycmF5LmZyb20oZ2V0U3RhdGUoKS51c2Vycyk7XG4gICAgY29uc3QgaW5kZXggPSBVc2VyU3RhdGUuZmluZFVzZXJJbmRleEJ5SWQocGF5bG9hZC51c2VySWQsIHVzZXJzKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdXNlcnMuc3BsaWNlKGluZGV4LCAxLCBwYXlsb2FkLnVzZXIpO1xuICAgICAgcGF0Y2hTdGF0ZSh7XG4gICAgICAgIHVzZXJzOiB1c2VycyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIEBBY3Rpb24oQWRkVXNlcilcbiAgYWRkVXNlcihcbiAgICB7IGdldFN0YXRlLCBwYXRjaFN0YXRlIH06IFN0YXRlQ29udGV4dDxVc2VyU3RhdGVJbnRlcmZhY2U+LFxuICAgIHBheWxvYWQ6IEFkZFVzZXJcbiAgKSB7XG4gICAgY29uc3QgdXNlcnMgPSBBcnJheS5mcm9tKGdldFN0YXRlKCkudXNlcnMpO1xuICAgIHVzZXJzLnB1c2gocGF5bG9hZC51c2VyKTtcbiAgICBwYXRjaFN0YXRlKHtcbiAgICAgIHVzZXJzOiB1c2VycyxcbiAgICB9KTtcbiAgfVxuXG4gIEBBY3Rpb24oUmVtb3ZlVXNlcilcbiAgcmVtb3ZlVXNlcihcbiAgICB7IGdldFN0YXRlLCBwYXRjaFN0YXRlIH06IFN0YXRlQ29udGV4dDxVc2VyU3RhdGVJbnRlcmZhY2U+LFxuICAgIHBheWxvYWQ6IFJlbW92ZVVzZXJcbiAgKSB7XG4gICAgY29uc3QgdXNlcnMgPSBBcnJheS5mcm9tKGdldFN0YXRlKCkudXNlcnMpO1xuICAgIHBhdGNoU3RhdGUoe1xuICAgICAgdXNlcnM6IHVzZXJzLmZpbHRlcigodSkgPT4gdS5pZC50b1N0cmluZygpICE9PSBwYXlsb2FkLnVzZXJJZC50b1N0cmluZygpKSxcbiAgICB9KTtcbiAgfVxufVxuIl19
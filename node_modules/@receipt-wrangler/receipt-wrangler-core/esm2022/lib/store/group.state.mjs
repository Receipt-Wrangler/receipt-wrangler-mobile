var GroupState_1;
import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Action, createSelector, Selector, State, } from '@ngxs/store';
import { AddGroup, RemoveGroup, SetGroups, SetSelectedDashboardId, SetSelectedGroupId, UpdateGroup, } from './group.state.actions';
import * as i0 from "@angular/core";
let GroupState = GroupState_1 = class GroupState {
    static groups(state) {
        return state.groups;
    }
    static allGroupMembers(state) {
        return state.groups.map((g) => g.groupMembers).flat();
    }
    static groupsWithoutAll(state) {
        return state.groups.filter((g) => !g.isAllGroup);
    }
    static groupsWithoutSelectedGroup(state) {
        return state.groups.filter((g) => g.id.toString() !== state.selectedGroupId);
    }
    static selectedDashboardId(state) {
        return state.selectedDashboardId;
    }
    static selectedGroupId(state) {
        return state.selectedGroupId;
    }
    static receiptListLink(state) {
        return `/receipts/group/${state.selectedGroupId}`;
    }
    // TODO: needs to be fixed
    static dashboardLink(state) {
        return `/dashboard/group/${state.selectedGroupId}`;
    }
    static settingsLinkBase(state) {
        return `/groups/${state.selectedGroupId}/settings`;
    }
    static getGroupById(groupId) {
        return createSelector([GroupState_1], (state) => {
            return state.groups.find((g) => g.id.toString() === groupId.toString());
        });
    }
    addGroup({ getState, patchState }, payload) {
        const groups = Array.from(getState().groups);
        groups.push(payload.group);
        patchState({
            groups: groups,
        });
    }
    removeGroup({ getState, patchState }, payload) {
        const state = getState();
        const group = GroupState_1.getGroupById(payload.groupId)(state);
        if (group) {
            const index = state.groups.findIndex((g) => g === group);
            if (index >= 0) {
                const newInterface = {};
                const newGroups = Array.from(state.groups).filter((g) => g.id !== group.id);
                newInterface.groups = newGroups;
                if (group.id.toString() === state.selectedGroupId.toString()) {
                    newInterface.selectedGroupId = state.groups[0].id.toString();
                }
                patchState(newInterface);
            }
        }
    }
    setGroups({ patchState }, payload) {
        patchState({
            groups: payload.groups,
        });
    }
    updateGroup({ getState, patchState }, payload) {
        const groupIndex = getState().groups.findIndex((g) => g.id?.toString() === payload?.group?.id?.toString());
        if (groupIndex > -1) {
            const newGroups = Array.from(getState().groups);
            newGroups[groupIndex] = payload.group;
            patchState({
                groups: newGroups,
            });
        }
    }
    setSelectedDashboardId({ getState, patchState }, payload) {
        patchState({
            selectedDashboardId: payload.dashboardId,
        });
    }
    setSelectedGroupId({ getState, patchState }, payload) {
        let groupId = '';
        let dashboardId = '';
        if (payload?.groupId) {
            groupId = payload.groupId;
        }
        else {
            const groups = getState().groups;
            groupId = groups[0].id.toString();
        }
        if (payload.groupId === getState().selectedGroupId) {
            dashboardId = getState().selectedDashboardId;
        }
        patchState({
            selectedGroupId: groupId,
            selectedDashboardId: dashboardId,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: GroupState, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: GroupState }); }
};
__decorate([
    Action(AddGroup),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, AddGroup]),
    __metadata("design:returntype", void 0)
], GroupState.prototype, "addGroup", null);
__decorate([
    Action(RemoveGroup),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, RemoveGroup]),
    __metadata("design:returntype", void 0)
], GroupState.prototype, "removeGroup", null);
__decorate([
    Action(SetGroups),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, SetGroups]),
    __metadata("design:returntype", void 0)
], GroupState.prototype, "setGroups", null);
__decorate([
    Action(UpdateGroup),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, UpdateGroup]),
    __metadata("design:returntype", void 0)
], GroupState.prototype, "updateGroup", null);
__decorate([
    Action(SetSelectedDashboardId),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, SetSelectedDashboardId]),
    __metadata("design:returntype", void 0)
], GroupState.prototype, "setSelectedDashboardId", null);
__decorate([
    Action(SetSelectedGroupId),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, SetSelectedGroupId]),
    __metadata("design:returntype", void 0)
], GroupState.prototype, "setSelectedGroupId", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Array)
], GroupState, "groups", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Array)
], GroupState, "allGroupMembers", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Array)
], GroupState, "groupsWithoutAll", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Array)
], GroupState, "groupsWithoutSelectedGroup", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", String)
], GroupState, "selectedDashboardId", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", String)
], GroupState, "selectedGroupId", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", String)
], GroupState, "receiptListLink", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", String)
], GroupState, "dashboardLink", null);
__decorate([
    Selector(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", String)
], GroupState, "settingsLinkBase", null);
GroupState = GroupState_1 = __decorate([
    State({
        name: 'groups',
        defaults: {
            groups: [],
            selectedGroupId: '',
            selectedDashboardId: '',
        },
    })
], GroupState);
export { GroupState };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: GroupState, decorators: [{
            type: Injectable
        }], propDecorators: { addGroup: [], removeGroup: [], setGroups: [], updateGroup: [], setSelectedDashboardId: [], setSelectedGroupId: [] } });
//# sourceMappingURL=data:application/json;base64,
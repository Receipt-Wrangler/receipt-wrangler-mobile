import { Component, EventEmitter, Input, Output, ViewEncapsulation, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/badge";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/tooltip";
import * as i6 from "@angular/router";
class ButtonComponent {
    constructor() {
        this.buttonClass = '';
        this.color = 'primary';
        this.buttonText = '';
        this.type = 'button';
        this.matButtonType = 'matRaisedButton';
        this.icon = '';
        this.customIcon = '';
        this.disabled = false;
        this.buttonRouterLink = [];
        this.tooltip = '';
        this.matBadgeColor = 'primary';
        this.clicked = new EventEmitter();
    }
    emitClicked(event) {
        this.clicked.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: ButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.11", type: ButtonComponent, selector: "app-button", inputs: { buttonClass: "buttonClass", color: "color", buttonText: "buttonText", type: "type", matButtonType: "matButtonType", icon: "icon", customIcon: "customIcon", disabled: "disabled", buttonRouterLink: "buttonRouterLink", tooltip: "tooltip", matBadgeContent: "matBadgeContent", matBadgeColor: "matBadgeColor" }, outputs: { clicked: "clicked" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"matButtonType\">\n  <button\n    mat-button\n    *ngSwitchCase=\"'basic'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [matTooltip]=\"tooltip\"\n    [routerLink]=\"buttonRouterLink\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    (click)=\"emitClicked($event)\"\n  >\n    <div class=\"d-flex align-items-center\">\n      <mat-icon *ngIf=\"icon\" class=\"me-1\">\n        {{ icon }}\n      </mat-icon>\n      <span>\n        {{ buttonText }}\n      </span>\n    </div>\n  </button>\n\n  <button\n    mat-raised-button\n    *ngSwitchCase=\"'matRaisedButton'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [matTooltip]=\"tooltip\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    [routerLink]=\"buttonRouterLink\"\n    (click)=\"emitClicked($event)\"\n  >\n    <div class=\"d-flex align-items-center\">\n      <mat-icon *ngIf=\"icon\" class=\"me-1\">\n        {{ icon }}\n      </mat-icon>\n      <span>\n        {{ buttonText }}\n      </span>\n    </div>\n  </button>\n\n  <button\n    mat-icon-button\n    *ngSwitchCase=\"'iconButton'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [routerLink]=\"buttonRouterLink\"\n    [matTooltip]=\"tooltip\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    (click)=\"emitClicked($event)\"\n  >\n    <mat-icon *ngIf=\"customIcon\" [svgIcon]=\"customIcon\"></mat-icon>\n    <mat-icon *ngIf=\"icon\">\n      {{ icon }}\n    </mat-icon>\n  </button>\n</ng-container>\n", styles: ["app-button{width:-moz-fit-content;width:fit-content}app-button .mat-badge-content{color:#fff}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.MatBadge, selector: "[matBadge]", inputs: ["matBadgeDisabled", "matBadgeColor", "matBadgeOverlap", "matBadgePosition", "matBadge", "matBadgeDescription", "matBadgeSize", "matBadgeHidden"] }, { kind: "component", type: i3.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i3.MatIconButton, selector: "button[mat-icon-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i5.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i6.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
export { ButtonComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: ButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-button', encapsulation: ViewEncapsulation.None, template: "<ng-container [ngSwitch]=\"matButtonType\">\n  <button\n    mat-button\n    *ngSwitchCase=\"'basic'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [matTooltip]=\"tooltip\"\n    [routerLink]=\"buttonRouterLink\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    (click)=\"emitClicked($event)\"\n  >\n    <div class=\"d-flex align-items-center\">\n      <mat-icon *ngIf=\"icon\" class=\"me-1\">\n        {{ icon }}\n      </mat-icon>\n      <span>\n        {{ buttonText }}\n      </span>\n    </div>\n  </button>\n\n  <button\n    mat-raised-button\n    *ngSwitchCase=\"'matRaisedButton'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [matTooltip]=\"tooltip\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    [routerLink]=\"buttonRouterLink\"\n    (click)=\"emitClicked($event)\"\n  >\n    <div class=\"d-flex align-items-center\">\n      <mat-icon *ngIf=\"icon\" class=\"me-1\">\n        {{ icon }}\n      </mat-icon>\n      <span>\n        {{ buttonText }}\n      </span>\n    </div>\n  </button>\n\n  <button\n    mat-icon-button\n    *ngSwitchCase=\"'iconButton'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [routerLink]=\"buttonRouterLink\"\n    [matTooltip]=\"tooltip\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    (click)=\"emitClicked($event)\"\n  >\n    <mat-icon *ngIf=\"customIcon\" [svgIcon]=\"customIcon\"></mat-icon>\n    <mat-icon *ngIf=\"icon\">\n      {{ icon }}\n    </mat-icon>\n  </button>\n</ng-container>\n", styles: ["app-button{width:-moz-fit-content;width:fit-content}app-button .mat-badge-content{color:#fff}\n"] }]
        }], propDecorators: { buttonClass: [{
                type: Input
            }], color: [{
                type: Input
            }], buttonText: [{
                type: Input
            }], type: [{
                type: Input
            }], matButtonType: [{
                type: Input
            }], icon: [{
                type: Input
            }], customIcon: [{
                type: Input
            }], disabled: [{
                type: Input
            }], buttonRouterLink: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], matBadgeContent: [{
                type: Input
            }], matBadgeColor: [{
                type: Input
            }], clicked: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9idXR0b24vYnV0dG9uL2J1dHRvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvYnV0dG9uL2J1dHRvbi9idXR0b24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBR3ZCLE1BTWEsZUFBZTtJQU41QjtRQU9rQixnQkFBVyxHQUFXLEVBQUUsQ0FBQztRQUV6QixVQUFLLEdBQVcsU0FBUyxDQUFDO1FBRTFCLGVBQVUsR0FBVyxFQUFFLENBQUM7UUFFeEIsU0FBSSxHQUEyQyxRQUFRLENBQUM7UUFFeEQsa0JBQWEsR0FDM0IsaUJBQWlCLENBQUM7UUFFSixTQUFJLEdBQVcsRUFBRSxDQUFDO1FBRWxCLGVBQVUsR0FBVyxFQUFFLENBQUM7UUFFeEIsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUUxQixxQkFBZ0IsR0FBYSxFQUFFLENBQUM7UUFFaEMsWUFBTyxHQUFXLEVBQUUsQ0FBQztRQUlyQixrQkFBYSxHQUFpQixTQUFTLENBQUM7UUFFdkMsWUFBTyxHQUN0QixJQUFJLFlBQVksRUFBYyxDQUFDO0tBS2xDO0lBSFEsV0FBVyxDQUFDLEtBQWlCO1FBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7K0dBL0JVLGVBQWU7bUdBQWYsZUFBZSwrWUNmNUIsaXJEQWtFQTs7U0RuRGEsZUFBZTs0RkFBZixlQUFlO2tCQU4zQixTQUFTOytCQUNFLFlBQVksaUJBR1AsaUJBQWlCLENBQUMsSUFBSTs4QkFHckIsV0FBVztzQkFBMUIsS0FBSztnQkFFVSxLQUFLO3NCQUFwQixLQUFLO2dCQUVVLFVBQVU7c0JBQXpCLEtBQUs7Z0JBRVUsSUFBSTtzQkFBbkIsS0FBSztnQkFFVSxhQUFhO3NCQUE1QixLQUFLO2dCQUdVLElBQUk7c0JBQW5CLEtBQUs7Z0JBRVUsVUFBVTtzQkFBekIsS0FBSztnQkFFVSxRQUFRO3NCQUF2QixLQUFLO2dCQUVVLGdCQUFnQjtzQkFBL0IsS0FBSztnQkFFVSxPQUFPO3NCQUF0QixLQUFLO2dCQUVVLGVBQWU7c0JBQTlCLEtBQUs7Z0JBRVUsYUFBYTtzQkFBNUIsS0FBSztnQkFFVyxPQUFPO3NCQUF2QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtYnV0dG9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2J1dHRvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2J1dHRvbi5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBCdXR0b25Db21wb25lbnQge1xuICBASW5wdXQoKSBwdWJsaWMgYnV0dG9uQ2xhc3M6IHN0cmluZyA9ICcnO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBjb2xvcjogc3RyaW5nID0gJ3ByaW1hcnknO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBidXR0b25UZXh0OiBzdHJpbmcgPSAnJztcblxuICBASW5wdXQoKSBwdWJsaWMgdHlwZTogJ2J1dHRvbicgfCAnbWVudScgfCAnc3VibWl0JyB8ICdyZXNldCcgPSAnYnV0dG9uJztcblxuICBASW5wdXQoKSBwdWJsaWMgbWF0QnV0dG9uVHlwZTogJ21hdFJhaXNlZEJ1dHRvbicgfCAnaWNvbkJ1dHRvbicgfCAnYmFzaWMnID1cbiAgICAnbWF0UmFpc2VkQnV0dG9uJztcblxuICBASW5wdXQoKSBwdWJsaWMgaWNvbjogc3RyaW5nID0gJyc7XG5cbiAgQElucHV0KCkgcHVibGljIGN1c3RvbUljb246IHN0cmluZyA9ICcnO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBidXR0b25Sb3V0ZXJMaW5rOiBzdHJpbmdbXSA9IFtdO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyB0b29sdGlwOiBzdHJpbmcgPSAnJztcblxuICBASW5wdXQoKSBwdWJsaWMgbWF0QmFkZ2VDb250ZW50PzogYW55O1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBtYXRCYWRnZUNvbG9yOiBUaGVtZVBhbGV0dGUgPSAncHJpbWFyeSc7XG5cbiAgQE91dHB1dCgpIHB1YmxpYyBjbGlja2VkOiBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4gPVxuICAgIG5ldyBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4oKTtcblxuICBwdWJsaWMgZW1pdENsaWNrZWQoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmNsaWNrZWQuZW1pdChldmVudCk7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgW25nU3dpdGNoXT1cIm1hdEJ1dHRvblR5cGVcIj5cbiAgPGJ1dHRvblxuICAgIG1hdC1idXR0b25cbiAgICAqbmdTd2l0Y2hDYXNlPVwiJ2Jhc2ljJ1wiXG4gICAgW2NsYXNzXT1cImJ1dHRvbkNsYXNzXCJcbiAgICBbdHlwZV09XCJ0eXBlXCJcbiAgICBbY29sb3JdPVwiY29sb3JcIlxuICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gICAgW21hdFRvb2x0aXBdPVwidG9vbHRpcFwiXG4gICAgW3JvdXRlckxpbmtdPVwiYnV0dG9uUm91dGVyTGlua1wiXG4gICAgW21hdEJhZGdlQ29sb3JdPVwibWF0QmFkZ2VDb2xvclwiXG4gICAgW21hdEJhZGdlXT1cIm1hdEJhZGdlQ29udGVudFwiXG4gICAgKGNsaWNrKT1cImVtaXRDbGlja2VkKCRldmVudClcIlxuICA+XG4gICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgIDxtYXQtaWNvbiAqbmdJZj1cImljb25cIiBjbGFzcz1cIm1lLTFcIj5cbiAgICAgICAge3sgaWNvbiB9fVxuICAgICAgPC9tYXQtaWNvbj5cbiAgICAgIDxzcGFuPlxuICAgICAgICB7eyBidXR0b25UZXh0IH19XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gIDwvYnV0dG9uPlxuXG4gIDxidXR0b25cbiAgICBtYXQtcmFpc2VkLWJ1dHRvblxuICAgICpuZ1N3aXRjaENhc2U9XCInbWF0UmFpc2VkQnV0dG9uJ1wiXG4gICAgW2NsYXNzXT1cImJ1dHRvbkNsYXNzXCJcbiAgICBbdHlwZV09XCJ0eXBlXCJcbiAgICBbY29sb3JdPVwiY29sb3JcIlxuICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gICAgW21hdFRvb2x0aXBdPVwidG9vbHRpcFwiXG4gICAgW21hdEJhZGdlQ29sb3JdPVwibWF0QmFkZ2VDb2xvclwiXG4gICAgW21hdEJhZGdlXT1cIm1hdEJhZGdlQ29udGVudFwiXG4gICAgW3JvdXRlckxpbmtdPVwiYnV0dG9uUm91dGVyTGlua1wiXG4gICAgKGNsaWNrKT1cImVtaXRDbGlja2VkKCRldmVudClcIlxuICA+XG4gICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgIDxtYXQtaWNvbiAqbmdJZj1cImljb25cIiBjbGFzcz1cIm1lLTFcIj5cbiAgICAgICAge3sgaWNvbiB9fVxuICAgICAgPC9tYXQtaWNvbj5cbiAgICAgIDxzcGFuPlxuICAgICAgICB7eyBidXR0b25UZXh0IH19XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gIDwvYnV0dG9uPlxuXG4gIDxidXR0b25cbiAgICBtYXQtaWNvbi1idXR0b25cbiAgICAqbmdTd2l0Y2hDYXNlPVwiJ2ljb25CdXR0b24nXCJcbiAgICBbY2xhc3NdPVwiYnV0dG9uQ2xhc3NcIlxuICAgIFt0eXBlXT1cInR5cGVcIlxuICAgIFtjb2xvcl09XCJjb2xvclwiXG4gICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgICBbcm91dGVyTGlua109XCJidXR0b25Sb3V0ZXJMaW5rXCJcbiAgICBbbWF0VG9vbHRpcF09XCJ0b29sdGlwXCJcbiAgICBbbWF0QmFkZ2VDb2xvcl09XCJtYXRCYWRnZUNvbG9yXCJcbiAgICBbbWF0QmFkZ2VdPVwibWF0QmFkZ2VDb250ZW50XCJcbiAgICAoY2xpY2spPVwiZW1pdENsaWNrZWQoJGV2ZW50KVwiXG4gID5cbiAgICA8bWF0LWljb24gKm5nSWY9XCJjdXN0b21JY29uXCIgW3N2Z0ljb25dPVwiY3VzdG9tSWNvblwiPjwvbWF0LWljb24+XG4gICAgPG1hdC1pY29uICpuZ0lmPVwiaWNvblwiPlxuICAgICAge3sgaWNvbiB9fVxuICAgIDwvbWF0LWljb24+XG4gIDwvYnV0dG9uPlxuPC9uZy1jb250YWluZXI+XG4iXX0=
import { Injectable } from '@angular/core';
import { MatSnackBar, } from '@angular/material/snack-bar';
import { DEFAULT_SNACKBAR_ACTION, DEFAULT_SNACKBAR_CONFIG, } from '../constants/snackbar.constant';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/snack-bar";
class SnackbarService {
    constructor(snackbar) {
        this.snackbar = snackbar;
    }
    error(message) {
        this.snackbar.open(message, DEFAULT_SNACKBAR_ACTION, {
            ...DEFAULT_SNACKBAR_CONFIG,
            panelClass: ['error-snackbar'],
        });
    }
    success(message, configOverrides) {
        this.snackbar.open(message, DEFAULT_SNACKBAR_ACTION, {
            ...DEFAULT_SNACKBAR_CONFIG,
            ...configOverrides,
            panelClass: ['success-snackbar'],
        });
    }
    successFromTemplate(template, configOverrides) {
        return this.snackbar.openFromTemplate(template, {
            ...DEFAULT_SNACKBAR_CONFIG,
            ...configOverrides,
            panelClass: ['success-snackbar'],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: SnackbarService, deps: [{ token: i1.MatSnackBar }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: SnackbarService, providedIn: 'root' }); }
}
export { SnackbarService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: SnackbarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.MatSnackBar }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hY2tiYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy9zbmFja2Jhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBbUIsVUFBVSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFDTCxXQUFXLEdBR1osTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLHVCQUF1QixHQUN4QixNQUFNLGdDQUFnQyxDQUFDOzs7QUFHeEMsTUFHYSxlQUFlO0lBQzFCLFlBQW9CLFFBQXFCO1FBQXJCLGFBQVEsR0FBUixRQUFRLENBQWE7SUFBRyxDQUFDO0lBRXRDLEtBQUssQ0FBQyxPQUFlO1FBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRTtZQUNuRCxHQUFHLHVCQUF1QjtZQUMxQixVQUFVLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztTQUMvQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sT0FBTyxDQUNaLE9BQWUsRUFDZixlQUF3QztRQUV4QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUU7WUFDbkQsR0FBRyx1QkFBdUI7WUFDMUIsR0FBRyxlQUFlO1lBQ2xCLFVBQVUsRUFBRSxDQUFDLGtCQUFrQixDQUFDO1NBQ2pDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxtQkFBbUIsQ0FDeEIsUUFBMEIsRUFDMUIsZUFBd0M7UUFFeEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtZQUM5QyxHQUFHLHVCQUF1QjtZQUMxQixHQUFHLGVBQWU7WUFDbEIsVUFBVSxFQUFFLENBQUMsa0JBQWtCLENBQUM7U0FDakMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0E5QlUsZUFBZTttSEFBZixlQUFlLGNBRmQsTUFBTTs7U0FFUCxlQUFlOzRGQUFmLGVBQWU7a0JBSDNCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1iZWRkZWRWaWV3UmVmLCBJbmplY3RhYmxlLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgTWF0U25hY2tCYXIsXG4gIE1hdFNuYWNrQmFyQ29uZmlnLFxuICBNYXRTbmFja0JhclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc25hY2stYmFyJztcbmltcG9ydCB7XG4gIERFRkFVTFRfU05BQ0tCQVJfQUNUSU9OLFxuICBERUZBVUxUX1NOQUNLQkFSX0NPTkZJRyxcbn0gZnJvbSAnLi4vY29uc3RhbnRzL3NuYWNrYmFyLmNvbnN0YW50JztcbmltcG9ydCB7IFNuYWNrYmFyU2VydmljZUludGVyZmFjZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvc25hY2tiYXIuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFNuYWNrYmFyU2VydmljZSBpbXBsZW1lbnRzIFNuYWNrYmFyU2VydmljZUludGVyZmFjZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc25hY2tiYXI6IE1hdFNuYWNrQmFyKSB7fVxuXG4gIHB1YmxpYyBlcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNuYWNrYmFyLm9wZW4obWVzc2FnZSwgREVGQVVMVF9TTkFDS0JBUl9BQ1RJT04sIHtcbiAgICAgIC4uLkRFRkFVTFRfU05BQ0tCQVJfQ09ORklHLFxuICAgICAgcGFuZWxDbGFzczogWydlcnJvci1zbmFja2JhciddLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHN1Y2Nlc3MoXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIGNvbmZpZ092ZXJyaWRlcz86IE1hdFNuYWNrQmFyQ29uZmlnPGFueT5cbiAgKTogdm9pZCB7XG4gICAgdGhpcy5zbmFja2Jhci5vcGVuKG1lc3NhZ2UsIERFRkFVTFRfU05BQ0tCQVJfQUNUSU9OLCB7XG4gICAgICAuLi5ERUZBVUxUX1NOQUNLQkFSX0NPTkZJRyxcbiAgICAgIC4uLmNvbmZpZ092ZXJyaWRlcyxcbiAgICAgIHBhbmVsQ2xhc3M6IFsnc3VjY2Vzcy1zbmFja2JhciddLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHN1Y2Nlc3NGcm9tVGVtcGxhdGUoXG4gICAgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgY29uZmlnT3ZlcnJpZGVzPzogTWF0U25hY2tCYXJDb25maWc8YW55PlxuICApOiBNYXRTbmFja0JhclJlZjxFbWJlZGRlZFZpZXdSZWY8YW55Pj4ge1xuICAgIHJldHVybiB0aGlzLnNuYWNrYmFyLm9wZW5Gcm9tVGVtcGxhdGUodGVtcGxhdGUsIHtcbiAgICAgIC4uLkRFRkFVTFRfU05BQ0tCQVJfQ09ORklHLFxuICAgICAgLi4uY29uZmlnT3ZlcnJpZGVzLFxuICAgICAgcGFuZWxDbGFzczogWydzdWNjZXNzLXNuYWNrYmFyJ10sXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==
import { Injectable } from '@angular/core';
import { Store } from '@ngxs/store';
import { catchError, forkJoin, switchMap, take, tap, } from 'rxjs';
import { AuthService, FeatureConfigService, GroupsService, UserPreferencesService, UserService, } from '../api';
import { SetFeatureConfig } from '../store/feature-config.state.actions';
import { GroupState } from '../store/group.state';
import { SetGroups, SetSelectedGroupId } from '../store/group.state.actions';
import { SetUsers } from '../store/user.state.actions';
import { ClaimsService } from './claims.service';
import { SetUserPreferences } from '../store';
import * as i0 from "@angular/core";
import * as i1 from "../api";
import * as i2 from "./claims.service";
import * as i3 from "@ngxs/store";
class AppInitService {
    constructor(authService, claimsService, featureConfigService, groupsService, store, userService, userPreferencesService) {
        this.authService = authService;
        this.claimsService = claimsService;
        this.featureConfigService = featureConfigService;
        this.groupsService = groupsService;
        this.store = store;
        this.userService = userService;
        this.userPreferencesService = userPreferencesService;
    }
    initAppData() {
        return new Promise((resolve) => {
            this.featureConfigService
                .getFeatureConfig()
                .pipe(take(1), switchMap((config) => this.store.dispatch(new SetFeatureConfig(config))), catchError((err) => {
                resolve(false);
                return err;
            }), switchMap(() => this.authService.getNewRefreshToken()), switchMap(() => this.getAppData()), tap(() => resolve(true)))
                .subscribe();
        });
    }
    getAppData() {
        const usersCall = this.userService.getUsers().pipe(take(1), tap((users) => this.store.dispatch(new SetUsers(users))));
        const groupsCall = this.groupsService.getGroupsForuser().pipe(take(1), tap((groups) => {
            this.store.dispatch(new SetGroups(groups));
            const groupId = this.store.selectSnapshot(GroupState.selectedGroupId);
            if (!groupId) {
                this.store.dispatch(new SetSelectedGroupId());
            }
        }));
        const userClaims = this.claimsService.getAndSetClaimsForLoggedInUser();
        const userPreferencesCall = this.userPreferencesService
            .getUserPreferences()
            .pipe(take(1), tap((userPreferences) => {
            this.store.dispatch(new SetUserPreferences(userPreferences));
        }));
        return forkJoin(usersCall, groupsCall, userClaims, userPreferencesCall);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: AppInitService, deps: [{ token: i1.AuthService }, { token: i2.ClaimsService }, { token: i1.FeatureConfigService }, { token: i1.GroupsService }, { token: i3.Store }, { token: i1.UserService }, { token: i1.UserPreferencesService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: AppInitService, providedIn: 'root' }); }
}
export { AppInitService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: AppInitService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthService }, { type: i2.ClaimsService }, { type: i1.FeatureConfigService }, { type: i1.GroupsService }, { type: i3.Store }, { type: i1.UserService }, { type: i1.UserPreferencesService }]; } });
export function initAppData(appInitService) {
    return () => appInitService.initAppData();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWluaXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy9hcHAtaW5pdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQ0wsVUFBVSxFQUVWLFFBQVEsRUFFUixTQUFTLEVBQ1QsSUFBSSxFQUNKLEdBQUcsR0FDSixNQUFNLE1BQU0sQ0FBQztBQUNkLE9BQU8sRUFDTCxXQUFXLEVBQ1gsb0JBQW9CLEVBRXBCLGFBQWEsRUFHYixzQkFBc0IsRUFDdEIsV0FBVyxHQUNaLE1BQU0sUUFBUSxDQUFDO0FBQ2hCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDN0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxVQUFVLENBQUM7Ozs7O0FBRTlDLE1BR2EsY0FBYztJQUN6QixZQUNVLFdBQXdCLEVBQ3hCLGFBQTRCLEVBQzVCLG9CQUEwQyxFQUMxQyxhQUE0QixFQUM1QixLQUFZLEVBQ1osV0FBd0IsRUFDeEIsc0JBQThDO1FBTjlDLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsa0JBQWEsR0FBYixhQUFhLENBQWU7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QUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcbmltcG9ydCB7XG4gIGNhdGNoRXJyb3IsXG4gIGZpbmFsaXplLFxuICBmb3JrSm9pbixcbiAgT2JzZXJ2YWJsZSxcbiAgc3dpdGNoTWFwLFxuICB0YWtlLFxuICB0YXAsXG59IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgQXV0aFNlcnZpY2UsXG4gIEZlYXR1cmVDb25maWdTZXJ2aWNlLFxuICBHcm91cCxcbiAgR3JvdXBzU2VydmljZSxcbiAgVXNlcixcbiAgVXNlclByZWZlcmVuY2VzLFxuICBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICBVc2VyU2VydmljZSxcbn0gZnJvbSAnLi4vYXBpJztcbmltcG9ydCB7IFNldEZlYXR1cmVDb25maWcgfSBmcm9tICcuLi9zdG9yZS9mZWF0dXJlLWNvbmZpZy5zdGF0ZS5hY3Rpb25zJztcbmltcG9ydCB7IEdyb3VwU3RhdGUgfSBmcm9tICcuLi9zdG9yZS9ncm91cC5zdGF0ZSc7XG5pbXBvcnQgeyBTZXRHcm91cHMsIFNldFNlbGVjdGVkR3JvdXBJZCB9IGZyb20gJy4uL3N0b3JlL2dyb3VwLnN0YXRlLmFjdGlvbnMnO1xuaW1wb3J0IHsgU2V0VXNlcnMgfSBmcm9tICcuLi9zdG9yZS91c2VyLnN0YXRlLmFjdGlvbnMnO1xuXG5pbXBvcnQgeyBDbGFpbXNTZXJ2aWNlIH0gZnJvbSAnLi9jbGFpbXMuc2VydmljZSc7XG5pbXBvcnQgeyBTZXRVc2VyUHJlZmVyZW5jZXMgfSBmcm9tICcuLi9zdG9yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBcHBJbml0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xhaW1zU2VydmljZTogQ2xhaW1zU2VydmljZSxcbiAgICBwcml2YXRlIGZlYXR1cmVDb25maWdTZXJ2aWNlOiBGZWF0dXJlQ29uZmlnU2VydmljZSxcbiAgICBwcml2YXRlIGdyb3Vwc1NlcnZpY2U6IEdyb3Vwc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBzdG9yZTogU3RvcmUsXG4gICAgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSB1c2VyUHJlZmVyZW5jZXNTZXJ2aWNlOiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlXG4gICkge31cblxuICBwdWJsaWMgaW5pdEFwcERhdGEoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmZlYXR1cmVDb25maWdTZXJ2aWNlXG4gICAgICAgIC5nZXRGZWF0dXJlQ29uZmlnKClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICBzd2l0Y2hNYXAoKGNvbmZpZykgPT5cbiAgICAgICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gobmV3IFNldEZlYXR1cmVDb25maWcoY29uZmlnKSlcbiAgICAgICAgICApLFxuICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLmF1dGhTZXJ2aWNlLmdldE5ld1JlZnJlc2hUb2tlbigpKSxcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRBcHBEYXRhKCkpLFxuICAgICAgICAgIHRhcCgoKSA9PiByZXNvbHZlKHRydWUpKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBcHBEYXRhKCk6IE9ic2VydmFibGU8W1VzZXJbXSwgR3JvdXBbXSwgdm9pZCwgVXNlclByZWZlcmVuY2VzXT4ge1xuICAgIGNvbnN0IHVzZXJzQ2FsbCA9IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcnMoKS5waXBlKFxuICAgICAgdGFrZSgxKSxcbiAgICAgIHRhcCgodXNlcnMpID0+IHRoaXMuc3RvcmUuZGlzcGF0Y2gobmV3IFNldFVzZXJzKHVzZXJzKSkpXG4gICAgKTtcblxuICAgIGNvbnN0IGdyb3Vwc0NhbGwgPSB0aGlzLmdyb3Vwc1NlcnZpY2UuZ2V0R3JvdXBzRm9ydXNlcigpLnBpcGUoXG4gICAgICB0YWtlKDEpLFxuICAgICAgdGFwKChncm91cHMpID0+IHtcbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChuZXcgU2V0R3JvdXBzKGdyb3VwcykpO1xuICAgICAgICBjb25zdCBncm91cElkID0gdGhpcy5zdG9yZS5zZWxlY3RTbmFwc2hvdChHcm91cFN0YXRlLnNlbGVjdGVkR3JvdXBJZCk7XG4gICAgICAgIGlmICghZ3JvdXBJZCkge1xuICAgICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gobmV3IFNldFNlbGVjdGVkR3JvdXBJZCgpKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICAgIGNvbnN0IHVzZXJDbGFpbXMgPSB0aGlzLmNsYWltc1NlcnZpY2UuZ2V0QW5kU2V0Q2xhaW1zRm9yTG9nZ2VkSW5Vc2VyKCk7XG4gICAgY29uc3QgdXNlclByZWZlcmVuY2VzQ2FsbCA9IHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZVxuICAgICAgLmdldFVzZXJQcmVmZXJlbmNlcygpXG4gICAgICAucGlwZShcbiAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgdGFwKCh1c2VyUHJlZmVyZW5jZXMpID0+IHtcbiAgICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKG5ldyBTZXRVc2VyUHJlZmVyZW5jZXModXNlclByZWZlcmVuY2VzKSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgcmV0dXJuIGZvcmtKb2luKHVzZXJzQ2FsbCwgZ3JvdXBzQ2FsbCwgdXNlckNsYWltcywgdXNlclByZWZlcmVuY2VzQ2FsbCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRBcHBEYXRhKGFwcEluaXRTZXJ2aWNlOiBBcHBJbml0U2VydmljZSkge1xuICByZXR1cm4gKCkgPT4gYXBwSW5pdFNlcnZpY2UuaW5pdEFwcERhdGEoKTtcbn1cbiJdfQ==
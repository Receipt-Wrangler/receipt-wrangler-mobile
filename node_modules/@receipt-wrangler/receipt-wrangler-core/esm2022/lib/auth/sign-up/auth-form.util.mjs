import { Injectable } from '@angular/core';
import { catchError, map, of, switchMap, tap } from 'rxjs';
import { AuthService } from '../../api';
import { AppInitService, SnackbarService } from '../../services';
import * as i0 from "@angular/core";
import * as i1 from "../../api";
import * as i2 from "../../services";
class AuthFormUtil {
    constructor(authService, snackbarService, appInitService) {
        this.authService = authService;
        this.snackbarService = snackbarService;
        this.appInitService = appInitService;
    }
    getSubmitObservable(form, isSignUp) {
        const isValid = form.valid;
        if (isValid && isSignUp) {
            return this.authService.signUp(form.value).pipe(tap(() => {
                this.snackbarService.success('User successfully signed up');
            }), catchError((err) => of(this.snackbarService.error(err.error['username'] ?? err['errMsg']))));
        }
        else if (isValid && !isSignUp) {
            return this.authService.login(form.value).pipe(tap(() => {
                this.snackbarService.success('Successfully logged in');
            }), switchMap(() => this.appInitService.getAppData()), map(() => undefined));
        }
        else {
            return of(undefined);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: AuthFormUtil, deps: [{ token: i1.AuthService }, { token: i2.SnackbarService }, { token: i2.AppInitService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: AuthFormUtil }); }
}
export { AuthFormUtil };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: AuthFormUtil, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AuthService }, { type: i2.SnackbarService }, { type: i2.AppInitService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1mb3JtLnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvYXV0aC9zaWduLXVwL2F1dGgtZm9ybS51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLFVBQVUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRWpFLE1BQ2EsWUFBWTtJQUN2QixZQUNVLFdBQXdCLEVBQ3hCLGVBQWdDLEVBQ2hDLGNBQThCO1FBRjlCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFDckMsQ0FBQztJQUVHLG1CQUFtQixDQUN4QixJQUFlLEVBQ2YsUUFBaUI7UUFFakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUUzQixJQUFJLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUM3QyxHQUFHLENBQUMsR0FBRyxFQUFFO2dCQUNQLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7WUFDOUQsQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDakIsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FDdkUsQ0FDRixDQUFDO1NBQ0g7YUFBTSxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUMvQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQzVDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUMsRUFDRixTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUNqRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQ3JCLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDOytHQWpDVSxZQUFZO21IQUFaLFlBQVk7O1NBQVosWUFBWTs0RkFBWixZQUFZO2tCQUR4QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgY2F0Y2hFcnJvciwgbWFwLCBvZiwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYXBpJztcbmltcG9ydCB7IEFwcEluaXRTZXJ2aWNlLCBTbmFja2JhclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdXRoRm9ybVV0aWwge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSxcbiAgICBwcml2YXRlIHNuYWNrYmFyU2VydmljZTogU25hY2tiYXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXBwSW5pdFNlcnZpY2U6IEFwcEluaXRTZXJ2aWNlXG4gICkge31cblxuICBwdWJsaWMgZ2V0U3VibWl0T2JzZXJ2YWJsZShcbiAgICBmb3JtOiBGb3JtR3JvdXAsXG4gICAgaXNTaWduVXA6IGJvb2xlYW5cbiAgKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgY29uc3QgaXNWYWxpZCA9IGZvcm0udmFsaWQ7XG5cbiAgICBpZiAoaXNWYWxpZCAmJiBpc1NpZ25VcCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXV0aFNlcnZpY2Uuc2lnblVwKGZvcm0udmFsdWUpLnBpcGUoXG4gICAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zbmFja2JhclNlcnZpY2Uuc3VjY2VzcygnVXNlciBzdWNjZXNzZnVsbHkgc2lnbmVkIHVwJyk7XG4gICAgICAgIH0pLFxuICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+XG4gICAgICAgICAgb2YodGhpcy5zbmFja2JhclNlcnZpY2UuZXJyb3IoZXJyLmVycm9yWyd1c2VybmFtZSddID8/IGVyclsnZXJyTXNnJ10pKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNWYWxpZCAmJiAhaXNTaWduVXApIHtcbiAgICAgIHJldHVybiB0aGlzLmF1dGhTZXJ2aWNlLmxvZ2luKGZvcm0udmFsdWUpLnBpcGUoXG4gICAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zbmFja2JhclNlcnZpY2Uuc3VjY2VzcygnU3VjY2Vzc2Z1bGx5IGxvZ2dlZCBpbicpO1xuICAgICAgICB9KSxcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuYXBwSW5pdFNlcnZpY2UuZ2V0QXBwRGF0YSgpKSxcbiAgICAgICAgbWFwKCgpID0+IHVuZGVmaW5lZClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xuICAgIH1cbiAgfVxufVxuIl19
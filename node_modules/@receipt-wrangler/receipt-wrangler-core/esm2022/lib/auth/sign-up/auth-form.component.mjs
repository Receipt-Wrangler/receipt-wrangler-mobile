import { Component, EventEmitter, Input, Output, TemplateRef, } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators, } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Store } from '@ngxs/store';
import { BehaviorSubject, take, tap } from 'rxjs';
import { GroupState } from '../../store/group.state';
import { UserValidators } from '../../validators/user-validators';
import { AuthFormUtil } from './auth-form.util';
import * as i0 from "@angular/core";
import * as i1 from "./auth-form.util";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/router";
import * as i4 from "@ngxs/store";
import * as i5 from "../../validators/user-validators";
import * as i6 from "../../button/button/button.component";
import * as i7 from "@angular/common";
import * as i8 from "../../directives/feature.directive";
import * as i9 from "../../input/input/input.component";
import * as i10 from "../../pipes/form-get.pipe";
class AuthForm {
    constructor(authFormUtil, formBuilder, route, router, store, userValidators) {
        this.authFormUtil = authFormUtil;
        this.formBuilder = formBuilder;
        this.route = route;
        this.router = router;
        this.store = store;
        this.userValidators = userValidators;
        this.emitSubmit = false;
        this.submitted = new EventEmitter();
        this.form = new FormGroup({});
        this.isSignUp = new BehaviorSubject(false);
        this.headerText = '';
        this.primaryButtonText = '';
        this.secondaryButtonText = '';
        this.secondaryButtonRouterLink = [];
    }
    ngOnInit() {
        this.initForm();
        this.listenForRouteChanges();
        this.listenForIsSignUpChanges();
    }
    listenForRouteChanges() {
        this.route.data
            .pipe(tap((data) => {
            this.isSignUp.next(!!data?.['isSignUp']);
        }))
            .subscribe();
    }
    listenForIsSignUpChanges() {
        this.isSignUp
            .pipe(tap((isSignUp) => {
            if (isSignUp) {
                this.headerText = 'Sign Up';
                this.primaryButtonText = 'Sign Up';
                this.secondaryButtonRouterLink = ['/auth/login'];
                this.secondaryButtonText = 'Back to Login';
                this.form
                    .get('username')
                    ?.addAsyncValidators(this.userValidators.uniqueUsername(0, ''));
                this.form.addControl('displayname', new FormControl('', Validators.required));
            }
            else {
                this.headerText = 'Login';
                this.primaryButtonText = 'Login';
                this.secondaryButtonRouterLink = ['/auth/sign-up'];
                this.secondaryButtonText = 'Sign Up';
                this.form
                    .get('username')
                    ?.removeAsyncValidators(this.userValidators.uniqueUsername(0, ''));
                this.form.removeControl('displayname');
            }
        }))
            .subscribe();
    }
    initForm() {
        this.form = this.formBuilder.group({
            username: ['', [Validators.required]],
            password: ['', Validators.required],
        });
    }
    submit() {
        if (this.emitSubmit) {
            this.submitted.emit();
        }
        else {
            const isSignUp = this.isSignUp.getValue();
            this.authFormUtil
                .getSubmitObservable(this.form, isSignUp)
                .pipe(take(1), tap(() => {
                this.router.navigate([
                    this.store.selectSnapshot(GroupState.dashboardLink),
                ]);
            }))
                .subscribe();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: AuthForm, deps: [{ token: i1.AuthFormUtil }, { token: i2.FormBuilder }, { token: i3.ActivatedRoute }, { token: i3.Router }, { token: i4.Store }, { token: i5.UserValidators }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.11", type: AuthForm, selector: "app-auth-form", inputs: { additionalFieldsTemplate: "additionalFieldsTemplate", emitSubmit: "emitSubmit" }, outputs: { submitted: "submitted" }, providers: [UserValidators], ngImport: i0, template: "<div class=\"d-flex align-items-center justify-content-center\">\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n    <h2>{{ headerText }}</h2>\n    <div class=\"d-flex flex-column\">\n      <ng-template\n        *ngIf=\"additionalFieldsTemplate\"\n        [ngTemplateOutlet]=\"additionalFieldsTemplate\"\n      ></ng-template>\n      <ng-container *ngIf=\"isSignUp | async\">\n        <app-input\n          label=\"Displayname\"\n          [inputFormControl]=\"form | formGet : 'displayname'\"\n        >\n        </app-input>\n      </ng-container>\n      <app-input\n        label=\"Username\"\n        [inputFormControl]=\"form | formGet : 'username'\"\n      >\n      </app-input>\n      <app-input\n        label=\"Password\"\n        type=\"password\"\n        [showVisibilityEye]=\"true\"\n        [inputFormControl]=\"form | formGet : 'password'\"\n      >\n      </app-input>\n    </div>\n    <div class=\"w-100 d-flex flex-column\">\n      <app-button\n        class=\"w-100\"\n        buttonClass=\"w-100 mb-2\"\n        type=\"submit\"\n        [buttonText]=\"primaryButtonText\"\n      ></app-button>\n      <app-button\n        *appFeature=\"'enableLocalSignUp'\"\n        class=\"w-100\"\n        buttonClass=\"w-100 \"\n        type=\"button\"\n        color=\"accent\"\n        [buttonText]=\"secondaryButtonText\"\n        [routerLink]=\"secondaryButtonRouterLink\"\n      ></app-button>\n    </div>\n  </form>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i6.ButtonComponent, selector: "app-button", inputs: ["buttonClass", "color", "buttonText", "type", "matButtonType", "icon", "customIcon", "disabled", "buttonRouterLink", "tooltip", "matBadgeContent", "matBadgeColor"], outputs: ["clicked"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i8.FeatureDirective, selector: "[appFeature]", inputs: ["appFeature"] }, { kind: "component", type: i9.InputComponent, selector: "app-input", inputs: ["inputId", "type", "showVisibilityEye", "isCurrency", "mask", "maskPrefix", "thousandSeparator"], outputs: ["inputBlur"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "pipe", type: i7.AsyncPipe, name: "async" }, { kind: "pipe", type: i10.FormGetPipe, name: "formGet" }] }); }
}
export { AuthForm };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: AuthForm, decorators: [{
            type: Component,
            args: [{ selector: 'app-auth-form', providers: [UserValidators], template: "<div class=\"d-flex align-items-center justify-content-center\">\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n    <h2>{{ headerText }}</h2>\n    <div class=\"d-flex flex-column\">\n      <ng-template\n        *ngIf=\"additionalFieldsTemplate\"\n        [ngTemplateOutlet]=\"additionalFieldsTemplate\"\n      ></ng-template>\n      <ng-container *ngIf=\"isSignUp | async\">\n        <app-input\n          label=\"Displayname\"\n          [inputFormControl]=\"form | formGet : 'displayname'\"\n        >\n        </app-input>\n      </ng-container>\n      <app-input\n        label=\"Username\"\n        [inputFormControl]=\"form | formGet : 'username'\"\n      >\n      </app-input>\n      <app-input\n        label=\"Password\"\n        type=\"password\"\n        [showVisibilityEye]=\"true\"\n        [inputFormControl]=\"form | formGet : 'password'\"\n      >\n      </app-input>\n    </div>\n    <div class=\"w-100 d-flex flex-column\">\n      <app-button\n        class=\"w-100\"\n        buttonClass=\"w-100 mb-2\"\n        type=\"submit\"\n        [buttonText]=\"primaryButtonText\"\n      ></app-button>\n      <app-button\n        *appFeature=\"'enableLocalSignUp'\"\n        class=\"w-100\"\n        buttonClass=\"w-100 \"\n        type=\"button\"\n        color=\"accent\"\n        [buttonText]=\"secondaryButtonText\"\n        [routerLink]=\"secondaryButtonRouterLink\"\n      ></app-button>\n    </div>\n  </form>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AuthFormUtil }, { type: i2.FormBuilder }, { type: i3.ActivatedRoute }, { type: i3.Router }, { type: i4.Store }, { type: i5.UserValidators }]; }, propDecorators: { additionalFieldsTemplate: [{
                type: Input
            }], emitSubmit: [{
                type: Input
            }], submitted: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
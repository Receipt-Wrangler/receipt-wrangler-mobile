{"version":3,"file":"receipt-wrangler-receipt-wrangler-core-src-lib-api.mjs","sources":["../../projects/core/src/lib/api/variables.ts","../../projects/core/src/lib/api/configuration.ts","../../projects/core/src/lib/api/api/auth.service.ts","../../projects/core/src/lib/api/api/category.service.ts","../../projects/core/src/lib/api/api/comment.service.ts","../../projects/core/src/lib/api/api/dashboard.service.ts","../../projects/core/src/lib/api/api/featureConfig.service.ts","../../projects/core/src/lib/api/api/groups.service.ts","../../projects/core/src/lib/api/api/notifications.service.ts","../../projects/core/src/lib/api/encoder.ts","../../projects/core/src/lib/api/api/receipt.service.ts","../../projects/core/src/lib/api/api/receiptImage.service.ts","../../projects/core/src/lib/api/api/search.service.ts","../../projects/core/src/lib/api/api/tag.service.ts","../../projects/core/src/lib/api/api/user.service.ts","../../projects/core/src/lib/api/api/userPreferences.service.ts","../../projects/core/src/lib/api/api/api.ts","../../projects/core/src/lib/api/model/baseModel.ts","../../projects/core/src/lib/api/model/bulkStatusUpdateCommand.ts","../../projects/core/src/lib/api/model/category.ts","../../projects/core/src/lib/api/model/categoryView.ts","../../projects/core/src/lib/api/model/comment.ts","../../projects/core/src/lib/api/model/encodedImage.ts","../../projects/core/src/lib/api/model/featureConfig.ts","../../projects/core/src/lib/api/model/fileData.ts","../../projects/core/src/lib/api/model/fileDataView.ts","../../projects/core/src/lib/api/model/group.ts","../../projects/core/src/lib/api/model/groupMember.ts","../../projects/core/src/lib/api/model/groupSettings.ts","../../projects/core/src/lib/api/model/groupSettingsWhiteListEmail.ts","../../projects/core/src/lib/api/model/item.ts","../../projects/core/src/lib/api/model/itemStatus.ts","../../projects/core/src/lib/api/model/loginCommand.ts","../../projects/core/src/lib/api/model/magicFillCommand.ts","../../projects/core/src/lib/api/model/notificationType.ts","../../projects/core/src/lib/api/model/pagedData.ts","../../projects/core/src/lib/api/model/pagedRequestCommand.ts","../../projects/core/src/lib/api/model/pagedRequestField.ts","../../projects/core/src/lib/api/model/quickScanCommand.ts","../../projects/core/src/lib/api/model/receipt.ts","../../projects/core/src/lib/api/model/receiptFileUploadCommand.ts","../../projects/core/src/lib/api/model/receiptImageConvertToJpgBody.ts","../../projects/core/src/lib/api/model/receiptImageMagicFillBody.ts","../../projects/core/src/lib/api/model/receiptPagedRequestCommand.ts","../../projects/core/src/lib/api/model/resetPasswordCommand.ts","../../projects/core/src/lib/api/model/searchResult.ts","../../projects/core/src/lib/api/model/signUpCommand.ts","../../projects/core/src/lib/api/model/subjectLineRegex.ts","../../projects/core/src/lib/api/model/tag.ts","../../projects/core/src/lib/api/model/tagView.ts","../../projects/core/src/lib/api/model/updateGroupSettingsCommand.ts","../../projects/core/src/lib/api/model/updateProfileCommand.ts","../../projects/core/src/lib/api/model/upsertTagCommand.ts","../../projects/core/src/lib/api/model/upsertWidgetCommand.ts","../../projects/core/src/lib/api/model/user.ts","../../projects/core/src/lib/api/model/userPreferences.ts","../../projects/core/src/lib/api/model/userRole.ts","../../projects/core/src/lib/api/model/userView.ts","../../projects/core/src/lib/api/model/widget.ts","../../projects/core/src/lib/api/api.module.ts","../../projects/core/src/lib/api/receipt-wrangler-receipt-wrangler-core-src-lib-api.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LoginCommand } from '../model/loginCommand';\nimport { SignUpCommand } from '../model/signUpCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AuthService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get fresh tokens\n     * This will get a fresh token pair for the user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNewRefreshToken(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNewRefreshToken(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNewRefreshToken(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNewRefreshToken(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('post',`${this.basePath}/token/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Login\n     * This will log a user into the system\n     * @param body Login data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public login(body: LoginCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public login(body: LoginCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public login(body: LoginCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public login(body: LoginCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling login.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/login/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logout\n     * This will log a user out of the system and revoke their token [SYSTEM USER]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public logout(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public logout(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public logout(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public logout(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('post',`${this.basePath}/logout/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Signs up\n     * This will sign a user up for the system\n     * @param body Sign up data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public signUp(body: SignUpCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public signUp(body: SignUpCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public signUp(body: SignUpCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public signUp(body: SignUpCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling signUp.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/signUp`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Category } from '../model/category';\nimport { PagedData } from '../model/pagedData';\nimport { PagedRequestCommand } from '../model/pagedRequestCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CategoryService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create category\n     * This will create a category\n     * @param body Category to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createCategory(body: Category, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createCategory(body: Category, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createCategory(body: Category, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createCategory(body: Category, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/category/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete category\n     * This will delete a category by id\n     * @param categoryId Category Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteCategory(categoryId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteCategory(categoryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteCategory(categoryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteCategory(categoryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (categoryId === null || categoryId === undefined) {\n            throw new Error('Required parameter categoryId was null or undefined when calling deleteCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/category/${encodeURIComponent(String(categoryId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all categories\n     * This will return all categories in the system\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllCategories(observe?: 'body', reportProgress?: boolean): Observable<Array<Category>>;\n    public getAllCategories(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Category>>>;\n    public getAllCategories(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Category>>>;\n    public getAllCategories(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Category>>('get',`${this.basePath}/category/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get category count by name\n     * This will return a count of categories with the same name\n     * @param categoryName Category name to get count of\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCategoryCountByName(categoryName: string, observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getCategoryCountByName(categoryName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getCategoryCountByName(categoryName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getCategoryCountByName(categoryName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (categoryName === null || categoryName === undefined) {\n            throw new Error('Required parameter categoryName was null or undefined when calling getCategoryCountByName.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<number>('get',`${this.basePath}/category/${encodeURIComponent(String(categoryName))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get paged categories\n     * This will return paged categories\n     * @param body Paging and sorting data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPagedCategories(body: PagedRequestCommand, observe?: 'body', reportProgress?: boolean): Observable<PagedData>;\n    public getPagedCategories(body: PagedRequestCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedData>>;\n    public getPagedCategories(body: PagedRequestCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedData>>;\n    public getPagedCategories(body: PagedRequestCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling getPagedCategories.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<PagedData>('post',`${this.basePath}/category/getPagedCategories`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update category\n     * This will update a category\n     * @param body Category to update\n     * @param categoryId Category Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCategory(body: Category, categoryId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateCategory(body: Category, categoryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateCategory(body: Category, categoryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateCategory(body: Category, categoryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateCategory.');\n        }\n\n        if (categoryId === null || categoryId === undefined) {\n            throw new Error('Required parameter categoryId was null or undefined when calling updateCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/category/${encodeURIComponent(String(categoryId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Comment } from '../model/comment';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CommentService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add comment\n     * This will add a comment to a receipt, [SYSTEM USER]\n     * @param body Comment to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addComment(body: Comment, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public addComment(body: Comment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public addComment(body: Comment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public addComment(body: Comment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling addComment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/comment/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete comment\n     * This will delete a comment by id [SYSTEM User]\n     * @param commentId Comment Id to delete\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteComment(commentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteComment(commentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteComment(commentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteComment(commentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (commentId === null || commentId === undefined) {\n            throw new Error('Required parameter commentId was null or undefined when calling deleteComment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/comment/${encodeURIComponent(String(commentId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Dashboard } from '../model/dashboard';\nimport { UpsertDashboardCommand } from '../model/upsertDashboardCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DashboardService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create dashboard\n     * This will create a dashboard [SYSTEM USER]\n     * @param body Dashboard\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createDashboard(body: UpsertDashboardCommand, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;\n    public createDashboard(body: UpsertDashboardCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;\n    public createDashboard(body: UpsertDashboardCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;\n    public createDashboard(body: UpsertDashboardCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createDashboard.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Dashboard>('post',`${this.basePath}/dashboard/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete dashboard\n     * This will delete a dashboard by id\n     * @param dashboardId Id of dashboard to operate on\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteDashboard(dashboardId: number, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;\n    public deleteDashboard(dashboardId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;\n    public deleteDashboard(dashboardId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;\n    public deleteDashboard(dashboardId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (dashboardId === null || dashboardId === undefined) {\n            throw new Error('Required parameter dashboardId was null or undefined when calling deleteDashboard.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Dashboard>('delete',`${this.basePath}/dashboard/${encodeURIComponent(String(dashboardId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get dashboards for a user by group id\n     * This will get a dashboards for a user by group id\n     * @param groupId Id of group to get dashboard for\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDashboardsForUserByGroupId(groupId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Dashboard>>;\n    public getDashboardsForUserByGroupId(groupId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Dashboard>>>;\n    public getDashboardsForUserByGroupId(groupId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Dashboard>>>;\n    public getDashboardsForUserByGroupId(groupId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling getDashboardsForUserByGroupId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Dashboard>>('get',`${this.basePath}/dashboard/${encodeURIComponent(String(groupId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update dashboard\n     * This will update a dashboard\n     * @param body Dashboard to update\n     * @param dashboardId Id of dashboard to operate on\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;\n    public updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;\n    public updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;\n    public updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateDashboard.');\n        }\n\n        if (dashboardId === null || dashboardId === undefined) {\n            throw new Error('Required parameter dashboardId was null or undefined when calling updateDashboard.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Dashboard>('put',`${this.basePath}/dashboard/${encodeURIComponent(String(dashboardId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { FeatureConfig } from '../model/featureConfig';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class FeatureConfigService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get feature config\n     * This will get the server&#x27;s feature config\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getFeatureConfig(observe?: 'body', reportProgress?: boolean): Observable<FeatureConfig>;\n    public getFeatureConfig(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FeatureConfig>>;\n    public getFeatureConfig(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FeatureConfig>>;\n    public getFeatureConfig(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FeatureConfig>('get',`${this.basePath}/featureConfig`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Group } from '../model/group';\nimport { GroupSettings } from '../model/groupSettings';\nimport { UpdateGroupSettingsCommand } from '../model/updateGroupSettingsCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class GroupsService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create group\n     * This will create a group\n     * @param body Group to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createGroup(body: Group, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createGroup(body: Group, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createGroup(body: Group, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createGroup(body: Group, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createGroup.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/group`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete group\n     * This will delete a group by id\n     * @param groupId Group Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteGroup(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteGroup(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteGroup(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteGroup(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling deleteGroup.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/group/${encodeURIComponent(String(groupId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Gets a group by Id\n     * This will get a group by Id\n     * @param groupId Group Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGroupById(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getGroupById(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getGroupById(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getGroupById(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling getGroupById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/group/${encodeURIComponent(String(groupId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get groups for user\n     * This will get groups for the currently logged in user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGroupsForuser(observe?: 'body', reportProgress?: boolean): Observable<Array<Group>>;\n    public getGroupsForuser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Group>>>;\n    public getGroupsForuser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Group>>>;\n    public getGroupsForuser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Group>>('get',`${this.basePath}/group`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Poll group email\n     * This will poll the group email for new receipts and add them to the group\n     * @param groupId Group Id to poll\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pollGroupEmail(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public pollGroupEmail(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public pollGroupEmail(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public pollGroupEmail(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling pollGroupEmail.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('post',`${this.basePath}/group/${encodeURIComponent(String(groupId))}/pollGroupEmail`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a group\n     * This will update a group\n     * @param body Group to update\n     * @param groupId Group Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateGroup(body: Group, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateGroup(body: Group, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateGroup(body: Group, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateGroup(body: Group, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateGroup.');\n        }\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling updateGroup.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/group/${encodeURIComponent(String(groupId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update group settings\n     * This will update the group settings for a group\n     * @param body Group settings to update\n     * @param groupId Group Id to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<GroupSettings>;\n    public updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupSettings>>;\n    public updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupSettings>>;\n    public updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateGroupSettings.');\n        }\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling updateGroupSettings.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<GroupSettings>('put',`${this.basePath}/group/${encodeURIComponent(String(groupId))}/groupSettings`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Notification } from '../model/notification';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class NotificationsService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete all notifications for user\n     * This deletes all notifications for a user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteAllNotificationsForUser(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteAllNotificationsForUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteAllNotificationsForUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteAllNotificationsForUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/notifications/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete notification by id\n     * This deletes a notification by id\n     * @param notificationId Notification Id to delete\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteNotificationById(notificationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteNotificationById(notificationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteNotificationById(notificationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteNotificationById(notificationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (notificationId === null || notificationId === undefined) {\n            throw new Error('Required parameter notificationId was null or undefined when calling deleteNotificationById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/notifications/${encodeURIComponent(String(notificationId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Notification count\n     * This will get the notification count for the currently logged in user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNotificationCount(observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getNotificationCount(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getNotificationCount(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getNotificationCount(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<number>('get',`${this.basePath}/notifications/notificationCount`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all user notifications\n     * This will get all the notifications for the currently logged in user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNotificationsForuser(observe?: 'body', reportProgress?: boolean): Observable<Array<Notification>>;\n    public getNotificationsForuser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Notification>>>;\n    public getNotificationsForuser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Notification>>>;\n    public getNotificationsForuser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Notification>>('get',`${this.basePath}/notifications/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n * CustomHttpUrlEncodingCodec\n * Fix plus sign (+) not encoding, so sent as blank space\n * See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n */\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n  override encodeKey(k: string): string {\n    k = super.encodeKey(k);\n    return k.replace(/\\+/gi, '%2B');\n  }\n  override encodeValue(v: string): string {\n    v = super.encodeValue(v);\n    return v.replace(/\\+/gi, '%2B');\n  }\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { BulkStatusUpdateCommand } from '../model/bulkStatusUpdateCommand';\nimport { Receipt } from '../model/receipt';\nimport { ReceiptPagedRequestCommand } from '../model/receiptPagedRequestCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReceiptService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Bulk receipt status update\n     * This will bulk update receipt statuses with the option of adding a comment to each [SYSTEM USER]\n     * @param body Bulk status data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'body', reportProgress?: boolean): Observable<Array<Receipt>>;\n    public bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Receipt>>>;\n    public bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Receipt>>>;\n    public bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling bulkReceiptStatusUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Array<Receipt>>('post',`${this.basePath}/receipt/bulkStatusUpdate`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create receipt\n     * This will create a receipt [SYSTEM USER]\n     * @param body Receipt to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createReceipt(body: Receipt, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createReceipt(body: Receipt, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createReceipt(body: Receipt, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createReceipt(body: Receipt, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createReceipt.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/receipt/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete receipt\n     * This will delete a receipt by id [SYSTEM USER]\n     * @param receiptId Id of receipt to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteReceiptById(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteReceiptById(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteReceiptById(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteReceiptById(receiptId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling deleteReceiptById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/receipt/${encodeURIComponent(String(receiptId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Duplicate receipt\n     * This will duplicate a receipt [SYSTEM USER]\n     * @param receiptId Id of receipt to duplicate\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public duplicateReceipt(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public duplicateReceipt(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public duplicateReceipt(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public duplicateReceipt(receiptId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling duplicateReceipt.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('post',`${this.basePath}/receipt/${encodeURIComponent(String(receiptId))}/duplicate`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get receipt\n     * This will get a receipt by receipt id [SYSTEM USER]\n     * @param receiptId Id of receipt to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReceiptById(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;\n    public getReceiptById(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;\n    public getReceiptById(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;\n    public getReceiptById(receiptId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling getReceiptById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Receipt>('get',`${this.basePath}/receipt/${encodeURIComponent(String(receiptId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Gets receipts\n     * This will return receipts with the option to sort and filter [SYSTEM USER]\n     * @param body \n     * @param groupId Get all receipts that belong to groupId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling getReceiptsForGroup.');\n        }\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling getReceiptsForGroup.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/receipt/group/${encodeURIComponent(String(groupId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Has access to receipt\n     * This will return whether or not the currently logged in user has access to the receipt\n     * @param receiptId \n     * @param groupRole Role required to have access to receipt\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public hasAccessToReceipt(receiptId: number, groupRole?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling hasAccessToReceipt.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (receiptId !== undefined && receiptId !== null) {\n            queryParameters = queryParameters.set('receiptId', <any>receiptId);\n        }\n        if (groupRole !== undefined && groupRole !== null) {\n            queryParameters = queryParameters.set('groupRole', <any>groupRole);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/receipt/hasAccess`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Quick scan a receipt\n     * This take an image and use magic fill to fill and save the receipt [SYSTEM USER]\n     * @param file \n     * @param groupId \n     * @param paidByUserId \n     * @param status \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;\n    public quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;\n    public quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;\n    public quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling quickScanReceipt.');\n        }\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling quickScanReceipt.');\n        }\n\n        if (paidByUserId === null || paidByUserId === undefined) {\n            throw new Error('Required parameter paidByUserId was null or undefined when calling quickScanReceipt.');\n        }\n\n        if (status === null || status === undefined) {\n            throw new Error('Required parameter status was null or undefined when calling quickScanReceipt.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) as any || formParams;\n        }\n        if (groupId !== undefined) {\n            formParams = formParams.append('groupId', <any>groupId) as any || formParams;\n        }\n        if (paidByUserId !== undefined) {\n            formParams = formParams.append('paidByUserId', <any>paidByUserId) as any || formParams;\n        }\n        if (status !== undefined) {\n            formParams = formParams.append('status', <any>status) as any || formParams;\n        }\n\n        return this.httpClient.request<Receipt>('post',`${this.basePath}/receipt/quickScan`,\n            {\n                body: convertFormParamsToString ? formParams.toString() : formParams,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update receipt\n     * This will update a receipt by receipt id [SYSTEM USER]\n     * @param body Receipt to update\n     * @param receiptId Id of receipt to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateReceipt(body: Receipt, receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateReceipt(body: Receipt, receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateReceipt(body: Receipt, receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateReceipt(body: Receipt, receiptId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateReceipt.');\n        }\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling updateReceipt.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/receipt/${encodeURIComponent(String(receiptId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EncodedImage } from '../model/encodedImage';\nimport { FileDataView } from '../model/fileDataView';\nimport { Receipt } from '../model/receipt';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReceiptImageService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Converts a receipt image to jpg\n     * This will convert a receipt image to jpg, [SYSTEM USER]\n     * @param file \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public convertToJpgForm(file: Blob, observe?: 'body', reportProgress?: boolean): Observable<EncodedImage>;\n    public convertToJpgForm(file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EncodedImage>>;\n    public convertToJpgForm(file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EncodedImage>>;\n    public convertToJpgForm(file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling convertToJpg.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) as any || formParams;\n        }\n\n        return this.httpClient.request<EncodedImage>('post',`${this.basePath}/receiptImage/convertToJpg`,\n            {\n                body: convertFormParamsToString ? formParams.toString() : formParams,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete receipt image\n     * This will delete a receipt image by id [SYSTEM USER]\n     * @param receiptImageId Id of receipt image to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteReceiptImageById(receiptImageId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteReceiptImageById(receiptImageId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteReceiptImageById(receiptImageId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteReceiptImageById(receiptImageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptImageId === null || receiptImageId === undefined) {\n            throw new Error('Required parameter receiptImageId was null or undefined when calling deleteReceiptImageById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/receiptImage/${encodeURIComponent(String(receiptImageId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get receipt image\n     * This will get a receipt image by id, [SYSTEM USER]\n     * @param receiptImageId Id of receipt image to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReceiptImageById(receiptImageId: number, observe?: 'body', reportProgress?: boolean): Observable<FileDataView>;\n    public getReceiptImageById(receiptImageId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileDataView>>;\n    public getReceiptImageById(receiptImageId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileDataView>>;\n    public getReceiptImageById(receiptImageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptImageId === null || receiptImageId === undefined) {\n            throw new Error('Required parameter receiptImageId was null or undefined when calling getReceiptImageById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FileDataView>('get',`${this.basePath}/receiptImage/${encodeURIComponent(String(receiptImageId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Reads a receipt image and returns the parsed results\n     * This will parse and read a receipt image, [SYSTEM USER]\n     * @param file \n     * @param receiptImageId Id of receipt image to perform magic fill on\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;\n    public magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;\n    public magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;\n    public magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (receiptImageId !== undefined && receiptImageId !== null) {\n            queryParameters = queryParameters.set('receiptImageId', <any>receiptImageId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) as any || formParams;\n        }\n\n        return this.httpClient.request<Receipt>('post',`${this.basePath}/receiptImage/magicFill`,\n            {\n                body: convertFormParamsToString ? formParams.toString() : formParams,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Uploads a receipt image\n     * This will upload a receipt image, [SYSTEM USER]\n     * @param file \n     * @param receiptId \n     * @param encodedImage \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'body', reportProgress?: boolean): Observable<FileDataView>;\n    public uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileDataView>>;\n    public uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileDataView>>;\n    public uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling uploadReceiptImage.');\n        }\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling uploadReceiptImage.');\n        }\n\n        if (encodedImage === null || encodedImage === undefined) {\n            throw new Error('Required parameter encodedImage was null or undefined when calling uploadReceiptImage.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) as any || formParams;\n        }\n        if (receiptId !== undefined) {\n            formParams = formParams.append('receiptId', <any>receiptId) as any || formParams;\n        }\n        if (encodedImage !== undefined) {\n            formParams = formParams.append('encodedImage', <any>encodedImage) as any || formParams;\n        }\n\n        return this.httpClient.request<FileDataView>('post',`${this.basePath}/receiptImage/`,\n            {\n                body: convertFormParamsToString ? formParams.toString() : formParams,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { SearchResult } from '../model/searchResult';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class SearchService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Receipt Search\n     * This will search for receipts based on a search term\n     * @param searchTerm search term\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public receiptSearch(searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SearchResult>>;\n    public receiptSearch(searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SearchResult>>>;\n    public receiptSearch(searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SearchResult>>>;\n    public receiptSearch(searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (searchTerm === null || searchTerm === undefined) {\n            throw new Error('Required parameter searchTerm was null or undefined when calling receiptSearch.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (searchTerm !== undefined && searchTerm !== null) {\n            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<SearchResult>>('get',`${this.basePath}/search/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { PagedData } from '../model/pagedData';\nimport { PagedRequestCommand } from '../model/pagedRequestCommand';\nimport { Tag } from '../model/tag';\nimport { UpsertTagCommand } from '../model/upsertTagCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class TagService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create tag\n     * This will create a tag\n     * @param body Tag to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createTag(body: UpsertTagCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createTag(body: UpsertTagCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createTag(body: UpsertTagCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createTag(body: UpsertTagCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createTag.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/tag/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete tag\n     * This will delete a tag by id\n     * @param tagId Id of tag to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteTag(tagId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteTag(tagId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteTag(tagId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteTag(tagId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (tagId === null || tagId === undefined) {\n            throw new Error('Required parameter tagId was null or undefined when calling deleteTag.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/tag/${encodeURIComponent(String(tagId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all tags\n     * This will return all tags in the system\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllTags(observe?: 'body', reportProgress?: boolean): Observable<Array<Tag>>;\n    public getAllTags(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tag>>>;\n    public getAllTags(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tag>>>;\n    public getAllTags(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Tag>>('get',`${this.basePath}/tag/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get paged tags\n     * This will return paged tags\n     * @param body Paging and sorting data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPagedTags(body: PagedRequestCommand, observe?: 'body', reportProgress?: boolean): Observable<PagedData>;\n    public getPagedTags(body: PagedRequestCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedData>>;\n    public getPagedTags(body: PagedRequestCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedData>>;\n    public getPagedTags(body: PagedRequestCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling getPagedTags.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<PagedData>('post',`${this.basePath}/tag/getPagedTags`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get tag count by name\n     * This will count of names with the same name\n     * @param tagName Tag name to get count of\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTagCountByName(tagName: string, observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getTagCountByName(tagName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getTagCountByName(tagName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getTagCountByName(tagName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (tagName === null || tagName === undefined) {\n            throw new Error('Required parameter tagName was null or undefined when calling getTagCountByName.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<number>('get',`${this.basePath}/tag/${encodeURIComponent(String(tagName))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update tag\n     * This will update a tag\n     * @param body Tag to update\n     * @param tagId Id of tag to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateTag(body: UpsertTagCommand, tagId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateTag(body: UpsertTagCommand, tagId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateTag(body: UpsertTagCommand, tagId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateTag(body: UpsertTagCommand, tagId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateTag.');\n        }\n\n        if (tagId === null || tagId === undefined) {\n            throw new Error('Required parameter tagId was null or undefined when calling updateTag.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/tag/${encodeURIComponent(String(tagId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ResetPasswordCommand } from '../model/resetPasswordCommand';\nimport { UpdateProfileCommand } from '../model/updateProfileCommand';\nimport { User } from '../model/user';\nimport { UserView } from '../model/userView';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class UserService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Converts dummy user\n     * This will convert a dummy user to a normal system user, [SYSTEM ADMIN]\n     * @param body Login credentials for new user\n     * @param userId Id of user to convert to normal system user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public convertDummyUserById(body: ResetPasswordCommand, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling convertDummyUserById.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling convertDummyUserById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/user/${encodeURIComponent(String(userId))}/convertDummyUserToNormalUser`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create user\n     * This will to create a user, [SYSTEM ADMIN]\n     * @param body User to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUser(body: User, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createUser(body: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createUser(body: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createUser(body: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/user`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete user\n     * This will delete a system user by id [SYSTEM ADMIN]\n     * @param userId Id of user to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUserById(userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUserById(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUserById(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUserById(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling deleteUserById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/user/${encodeURIComponent(String(userId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get amount owed for user\n     * This will return the amount owed for the logged in user, in the specified group, [SYSTEM USER]\n     * @param groupId The Id of the group to get amount owed for\n     * @param receiptIds The Id of the receipts to get amount owed for\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (groupId !== undefined && groupId !== null) {\n            queryParameters = queryParameters.set('groupId', <any>groupId);\n        }\n        if (receiptIds) {\n            receiptIds.forEach((element) => {\n                queryParameters = queryParameters.append('receiptIds', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/user/amountOwedForUser`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get claims for logged in user\n     * This will return the user&#x27;s token claims for the currently logged in user [SYSTEM USER]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserClaims(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUserClaims(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUserClaims(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUserClaims(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/user/getUserClaims`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get username count\n     * This will return the number of users in the system with the same username\n     * @param username Username to get the count of\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsernameCount(username: string, observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getUsernameCount(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getUsernameCount(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getUsernameCount(username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (username === null || username === undefined) {\n            throw new Error('Required parameter username was null or undefined when calling getUsernameCount.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<number>('get',`${this.basePath}/user/${encodeURIComponent(String(username))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get users\n     * This will get all the users in the system and return a view without sensative information\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsers(observe?: 'body', reportProgress?: boolean): Observable<Array<UserView>>;\n    public getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserView>>>;\n    public getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserView>>>;\n    public getUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<UserView>>('get',`${this.basePath}/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Reset password\n     * This will reset a password for a user, [SYSTEM ADMIN]\n     * @param body Login credentials for new user\n     * @param userId Id of user to reset password\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public resetPasswordById(body: ResetPasswordCommand, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling resetPasswordById.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling resetPasswordById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/user/${encodeURIComponent(String(userId))}/resetPassword`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user by id\n     * This will update a user by id, [SYSTEM ADMIN]\n     * @param body User to update\n     * @param userId Id of user to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUserById(body: User, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateUserById(body: User, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateUserById(body: User, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateUserById(body: User, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUserById.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling updateUserById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/user/${encodeURIComponent(String(userId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user profile\n     * This will update the logged in user&#x27;s user profile\n     * @param body User profile to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUserProfile(body: UpdateProfileCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateUserProfile(body: UpdateProfileCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateUserProfile(body: UpdateProfileCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateUserProfile(body: UpdateProfileCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUserProfile.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/user/updateUserProfile`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { UserPreferences } from '../model/userPreferences';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class UserPreferencesService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get user preferences\n     * This will return the user&#x27;s preferences for the currently logged in user [SYSTEM USER]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserPreferences(observe?: 'body', reportProgress?: boolean): Observable<UserPreferences>;\n    public getUserPreferences(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPreferences>>;\n    public getUserPreferences(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPreferences>>;\n    public getUserPreferences(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<UserPreferences>('get',`${this.basePath}/userPreferences`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user preferences\n     * This will update the user&#x27;s preferences for the currently logged in user [SYSTEM USER]\n     * @param body User preferences to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUserPreferences(body: UserPreferences, observe?: 'body', reportProgress?: boolean): Observable<UserPreferences>;\n    public updateUserPreferences(body: UserPreferences, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPreferences>>;\n    public updateUserPreferences(body: UserPreferences, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPreferences>>;\n    public updateUserPreferences(body: UserPreferences, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUserPreferences.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<UserPreferences>('put',`${this.basePath}/userPreferences`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './auth.service';\nimport { AuthService } from './auth.service';\nexport * from './category.service';\nimport { CategoryService } from './category.service';\nexport * from './comment.service';\nimport { CommentService } from './comment.service';\nexport * from './dashboard.service';\nimport { DashboardService } from './dashboard.service';\nexport * from './featureConfig.service';\nimport { FeatureConfigService } from './featureConfig.service';\nexport * from './groups.service';\nimport { GroupsService } from './groups.service';\nexport * from './notifications.service';\nimport { NotificationsService } from './notifications.service';\nexport * from './receipt.service';\nimport { ReceiptService } from './receipt.service';\nexport * from './receiptImage.service';\nimport { ReceiptImageService } from './receiptImage.service';\nexport * from './search.service';\nimport { SearchService } from './search.service';\nexport * from './tag.service';\nimport { TagService } from './tag.service';\nexport * from './user.service';\nimport { UserService } from './user.service';\nexport * from './userPreferences.service';\nimport { UserPreferencesService } from './userPreferences.service';\nexport const APIS = [AuthService, CategoryService, CommentService, DashboardService, FeatureConfigService, GroupsService, NotificationsService, ReceiptService, ReceiptImageService, SearchService, TagService, UserService, UserPreferencesService];\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface BaseModel { \n    createdAt?: string;\n    createdBy?: number;\n    id?: number;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface BulkStatusUpdateCommand { \n    /**\n     * Optional comment to leave on each receipt\n     */\n    comment?: string;\n    /**\n     * Status to update to\n     */\n    status: string;\n    /**\n     * Receipt ids to update\n     */\n    receiptIds: Array<number>;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Category to relate receipts to\n */\nexport interface Category { \n    createdAt?: string;\n    createdBy?: number;\n    id?: number;\n    /**\n     * Name of the category\n     */\n    name?: string;\n    /**\n     * Description of the category\n     */\n    description?: string;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Category to relate receipts to\n */\nexport interface CategoryView { \n    createdAt?: string;\n    createdBy?: number;\n    id: number;\n    /**\n     * Name of the category\n     */\n    name: string;\n    /**\n     * Description of the category\n     */\n    description?: string;\n    updatedAt?: string;\n    /**\n     * Number of receipts associated with this category\n     */\n    numberOfReceipts: number;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * User comment left on receipts\n */\nexport interface Comment { \n    /**\n     * Additional information about the comment\n     */\n    additionalInfo?: string;\n    /**\n     * Comment itself\n     */\n    comment: string;\n    /**\n     * Comment foreign key used for repleis\n     */\n    commentId?: number;\n    createdAt?: string;\n    createdBy?: number;\n    id: number;\n    /**\n     * Receipt foreign key\n     */\n    receiptId: number;\n    /**\n     * Comment's replies\n     */\n    replies: Array<Comment>;\n    updatedAt?: string;\n    /**\n     * User foreign key\n     */\n    userId: number;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface EncodedImage { \n    /**\n     * base64 encoded jpg\n     */\n    encodedImage: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface FeatureConfig { \n    /**\n     * Whether AI powered receipts are enabled\n     */\n    aiPoweredReceipts?: boolean;\n    /**\n     * Whether local sign up is enabled\n     */\n    enableLocalSignUp?: boolean;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * File data for images on a receipt\n */\nexport interface FileData { \n    createdAt?: string;\n    createdBy?: number;\n    /**\n     * MIME file type\n     */\n    fileType?: string;\n    id: number;\n    /**\n     * Image data\n     */\n    imageData: Array<number>;\n    /**\n     * File name\n     */\n    name?: string;\n    /**\n     * Receipt foreign key\n     */\n    receiptId: number;\n    /**\n     * File size\n     */\n    size?: number;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface FileDataView { \n    /**\n     * File data id\n     */\n    id: number;\n    /**\n     * Base64 encoded image\n     */\n    encodedImage: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { GroupMember } from './groupMember';\nimport { GroupSettings } from './groupSettings';\n\n/**\n * Group in the system\n */\nexport interface Group { \n    createdAt?: string;\n    createdBy?: number;\n    groupSettings?: GroupSettings;\n    /**\n     * Members of the group\n     */\n    groupMembers: Array<GroupMember>;\n    id: number;\n    /**\n     * Is default group (not used yet)\n     */\n    isDefault?: boolean;\n    /**\n     * Name of the group\n     */\n    name: string;\n    /**\n     * Is all group for user\n     */\n    isAllGroup: boolean;\n    status: Group.StatusEnum;\n    updatedAt?: string;\n}\nexport namespace Group {\n    export type StatusEnum = 'ACTIVE' | 'ARCHIVED';\n    export const StatusEnum = {\n        ACTIVE: 'ACTIVE' as StatusEnum,\n        ARCHIVED: 'ARCHIVED' as StatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Group member\n */\nexport interface GroupMember { \n    createdAt?: string;\n    /**\n     * Group compound primary key\n     */\n    groupId: number;\n    groupRole: GroupMember.GroupRoleEnum;\n    updatedAt?: string;\n    /**\n     * User compound primary key\n     */\n    userId: number;\n}\nexport namespace GroupMember {\n    export type GroupRoleEnum = 'OWNER' | 'VIEWER' | 'EDITOR';\n    export const GroupRoleEnum = {\n        OWNER: 'OWNER' as GroupRoleEnum,\n        VIEWER: 'VIEWER' as GroupRoleEnum,\n        EDITOR: 'EDITOR' as GroupRoleEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { GroupSettingsWhiteListEmail } from './groupSettingsWhiteListEmail';\nimport { SubjectLineRegex } from './subjectLineRegex';\n\nexport interface GroupSettings { \n    /**\n     * Group settings id\n     */\n    id: number;\n    /**\n     * Group foreign key\n     */\n    groupId: number;\n    /**\n     * Whether email integration is enabled\n     */\n    emailIntegrationEnabled?: boolean;\n    /**\n     * Email to read\n     */\n    emailToRead?: string;\n    /**\n     * Subject line regexes\n     */\n    subjectLineRegexes?: Array<SubjectLineRegex>;\n    /**\n     * Email white list\n     */\n    emailWhiteList?: Array<GroupSettingsWhiteListEmail>;\n    /**\n     * Default receipt status\n     */\n    emailDefaultReceiptStatus?: GroupSettings.EmailDefaultReceiptStatusEnum;\n    /**\n     * User foreign key\n     */\n    emailDefaultReceiptPaidById?: number;\n    createdAt?: string;\n    createdBy?: number;\n    updatedAt?: string;\n}\nexport namespace GroupSettings {\n    export type EmailDefaultReceiptStatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const EmailDefaultReceiptStatusEnum = {\n        OPEN: 'OPEN' as EmailDefaultReceiptStatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as EmailDefaultReceiptStatusEnum,\n        RESOLVED: 'RESOLVED' as EmailDefaultReceiptStatusEnum,\n        DRAFT: 'DRAFT' as EmailDefaultReceiptStatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface GroupSettingsWhiteListEmail { \n    /**\n     * Group settings email id\n     */\n    id: number;\n    /**\n     * Group settings foreign key\n     */\n    groupSettingsId: number;\n    /**\n     * Email to match\n     */\n    email: string;\n    createdAt?: string;\n    createdBy?: number;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Itemized item on a receipt\n */\nexport interface Item { \n    /**\n     * Is taxed (not used)\n     */\n    isTaxed?: boolean;\n    /**\n     * Amount the item costs\n     */\n    amount: string;\n    /**\n     * User foreign key\n     */\n    chargedToUserId: number;\n    createdAt?: string;\n    createdBy?: number;\n    id?: number;\n    /**\n     * Item name\n     */\n    name: string;\n    /**\n     * Receipt foreign key\n     */\n    receiptId: number;\n    status: Item.StatusEnum;\n    updatedAt?: string;\n}\nexport namespace Item {\n    export type StatusEnum = 'OPEN' | 'RESOLVED' | 'DRAFT';\n    export const StatusEnum = {\n        OPEN: 'OPEN' as StatusEnum,\n        RESOLVED: 'RESOLVED' as StatusEnum,\n        DRAFT: 'DRAFT' as StatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type ItemStatus = string;","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface LoginCommand { \n    /**\n     * User's username\n     */\n    username: string;\n    /**\n     * User's password\n     */\n    password: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface MagicFillCommand { \n    /**\n     * Image data\n     */\n    imageData?: Array<number>;\n    /**\n     * Name of file\n     */\n    filename?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type NotificationType = string;","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface PagedData { \n    data: Array<any>;\n    totalCount: number;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface PagedRequestCommand { \n    /**\n     * Page number\n     */\n    page: number;\n    /**\n     * Number of records per page\n     */\n    pageSize: number;\n    /**\n     * field to order on\n     */\n    orderBy?: string;\n    sortDirection?: PagedRequestCommand.SortDirectionEnum;\n}\nexport namespace PagedRequestCommand {\n    export type SortDirectionEnum = 'asc' | 'desc' | '';\n    export const SortDirectionEnum = {\n        Asc: 'asc' as SortDirectionEnum,\n        Desc: 'desc' as SortDirectionEnum,\n        Empty: '' as SortDirectionEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface PagedRequestField { \n    /**\n     * Filter operation\n     */\n    operation: PagedRequestField.OperationEnum;\n    /**\n     * Field value\n     */\n    value: string | number | Array<string> | Array<number>;\n}\nexport namespace PagedRequestField {\n    export type OperationEnum = 'CONTAINS' | 'EQUALS' | 'GREATER_THAN' | 'LESS_THAN';\n    export const OperationEnum = {\n        CONTAINS: 'CONTAINS' as OperationEnum,\n        EQUALS: 'EQUALS' as OperationEnum,\n        GREATERTHAN: 'GREATER_THAN' as OperationEnum,\n        LESSTHAN: 'LESS_THAN' as OperationEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface QuickScanCommand { \n    file: Blob;\n    /**\n     * Group foreign key\n     */\n    groupId: number;\n    /**\n     * User foreign key\n     */\n    paidByUserId: number;\n    /**\n     * Status of quick scanned receipt\n     */\n    status: QuickScanCommand.StatusEnum;\n}\nexport namespace QuickScanCommand {\n    export type StatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const StatusEnum = {\n        OPEN: 'OPEN' as StatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as StatusEnum,\n        RESOLVED: 'RESOLVED' as StatusEnum,\n        DRAFT: 'DRAFT' as StatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { Category } from './category';\nimport { Comment } from './comment';\nimport { FileData } from './fileData';\nimport { Item } from './item';\nimport { Tag } from './tag';\n\n/**\n * Receipt\n */\nexport interface Receipt { \n    /**\n     * Reciept total amount\n     */\n    amount: string;\n    /**\n     * Categories associated to receipt\n     */\n    categories?: Array<Category>;\n    /**\n     * Comments associated to receipt\n     */\n    comments?: Array<Comment>;\n    createdAt?: string;\n    createdBy?: number;\n    /**\n     * Receipt date\n     */\n    date: string;\n    /**\n     * Group foreign key\n     */\n    groupId: number;\n    id: number;\n    /**\n     * Files associated to receipt\n     */\n    imageFiles?: Array<FileData>;\n    /**\n     * Receipt name\n     */\n    name: string;\n    /**\n     * User paid foreign key\n     */\n    paidByUserId: number;\n    /**\n     * Items associated to receipt\n     */\n    receiptItems?: Array<Item>;\n    /**\n     * Date resolved\n     */\n    resolvedDate?: string;\n    status: Receipt.StatusEnum;\n    /**\n     * Tags associated to receipt\n     */\n    tags?: Array<Tag>;\n    updatedAt?: string;\n    /**\n     * Created by string, which is anything that is not a user\n     */\n    createdByString?: string;\n}\nexport namespace Receipt {\n    export type StatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const StatusEnum = {\n        OPEN: 'OPEN' as StatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as StatusEnum,\n        RESOLVED: 'RESOLVED' as StatusEnum,\n        DRAFT: 'DRAFT' as StatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface ReceiptFileUploadCommand { \n    file: Blob;\n    /**\n     * Receipt foreign key\n     */\n    receiptId: number;\n    /**\n     * Base64 encoded image for file types that aren't viewable natively in the browser, such as PDFs\n     */\n    encodedImage?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface ReceiptImageConvertToJpgBody { \n    /**\n     * Base64 encoded image\n     */\n    file: Blob;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface ReceiptImageMagicFillBody { \n    file?: Blob;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { ReceiptPagedRequestFilter } from './receiptPagedRequestFilter';\n\nexport interface ReceiptPagedRequestCommand { \n    /**\n     * Page number\n     */\n    page: number;\n    /**\n     * Number of records per page\n     */\n    pageSize: number;\n    /**\n     * field to order on\n     */\n    orderBy?: string;\n    sortDirection?: ReceiptPagedRequestCommand.SortDirectionEnum;\n    filter?: ReceiptPagedRequestFilter;\n}\nexport namespace ReceiptPagedRequestCommand {\n    export type SortDirectionEnum = 'asc' | 'desc' | '';\n    export const SortDirectionEnum = {\n        Asc: 'asc' as SortDirectionEnum,\n        Desc: 'desc' as SortDirectionEnum,\n        Empty: '' as SortDirectionEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Command to reset user's password profile\n */\nexport interface ResetPasswordCommand { \n    /**\n     * User's new password\n     */\n    password: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SearchResult { \n    id: number;\n    name: string;\n    type: string;\n    groupId: number;\n    date: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SignUpCommand { \n    /**\n     * User's username\n     */\n    username: string;\n    /**\n     * User's password\n     */\n    password: string;\n    /**\n     * User's displayname\n     */\n    displayName?: string;\n    /**\n     * Whether the user is a dummy user\n     */\n    isDummyUser?: boolean;\n    /**\n     * User's role\n     */\n    userRole?: boolean;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SubjectLineRegex { \n    /**\n     * Subject line regex id\n     */\n    id: number;\n    /**\n     * Group settings foreign key\n     */\n    groupSettingsId: number;\n    /**\n     * Regex to match subject line\n     */\n    regex: string;\n    createdAt?: string;\n    createdBy?: number;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Tag to relate receipts to\n */\nexport interface Tag { \n    createdAt?: string;\n    createdBy?: number;\n    id?: number;\n    /**\n     * Tag name\n     */\n    name: string;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Tag to relate receipts to\n */\nexport interface TagView { \n    createdAt?: string;\n    createdBy?: number;\n    id: number;\n    /**\n     * Name of the tag\n     */\n    name: string;\n    /**\n     * Description of the tag\n     */\n    description?: string;\n    updatedAt?: string;\n    /**\n     * Number of receipts associated with this tag\n     */\n    numberOfReceipts: number;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { GroupSettingsWhiteListEmail } from './groupSettingsWhiteListEmail';\nimport { SubjectLineRegex } from './subjectLineRegex';\n\nexport interface UpdateGroupSettingsCommand { \n    /**\n     * Whether email integration is enabled\n     */\n    emailIntegrationEnabled?: boolean;\n    /**\n     * Email to read\n     */\n    emailToRead: string;\n    /**\n     * Subject line regexes\n     */\n    subjectLineRegexes: Array<SubjectLineRegex>;\n    /**\n     * Email white list\n     */\n    emailWhiteList: Array<GroupSettingsWhiteListEmail>;\n    /**\n     * Default receipt status\n     */\n    emailDefaultReceiptStatus?: UpdateGroupSettingsCommand.EmailDefaultReceiptStatusEnum;\n    /**\n     * User foreign key\n     */\n    emailDefaultReceiptPaidById?: number;\n}\nexport namespace UpdateGroupSettingsCommand {\n    export type EmailDefaultReceiptStatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const EmailDefaultReceiptStatusEnum = {\n        OPEN: 'OPEN' as EmailDefaultReceiptStatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as EmailDefaultReceiptStatusEnum,\n        RESOLVED: 'RESOLVED' as EmailDefaultReceiptStatusEnum,\n        DRAFT: 'DRAFT' as EmailDefaultReceiptStatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Command to update user's profile\n */\nexport interface UpdateProfileCommand { \n    /**\n     * User's displayName\n     */\n    displayName: string;\n    /**\n     * Color of default avatar\n     */\n    defaultAvatarColor: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Tag to relate receipts to\n */\nexport interface UpsertTagCommand { \n    /**\n     * Tag name\n     */\n    name: string;\n    /**\n     * Tag description\n     */\n    description?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface UpsertWidgetCommand { \n    /**\n     * Widget name\n     */\n    name?: string;\n    /**\n     * Type of widget\n     */\n    widgetType: UpsertWidgetCommand.WidgetTypeEnum;\n    /**\n     * Configuration of widget\n     */\n    configuration?: { [key: string]: any; };\n}\nexport namespace UpsertWidgetCommand {\n    export type WidgetTypeEnum = 'GROUP_SUMMARY' | 'FILTERED_RECEIPTS';\n    export const WidgetTypeEnum = {\n        GROUPSUMMARY: 'GROUP_SUMMARY' as WidgetTypeEnum,\n        FILTEREDRECEIPTS: 'FILTERED_RECEIPTS' as WidgetTypeEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * User in the system\n */\nexport interface User { \n    /**\n     * User's password\n     */\n    password?: string;\n    /**\n     * User's username used to login\n     */\n    username: string;\n    createdAt?: string;\n    createdBy?: number;\n    /**\n     * Default avatar color\n     */\n    defaultAvatarColor?: string;\n    /**\n     * Display name\n     */\n    displayName: string;\n    id: number;\n    /**\n     * Is dummy user\n     */\n    isDummyUser: boolean;\n    updatedAt?: string;\n    /**\n     * User's role\n     */\n    userRole: User.UserRoleEnum;\n}\nexport namespace User {\n    export type UserRoleEnum = 'ADMIN' | 'USER';\n    export const UserRoleEnum = {\n        ADMIN: 'ADMIN' as UserRoleEnum,\n        USER: 'USER' as UserRoleEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface UserPreferences { \n    /**\n     * User preferences id\n     */\n    id: number;\n    /**\n     * User foreign key\n     */\n    userId: number;\n    /**\n     * Group foreign key\n     */\n    quickScanDefaultGroupId?: number;\n    /**\n     * User foreign key\n     */\n    quickScanDefaultPaidById?: number;\n    /**\n     * Default quick scan status\n     */\n    quickScanDefaultStatus?: UserPreferences.QuickScanDefaultStatusEnum;\n}\nexport namespace UserPreferences {\n    export type QuickScanDefaultStatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const QuickScanDefaultStatusEnum = {\n        OPEN: 'OPEN' as QuickScanDefaultStatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as QuickScanDefaultStatusEnum,\n        RESOLVED: 'RESOLVED' as QuickScanDefaultStatusEnum,\n        DRAFT: 'DRAFT' as QuickScanDefaultStatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type UserRole = string;","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * User in the system\n */\nexport interface UserView { \n    /**\n     * User's username used to login\n     */\n    username: string;\n    createdAt?: string;\n    createdBy?: number;\n    /**\n     * Default avatar color\n     */\n    defaultAvatarColor?: string;\n    /**\n     * Display name\n     */\n    displayName: string;\n    id: number;\n    /**\n     * Is dummy user\n     */\n    isDummyUser: boolean;\n    updatedAt?: string;\n    /**\n     * User's role\n     */\n    userRole: UserView.UserRoleEnum;\n}\nexport namespace UserView {\n    export type UserRoleEnum = 'ADMIN' | 'USER';\n    export const UserRoleEnum = {\n        ADMIN: 'ADMIN' as UserRoleEnum,\n        USER: 'USER' as UserRoleEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Widget related to a user's dashboard\n */\nexport interface Widget { \n    createdAt?: string;\n    createdBy?: number;\n    id: number;\n    /**\n     * Widget name\n     */\n    name?: string;\n    /**\n     * Dashboard foreign key\n     */\n    dashboardId: number;\n    updatedAt?: string;\n    /**\n     * Type of widget\n     */\n    widgetType?: Widget.WidgetTypeEnum;\n    /**\n     * Configuration of widget\n     */\n    configuration?: { [key: string]: any; };\n}\nexport namespace Widget {\n    export type WidgetTypeEnum = 'GROUP_SUMMARY' | 'FILTERED_RECEIPTS';\n    export const WidgetTypeEnum = {\n        GROUPSUMMARY: 'GROUP_SUMMARY' as WidgetTypeEnum,\n        FILTEREDRECEIPTS: 'FILTERED_RECEIPTS' as WidgetTypeEnum\n    };\n}","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { AuthService } from './api/auth.service';\nimport { CategoryService } from './api/category.service';\nimport { CommentService } from './api/comment.service';\nimport { DashboardService } from './api/dashboard.service';\nimport { FeatureConfigService } from './api/featureConfig.service';\nimport { GroupsService } from './api/groups.service';\nimport { NotificationsService } from './api/notifications.service';\nimport { ReceiptService } from './api/receipt.service';\nimport { ReceiptImageService } from './api/receiptImage.service';\nimport { SearchService } from './api/search.service';\nimport { TagService } from './api/tag.service';\nimport { UserService } from './api/user.service';\nimport { UserPreferencesService } from './api/userPreferences.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    AuthService,\n    CategoryService,\n    CommentService,\n    DashboardService,\n    FeatureConfigService,\n    GroupsService,\n    NotificationsService,\n    ReceiptService,\n    ReceiptImageService,\n    SearchService,\n    TagService,\n    UserService,\n    UserPreferencesService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i2.Configuration"],"mappings":"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"}
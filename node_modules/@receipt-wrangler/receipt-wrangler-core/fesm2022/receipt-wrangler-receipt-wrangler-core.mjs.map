{"version":3,"file":"receipt-wrangler-receipt-wrangler-core.mjs","sources":["../../projects/core/src/lib/animations/fade.animation.ts","../../projects/core/src/lib/api/variables.ts","../../projects/core/src/lib/api/configuration.ts","../../projects/core/src/lib/api/api/auth.service.ts","../../projects/core/src/lib/api/api/category.service.ts","../../projects/core/src/lib/api/api/comment.service.ts","../../projects/core/src/lib/api/api/dashboard.service.ts","../../projects/core/src/lib/api/api/featureConfig.service.ts","../../projects/core/src/lib/api/api/groups.service.ts","../../projects/core/src/lib/api/api/notifications.service.ts","../../projects/core/src/lib/api/encoder.ts","../../projects/core/src/lib/api/api/receipt.service.ts","../../projects/core/src/lib/api/api/receiptImage.service.ts","../../projects/core/src/lib/api/api/search.service.ts","../../projects/core/src/lib/api/api/tag.service.ts","../../projects/core/src/lib/api/api/user.service.ts","../../projects/core/src/lib/api/api/userPreferences.service.ts","../../projects/core/src/lib/api/api/api.ts","../../projects/core/src/lib/api/model/baseModel.ts","../../projects/core/src/lib/api/model/bulkStatusUpdateCommand.ts","../../projects/core/src/lib/api/model/category.ts","../../projects/core/src/lib/api/model/categoryView.ts","../../projects/core/src/lib/api/model/comment.ts","../../projects/core/src/lib/api/model/encodedImage.ts","../../projects/core/src/lib/api/model/featureConfig.ts","../../projects/core/src/lib/api/model/fileData.ts","../../projects/core/src/lib/api/model/fileDataView.ts","../../projects/core/src/lib/api/model/group.ts","../../projects/core/src/lib/api/model/groupMember.ts","../../projects/core/src/lib/api/model/groupSettings.ts","../../projects/core/src/lib/api/model/groupSettingsWhiteListEmail.ts","../../projects/core/src/lib/api/model/item.ts","../../projects/core/src/lib/api/model/itemStatus.ts","../../projects/core/src/lib/api/model/loginCommand.ts","../../projects/core/src/lib/api/model/magicFillCommand.ts","../../projects/core/src/lib/api/model/notificationType.ts","../../projects/core/src/lib/api/model/pagedData.ts","../../projects/core/src/lib/api/model/pagedRequestCommand.ts","../../projects/core/src/lib/api/model/pagedRequestField.ts","../../projects/core/src/lib/api/model/quickScanCommand.ts","../../projects/core/src/lib/api/model/receipt.ts","../../projects/core/src/lib/api/model/receiptFileUploadCommand.ts","../../projects/core/src/lib/api/model/receiptImageConvertToJpgBody.ts","../../projects/core/src/lib/api/model/receiptImageMagicFillBody.ts","../../projects/core/src/lib/api/model/receiptPagedRequestCommand.ts","../../projects/core/src/lib/api/model/resetPasswordCommand.ts","../../projects/core/src/lib/api/model/searchResult.ts","../../projects/core/src/lib/api/model/signUpCommand.ts","../../projects/core/src/lib/api/model/subjectLineRegex.ts","../../projects/core/src/lib/api/model/tag.ts","../../projects/core/src/lib/api/model/tagView.ts","../../projects/core/src/lib/api/model/updateGroupSettingsCommand.ts","../../projects/core/src/lib/api/model/updateProfileCommand.ts","../../projects/core/src/lib/api/model/upsertTagCommand.ts","../../projects/core/src/lib/api/model/upsertWidgetCommand.ts","../../projects/core/src/lib/api/model/user.ts","../../projects/core/src/lib/api/model/userPreferences.ts","../../projects/core/src/lib/api/model/userRole.ts","../../projects/core/src/lib/api/model/userView.ts","../../projects/core/src/lib/api/model/widget.ts","../../projects/core/src/lib/api/api.module.ts","../../projects/core/src/lib/store/group.state.actions.ts","../../projects/core/src/lib/store/group.state.ts","../../projects/core/src/lib/validators/user-validators.ts","../../projects/core/src/lib/store/feature-config.state.actions.ts","../../projects/core/src/lib/store/user.state.actions.ts","../../projects/core/src/lib/store/auth.state.actions.ts","../../projects/core/src/lib/services/claims.service.ts","../../projects/core/src/lib/store/auth.state.ts","../../projects/core/src/lib/store/feature-config.state.ts","../../projects/core/src/lib/store/user.state.ts","../../projects/core/src/lib/services/app-init.service.ts","../../projects/core/src/lib/constants/snackbar.constant.ts","../../projects/core/src/lib/services/snackbar.service.ts","../../projects/core/src/lib/auth/sign-up/auth-form.util.ts","../../projects/core/src/lib/button/button/button.component.ts","../../projects/core/src/lib/button/button/button.component.html","../../projects/core/src/lib/directives/feature.directive.ts","../../projects/core/src/lib/base-input/base-input/base-input.component.ts","../../projects/core/src/lib/base-input/base-input/base-input.component.html","../../projects/core/src/lib/input/input/input.component.ts","../../projects/core/src/lib/input/input/input.component.html","../../projects/core/src/lib/pipes/form-get.pipe.ts","../../projects/core/src/lib/auth/sign-up/auth-form.component.ts","../../projects/core/src/lib/auth/sign-up/auth-form.component.html","../../projects/core/src/lib/guards/feature.guard.ts","../../projects/core/src/lib/auth/auth-routing.module.ts","../../projects/core/src/lib/button/button.module.ts","../../projects/core/src/lib/directives/role.directive.ts","../../projects/core/src/lib/directives/directives.module.ts","../../projects/core/src/lib/input/input.module.ts","../../projects/core/src/lib/pipes/pipes.module.ts","../../projects/core/src/lib/auth/auth.module.ts","../../projects/core/src/lib/base-input/base-input.module.ts","../../projects/core/src/lib/guards/auth.guard.ts","../../projects/core/src/public-api.ts","../../projects/core/src/receipt-wrangler-receipt-wrangler-core.ts"],"sourcesContent":["import {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\n\nexport const fadeInOut = [\n  trigger('fadeInOut', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        visibility: 'hidden',\n      })\n    ),\n    transition(':enter', [\n      animate(\n        '0.2s',\n        style({\n          opacity: 1,\n          visibility: 'visible',\n        })\n      ),\n    ]),\n    transition(':leave', [\n      animate(\n        '0.2s',\n        style({\n          opacity: 0,\n          visibility: 'hidden',\n        })\n      ),\n    ]),\n  ]),\n];\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LoginCommand } from '../model/loginCommand';\nimport { SignUpCommand } from '../model/signUpCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AuthService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get fresh tokens\n     * This will get a fresh token pair for the user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNewRefreshToken(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNewRefreshToken(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNewRefreshToken(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNewRefreshToken(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('post',`${this.basePath}/token/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Login\n     * This will log a user into the system\n     * @param body Login data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public login(body: LoginCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public login(body: LoginCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public login(body: LoginCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public login(body: LoginCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling login.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/login/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logout\n     * This will log a user out of the system and revoke their token [SYSTEM USER]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public logout(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public logout(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public logout(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public logout(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('post',`${this.basePath}/logout/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Signs up\n     * This will sign a user up for the system\n     * @param body Sign up data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public signUp(body: SignUpCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public signUp(body: SignUpCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public signUp(body: SignUpCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public signUp(body: SignUpCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling signUp.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/signUp`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Category } from '../model/category';\nimport { PagedData } from '../model/pagedData';\nimport { PagedRequestCommand } from '../model/pagedRequestCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CategoryService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create category\n     * This will create a category\n     * @param body Category to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createCategory(body: Category, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createCategory(body: Category, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createCategory(body: Category, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createCategory(body: Category, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/category/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete category\n     * This will delete a category by id\n     * @param categoryId Category Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteCategory(categoryId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteCategory(categoryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteCategory(categoryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteCategory(categoryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (categoryId === null || categoryId === undefined) {\n            throw new Error('Required parameter categoryId was null or undefined when calling deleteCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/category/${encodeURIComponent(String(categoryId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all categories\n     * This will return all categories in the system\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllCategories(observe?: 'body', reportProgress?: boolean): Observable<Array<Category>>;\n    public getAllCategories(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Category>>>;\n    public getAllCategories(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Category>>>;\n    public getAllCategories(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Category>>('get',`${this.basePath}/category/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get category count by name\n     * This will return a count of categories with the same name\n     * @param categoryName Category name to get count of\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCategoryCountByName(categoryName: string, observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getCategoryCountByName(categoryName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getCategoryCountByName(categoryName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getCategoryCountByName(categoryName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (categoryName === null || categoryName === undefined) {\n            throw new Error('Required parameter categoryName was null or undefined when calling getCategoryCountByName.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<number>('get',`${this.basePath}/category/${encodeURIComponent(String(categoryName))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get paged categories\n     * This will return paged categories\n     * @param body Paging and sorting data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPagedCategories(body: PagedRequestCommand, observe?: 'body', reportProgress?: boolean): Observable<PagedData>;\n    public getPagedCategories(body: PagedRequestCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedData>>;\n    public getPagedCategories(body: PagedRequestCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedData>>;\n    public getPagedCategories(body: PagedRequestCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling getPagedCategories.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<PagedData>('post',`${this.basePath}/category/getPagedCategories`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update category\n     * This will update a category\n     * @param body Category to update\n     * @param categoryId Category Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCategory(body: Category, categoryId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateCategory(body: Category, categoryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateCategory(body: Category, categoryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateCategory(body: Category, categoryId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateCategory.');\n        }\n\n        if (categoryId === null || categoryId === undefined) {\n            throw new Error('Required parameter categoryId was null or undefined when calling updateCategory.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/category/${encodeURIComponent(String(categoryId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Comment } from '../model/comment';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CommentService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add comment\n     * This will add a comment to a receipt, [SYSTEM USER]\n     * @param body Comment to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addComment(body: Comment, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public addComment(body: Comment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public addComment(body: Comment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public addComment(body: Comment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling addComment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/comment/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete comment\n     * This will delete a comment by id [SYSTEM User]\n     * @param commentId Comment Id to delete\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteComment(commentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteComment(commentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteComment(commentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteComment(commentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (commentId === null || commentId === undefined) {\n            throw new Error('Required parameter commentId was null or undefined when calling deleteComment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/comment/${encodeURIComponent(String(commentId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Dashboard } from '../model/dashboard';\nimport { UpsertDashboardCommand } from '../model/upsertDashboardCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DashboardService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create dashboard\n     * This will create a dashboard [SYSTEM USER]\n     * @param body Dashboard\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createDashboard(body: UpsertDashboardCommand, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;\n    public createDashboard(body: UpsertDashboardCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;\n    public createDashboard(body: UpsertDashboardCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;\n    public createDashboard(body: UpsertDashboardCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createDashboard.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Dashboard>('post',`${this.basePath}/dashboard/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete dashboard\n     * This will delete a dashboard by id\n     * @param dashboardId Id of dashboard to operate on\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteDashboard(dashboardId: number, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;\n    public deleteDashboard(dashboardId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;\n    public deleteDashboard(dashboardId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;\n    public deleteDashboard(dashboardId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (dashboardId === null || dashboardId === undefined) {\n            throw new Error('Required parameter dashboardId was null or undefined when calling deleteDashboard.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Dashboard>('delete',`${this.basePath}/dashboard/${encodeURIComponent(String(dashboardId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get dashboards for a user by group id\n     * This will get a dashboards for a user by group id\n     * @param groupId Id of group to get dashboard for\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDashboardsForUserByGroupId(groupId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Dashboard>>;\n    public getDashboardsForUserByGroupId(groupId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Dashboard>>>;\n    public getDashboardsForUserByGroupId(groupId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Dashboard>>>;\n    public getDashboardsForUserByGroupId(groupId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling getDashboardsForUserByGroupId.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Dashboard>>('get',`${this.basePath}/dashboard/${encodeURIComponent(String(groupId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update dashboard\n     * This will update a dashboard\n     * @param body Dashboard to update\n     * @param dashboardId Id of dashboard to operate on\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;\n    public updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;\n    public updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;\n    public updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateDashboard.');\n        }\n\n        if (dashboardId === null || dashboardId === undefined) {\n            throw new Error('Required parameter dashboardId was null or undefined when calling updateDashboard.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Dashboard>('put',`${this.basePath}/dashboard/${encodeURIComponent(String(dashboardId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { FeatureConfig } from '../model/featureConfig';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class FeatureConfigService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get feature config\n     * This will get the server&#x27;s feature config\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getFeatureConfig(observe?: 'body', reportProgress?: boolean): Observable<FeatureConfig>;\n    public getFeatureConfig(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FeatureConfig>>;\n    public getFeatureConfig(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FeatureConfig>>;\n    public getFeatureConfig(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FeatureConfig>('get',`${this.basePath}/featureConfig`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Group } from '../model/group';\nimport { GroupSettings } from '../model/groupSettings';\nimport { UpdateGroupSettingsCommand } from '../model/updateGroupSettingsCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class GroupsService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create group\n     * This will create a group\n     * @param body Group to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createGroup(body: Group, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createGroup(body: Group, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createGroup(body: Group, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createGroup(body: Group, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createGroup.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/group`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete group\n     * This will delete a group by id\n     * @param groupId Group Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteGroup(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteGroup(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteGroup(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteGroup(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling deleteGroup.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/group/${encodeURIComponent(String(groupId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Gets a group by Id\n     * This will get a group by Id\n     * @param groupId Group Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGroupById(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getGroupById(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getGroupById(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getGroupById(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling getGroupById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/group/${encodeURIComponent(String(groupId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get groups for user\n     * This will get groups for the currently logged in user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGroupsForuser(observe?: 'body', reportProgress?: boolean): Observable<Array<Group>>;\n    public getGroupsForuser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Group>>>;\n    public getGroupsForuser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Group>>>;\n    public getGroupsForuser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Group>>('get',`${this.basePath}/group`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Poll group email\n     * This will poll the group email for new receipts and add them to the group\n     * @param groupId Group Id to poll\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pollGroupEmail(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public pollGroupEmail(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public pollGroupEmail(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public pollGroupEmail(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling pollGroupEmail.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('post',`${this.basePath}/group/${encodeURIComponent(String(groupId))}/pollGroupEmail`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a group\n     * This will update a group\n     * @param body Group to update\n     * @param groupId Group Id to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateGroup(body: Group, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateGroup(body: Group, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateGroup(body: Group, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateGroup(body: Group, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateGroup.');\n        }\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling updateGroup.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/group/${encodeURIComponent(String(groupId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update group settings\n     * This will update the group settings for a group\n     * @param body Group settings to update\n     * @param groupId Group Id to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<GroupSettings>;\n    public updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupSettings>>;\n    public updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupSettings>>;\n    public updateGroupSettings(body: UpdateGroupSettingsCommand, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateGroupSettings.');\n        }\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling updateGroupSettings.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<GroupSettings>('put',`${this.basePath}/group/${encodeURIComponent(String(groupId))}/groupSettings`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Notification } from '../model/notification';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class NotificationsService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete all notifications for user\n     * This deletes all notifications for a user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteAllNotificationsForUser(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteAllNotificationsForUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteAllNotificationsForUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteAllNotificationsForUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/notifications/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete notification by id\n     * This deletes a notification by id\n     * @param notificationId Notification Id to delete\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteNotificationById(notificationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteNotificationById(notificationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteNotificationById(notificationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteNotificationById(notificationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (notificationId === null || notificationId === undefined) {\n            throw new Error('Required parameter notificationId was null or undefined when calling deleteNotificationById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/notifications/${encodeURIComponent(String(notificationId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Notification count\n     * This will get the notification count for the currently logged in user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNotificationCount(observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getNotificationCount(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getNotificationCount(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getNotificationCount(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<number>('get',`${this.basePath}/notifications/notificationCount`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all user notifications\n     * This will get all the notifications for the currently logged in user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNotificationsForuser(observe?: 'body', reportProgress?: boolean): Observable<Array<Notification>>;\n    public getNotificationsForuser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Notification>>>;\n    public getNotificationsForuser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Notification>>>;\n    public getNotificationsForuser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Notification>>('get',`${this.basePath}/notifications/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n * CustomHttpUrlEncodingCodec\n * Fix plus sign (+) not encoding, so sent as blank space\n * See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n */\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n  override encodeKey(k: string): string {\n    k = super.encodeKey(k);\n    return k.replace(/\\+/gi, '%2B');\n  }\n  override encodeValue(v: string): string {\n    v = super.encodeValue(v);\n    return v.replace(/\\+/gi, '%2B');\n  }\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { BulkStatusUpdateCommand } from '../model/bulkStatusUpdateCommand';\nimport { Receipt } from '../model/receipt';\nimport { ReceiptPagedRequestCommand } from '../model/receiptPagedRequestCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReceiptService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Bulk receipt status update\n     * This will bulk update receipt statuses with the option of adding a comment to each [SYSTEM USER]\n     * @param body Bulk status data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'body', reportProgress?: boolean): Observable<Array<Receipt>>;\n    public bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Receipt>>>;\n    public bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Receipt>>>;\n    public bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling bulkReceiptStatusUpdate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Array<Receipt>>('post',`${this.basePath}/receipt/bulkStatusUpdate`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create receipt\n     * This will create a receipt [SYSTEM USER]\n     * @param body Receipt to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createReceipt(body: Receipt, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createReceipt(body: Receipt, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createReceipt(body: Receipt, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createReceipt(body: Receipt, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createReceipt.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/receipt/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete receipt\n     * This will delete a receipt by id [SYSTEM USER]\n     * @param receiptId Id of receipt to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteReceiptById(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteReceiptById(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteReceiptById(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteReceiptById(receiptId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling deleteReceiptById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/receipt/${encodeURIComponent(String(receiptId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Duplicate receipt\n     * This will duplicate a receipt [SYSTEM USER]\n     * @param receiptId Id of receipt to duplicate\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public duplicateReceipt(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public duplicateReceipt(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public duplicateReceipt(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public duplicateReceipt(receiptId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling duplicateReceipt.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('post',`${this.basePath}/receipt/${encodeURIComponent(String(receiptId))}/duplicate`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get receipt\n     * This will get a receipt by receipt id [SYSTEM USER]\n     * @param receiptId Id of receipt to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReceiptById(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;\n    public getReceiptById(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;\n    public getReceiptById(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;\n    public getReceiptById(receiptId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling getReceiptById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Receipt>('get',`${this.basePath}/receipt/${encodeURIComponent(String(receiptId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Gets receipts\n     * This will return receipts with the option to sort and filter [SYSTEM USER]\n     * @param body \n     * @param groupId Get all receipts that belong to groupId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling getReceiptsForGroup.');\n        }\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling getReceiptsForGroup.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/receipt/group/${encodeURIComponent(String(groupId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Has access to receipt\n     * This will return whether or not the currently logged in user has access to the receipt\n     * @param receiptId \n     * @param groupRole Role required to have access to receipt\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public hasAccessToReceipt(receiptId: number, groupRole?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling hasAccessToReceipt.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (receiptId !== undefined && receiptId !== null) {\n            queryParameters = queryParameters.set('receiptId', <any>receiptId);\n        }\n        if (groupRole !== undefined && groupRole !== null) {\n            queryParameters = queryParameters.set('groupRole', <any>groupRole);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/receipt/hasAccess`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Quick scan a receipt\n     * This take an image and use magic fill to fill and save the receipt [SYSTEM USER]\n     * @param file \n     * @param groupId \n     * @param paidByUserId \n     * @param status \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;\n    public quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;\n    public quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;\n    public quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling quickScanReceipt.');\n        }\n\n        if (groupId === null || groupId === undefined) {\n            throw new Error('Required parameter groupId was null or undefined when calling quickScanReceipt.');\n        }\n\n        if (paidByUserId === null || paidByUserId === undefined) {\n            throw new Error('Required parameter paidByUserId was null or undefined when calling quickScanReceipt.');\n        }\n\n        if (status === null || status === undefined) {\n            throw new Error('Required parameter status was null or undefined when calling quickScanReceipt.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) as any || formParams;\n        }\n        if (groupId !== undefined) {\n            formParams = formParams.append('groupId', <any>groupId) as any || formParams;\n        }\n        if (paidByUserId !== undefined) {\n            formParams = formParams.append('paidByUserId', <any>paidByUserId) as any || formParams;\n        }\n        if (status !== undefined) {\n            formParams = formParams.append('status', <any>status) as any || formParams;\n        }\n\n        return this.httpClient.request<Receipt>('post',`${this.basePath}/receipt/quickScan`,\n            {\n                body: convertFormParamsToString ? formParams.toString() : formParams,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update receipt\n     * This will update a receipt by receipt id [SYSTEM USER]\n     * @param body Receipt to update\n     * @param receiptId Id of receipt to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateReceipt(body: Receipt, receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateReceipt(body: Receipt, receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateReceipt(body: Receipt, receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateReceipt(body: Receipt, receiptId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateReceipt.');\n        }\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling updateReceipt.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/receipt/${encodeURIComponent(String(receiptId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EncodedImage } from '../model/encodedImage';\nimport { FileDataView } from '../model/fileDataView';\nimport { Receipt } from '../model/receipt';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReceiptImageService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Converts a receipt image to jpg\n     * This will convert a receipt image to jpg, [SYSTEM USER]\n     * @param file \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public convertToJpgForm(file: Blob, observe?: 'body', reportProgress?: boolean): Observable<EncodedImage>;\n    public convertToJpgForm(file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EncodedImage>>;\n    public convertToJpgForm(file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EncodedImage>>;\n    public convertToJpgForm(file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling convertToJpg.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) as any || formParams;\n        }\n\n        return this.httpClient.request<EncodedImage>('post',`${this.basePath}/receiptImage/convertToJpg`,\n            {\n                body: convertFormParamsToString ? formParams.toString() : formParams,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete receipt image\n     * This will delete a receipt image by id [SYSTEM USER]\n     * @param receiptImageId Id of receipt image to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteReceiptImageById(receiptImageId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteReceiptImageById(receiptImageId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteReceiptImageById(receiptImageId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteReceiptImageById(receiptImageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptImageId === null || receiptImageId === undefined) {\n            throw new Error('Required parameter receiptImageId was null or undefined when calling deleteReceiptImageById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/receiptImage/${encodeURIComponent(String(receiptImageId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get receipt image\n     * This will get a receipt image by id, [SYSTEM USER]\n     * @param receiptImageId Id of receipt image to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReceiptImageById(receiptImageId: number, observe?: 'body', reportProgress?: boolean): Observable<FileDataView>;\n    public getReceiptImageById(receiptImageId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileDataView>>;\n    public getReceiptImageById(receiptImageId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileDataView>>;\n    public getReceiptImageById(receiptImageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (receiptImageId === null || receiptImageId === undefined) {\n            throw new Error('Required parameter receiptImageId was null or undefined when calling getReceiptImageById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FileDataView>('get',`${this.basePath}/receiptImage/${encodeURIComponent(String(receiptImageId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Reads a receipt image and returns the parsed results\n     * This will parse and read a receipt image, [SYSTEM USER]\n     * @param file \n     * @param receiptImageId Id of receipt image to perform magic fill on\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;\n    public magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;\n    public magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;\n    public magicFillReceiptForm(file?: Blob, receiptImageId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (receiptImageId !== undefined && receiptImageId !== null) {\n            queryParameters = queryParameters.set('receiptImageId', <any>receiptImageId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) as any || formParams;\n        }\n\n        return this.httpClient.request<Receipt>('post',`${this.basePath}/receiptImage/magicFill`,\n            {\n                body: convertFormParamsToString ? formParams.toString() : formParams,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Uploads a receipt image\n     * This will upload a receipt image, [SYSTEM USER]\n     * @param file \n     * @param receiptId \n     * @param encodedImage \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'body', reportProgress?: boolean): Observable<FileDataView>;\n    public uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileDataView>>;\n    public uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileDataView>>;\n    public uploadReceiptImageForm(file: Blob, receiptId: number, encodedImage: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling uploadReceiptImage.');\n        }\n\n        if (receiptId === null || receiptId === undefined) {\n            throw new Error('Required parameter receiptId was null or undefined when calling uploadReceiptImage.');\n        }\n\n        if (encodedImage === null || encodedImage === undefined) {\n            throw new Error('Required parameter encodedImage was null or undefined when calling uploadReceiptImage.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'multipart/form-data'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) as any || formParams;\n        }\n        if (receiptId !== undefined) {\n            formParams = formParams.append('receiptId', <any>receiptId) as any || formParams;\n        }\n        if (encodedImage !== undefined) {\n            formParams = formParams.append('encodedImage', <any>encodedImage) as any || formParams;\n        }\n\n        return this.httpClient.request<FileDataView>('post',`${this.basePath}/receiptImage/`,\n            {\n                body: convertFormParamsToString ? formParams.toString() : formParams,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { SearchResult } from '../model/searchResult';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class SearchService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Receipt Search\n     * This will search for receipts based on a search term\n     * @param searchTerm search term\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public receiptSearch(searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SearchResult>>;\n    public receiptSearch(searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SearchResult>>>;\n    public receiptSearch(searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SearchResult>>>;\n    public receiptSearch(searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (searchTerm === null || searchTerm === undefined) {\n            throw new Error('Required parameter searchTerm was null or undefined when calling receiptSearch.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (searchTerm !== undefined && searchTerm !== null) {\n            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<SearchResult>>('get',`${this.basePath}/search/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { PagedData } from '../model/pagedData';\nimport { PagedRequestCommand } from '../model/pagedRequestCommand';\nimport { Tag } from '../model/tag';\nimport { UpsertTagCommand } from '../model/upsertTagCommand';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class TagService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create tag\n     * This will create a tag\n     * @param body Tag to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createTag(body: UpsertTagCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createTag(body: UpsertTagCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createTag(body: UpsertTagCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createTag(body: UpsertTagCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createTag.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/tag/`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete tag\n     * This will delete a tag by id\n     * @param tagId Id of tag to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteTag(tagId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteTag(tagId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteTag(tagId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteTag(tagId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (tagId === null || tagId === undefined) {\n            throw new Error('Required parameter tagId was null or undefined when calling deleteTag.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/tag/${encodeURIComponent(String(tagId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all tags\n     * This will return all tags in the system\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllTags(observe?: 'body', reportProgress?: boolean): Observable<Array<Tag>>;\n    public getAllTags(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tag>>>;\n    public getAllTags(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tag>>>;\n    public getAllTags(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Tag>>('get',`${this.basePath}/tag/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get paged tags\n     * This will return paged tags\n     * @param body Paging and sorting data\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPagedTags(body: PagedRequestCommand, observe?: 'body', reportProgress?: boolean): Observable<PagedData>;\n    public getPagedTags(body: PagedRequestCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedData>>;\n    public getPagedTags(body: PagedRequestCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedData>>;\n    public getPagedTags(body: PagedRequestCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling getPagedTags.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<PagedData>('post',`${this.basePath}/tag/getPagedTags`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get tag count by name\n     * This will count of names with the same name\n     * @param tagName Tag name to get count of\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTagCountByName(tagName: string, observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getTagCountByName(tagName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getTagCountByName(tagName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getTagCountByName(tagName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (tagName === null || tagName === undefined) {\n            throw new Error('Required parameter tagName was null or undefined when calling getTagCountByName.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<number>('get',`${this.basePath}/tag/${encodeURIComponent(String(tagName))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update tag\n     * This will update a tag\n     * @param body Tag to update\n     * @param tagId Id of tag to get\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateTag(body: UpsertTagCommand, tagId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateTag(body: UpsertTagCommand, tagId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateTag(body: UpsertTagCommand, tagId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateTag(body: UpsertTagCommand, tagId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateTag.');\n        }\n\n        if (tagId === null || tagId === undefined) {\n            throw new Error('Required parameter tagId was null or undefined when calling updateTag.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/tag/${encodeURIComponent(String(tagId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ResetPasswordCommand } from '../model/resetPasswordCommand';\nimport { UpdateProfileCommand } from '../model/updateProfileCommand';\nimport { User } from '../model/user';\nimport { UserView } from '../model/userView';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class UserService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Converts dummy user\n     * This will convert a dummy user to a normal system user, [SYSTEM ADMIN]\n     * @param body Login credentials for new user\n     * @param userId Id of user to convert to normal system user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public convertDummyUserById(body: ResetPasswordCommand, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public convertDummyUserById(body: ResetPasswordCommand, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling convertDummyUserById.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling convertDummyUserById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/user/${encodeURIComponent(String(userId))}/convertDummyUserToNormalUser`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create user\n     * This will to create a user, [SYSTEM ADMIN]\n     * @param body User to create\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUser(body: User, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createUser(body: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createUser(body: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createUser(body: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/user`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete user\n     * This will delete a system user by id [SYSTEM ADMIN]\n     * @param userId Id of user to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUserById(userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUserById(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUserById(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUserById(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling deleteUserById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/user/${encodeURIComponent(String(userId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get amount owed for user\n     * This will return the amount owed for the logged in user, in the specified group, [SYSTEM USER]\n     * @param groupId The Id of the group to get amount owed for\n     * @param receiptIds The Id of the receipts to get amount owed for\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAmountOwedForUser(groupId?: number, receiptIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (groupId !== undefined && groupId !== null) {\n            queryParameters = queryParameters.set('groupId', <any>groupId);\n        }\n        if (receiptIds) {\n            receiptIds.forEach((element) => {\n                queryParameters = queryParameters.append('receiptIds', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/user/amountOwedForUser`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get claims for logged in user\n     * This will return the user&#x27;s token claims for the currently logged in user [SYSTEM USER]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserClaims(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUserClaims(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUserClaims(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUserClaims(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/user/getUserClaims`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get username count\n     * This will return the number of users in the system with the same username\n     * @param username Username to get the count of\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsernameCount(username: string, observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getUsernameCount(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getUsernameCount(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getUsernameCount(username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (username === null || username === undefined) {\n            throw new Error('Required parameter username was null or undefined when calling getUsernameCount.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<number>('get',`${this.basePath}/user/${encodeURIComponent(String(username))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get users\n     * This will get all the users in the system and return a view without sensative information\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsers(observe?: 'body', reportProgress?: boolean): Observable<Array<UserView>>;\n    public getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserView>>>;\n    public getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserView>>>;\n    public getUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<UserView>>('get',`${this.basePath}/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Reset password\n     * This will reset a password for a user, [SYSTEM ADMIN]\n     * @param body Login credentials for new user\n     * @param userId Id of user to reset password\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public resetPasswordById(body: ResetPasswordCommand, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public resetPasswordById(body: ResetPasswordCommand, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling resetPasswordById.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling resetPasswordById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('post',`${this.basePath}/user/${encodeURIComponent(String(userId))}/resetPassword`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user by id\n     * This will update a user by id, [SYSTEM ADMIN]\n     * @param body User to update\n     * @param userId Id of user to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUserById(body: User, userId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateUserById(body: User, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateUserById(body: User, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateUserById(body: User, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUserById.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling updateUserById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/user/${encodeURIComponent(String(userId))}`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user profile\n     * This will update the logged in user&#x27;s user profile\n     * @param body User profile to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUserProfile(body: UpdateProfileCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateUserProfile(body: UpdateProfileCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateUserProfile(body: UpdateProfileCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateUserProfile(body: UpdateProfileCommand, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUserProfile.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<any>('put',`${this.basePath}/user/updateUserProfile`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { UserPreferences } from '../model/userPreferences';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class UserPreferencesService {\n\n    protected basePath = '/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get user preferences\n     * This will return the user&#x27;s preferences for the currently logged in user [SYSTEM USER]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserPreferences(observe?: 'body', reportProgress?: boolean): Observable<UserPreferences>;\n    public getUserPreferences(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPreferences>>;\n    public getUserPreferences(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPreferences>>;\n    public getUserPreferences(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<UserPreferences>('get',`${this.basePath}/userPreferences`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user preferences\n     * This will update the user&#x27;s preferences for the currently logged in user [SYSTEM USER]\n     * @param body User preferences to update\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUserPreferences(body: UserPreferences, observe?: 'body', reportProgress?: boolean): Observable<UserPreferences>;\n    public updateUserPreferences(body: UserPreferences, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPreferences>>;\n    public updateUserPreferences(body: UserPreferences, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPreferences>>;\n    public updateUserPreferences(body: UserPreferences, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUserPreferences.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<UserPreferences>('put',`${this.basePath}/userPreferences`,\n            {\n                body: body,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './auth.service';\nimport { AuthService } from './auth.service';\nexport * from './category.service';\nimport { CategoryService } from './category.service';\nexport * from './comment.service';\nimport { CommentService } from './comment.service';\nexport * from './dashboard.service';\nimport { DashboardService } from './dashboard.service';\nexport * from './featureConfig.service';\nimport { FeatureConfigService } from './featureConfig.service';\nexport * from './groups.service';\nimport { GroupsService } from './groups.service';\nexport * from './notifications.service';\nimport { NotificationsService } from './notifications.service';\nexport * from './receipt.service';\nimport { ReceiptService } from './receipt.service';\nexport * from './receiptImage.service';\nimport { ReceiptImageService } from './receiptImage.service';\nexport * from './search.service';\nimport { SearchService } from './search.service';\nexport * from './tag.service';\nimport { TagService } from './tag.service';\nexport * from './user.service';\nimport { UserService } from './user.service';\nexport * from './userPreferences.service';\nimport { UserPreferencesService } from './userPreferences.service';\nexport const APIS = [AuthService, CategoryService, CommentService, DashboardService, FeatureConfigService, GroupsService, NotificationsService, ReceiptService, ReceiptImageService, SearchService, TagService, UserService, UserPreferencesService];\n","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface BaseModel { \n    createdAt?: string;\n    createdBy?: number;\n    id?: number;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface BulkStatusUpdateCommand { \n    /**\n     * Optional comment to leave on each receipt\n     */\n    comment?: string;\n    /**\n     * Status to update to\n     */\n    status: string;\n    /**\n     * Receipt ids to update\n     */\n    receiptIds: Array<number>;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Category to relate receipts to\n */\nexport interface Category { \n    createdAt?: string;\n    createdBy?: number;\n    id?: number;\n    /**\n     * Name of the category\n     */\n    name?: string;\n    /**\n     * Description of the category\n     */\n    description?: string;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Category to relate receipts to\n */\nexport interface CategoryView { \n    createdAt?: string;\n    createdBy?: number;\n    id: number;\n    /**\n     * Name of the category\n     */\n    name: string;\n    /**\n     * Description of the category\n     */\n    description?: string;\n    updatedAt?: string;\n    /**\n     * Number of receipts associated with this category\n     */\n    numberOfReceipts: number;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * User comment left on receipts\n */\nexport interface Comment { \n    /**\n     * Additional information about the comment\n     */\n    additionalInfo?: string;\n    /**\n     * Comment itself\n     */\n    comment: string;\n    /**\n     * Comment foreign key used for repleis\n     */\n    commentId?: number;\n    createdAt?: string;\n    createdBy?: number;\n    id: number;\n    /**\n     * Receipt foreign key\n     */\n    receiptId: number;\n    /**\n     * Comment's replies\n     */\n    replies: Array<Comment>;\n    updatedAt?: string;\n    /**\n     * User foreign key\n     */\n    userId: number;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface EncodedImage { \n    /**\n     * base64 encoded jpg\n     */\n    encodedImage: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface FeatureConfig { \n    /**\n     * Whether AI powered receipts are enabled\n     */\n    aiPoweredReceipts?: boolean;\n    /**\n     * Whether local sign up is enabled\n     */\n    enableLocalSignUp?: boolean;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * File data for images on a receipt\n */\nexport interface FileData { \n    createdAt?: string;\n    createdBy?: number;\n    /**\n     * MIME file type\n     */\n    fileType?: string;\n    id: number;\n    /**\n     * Image data\n     */\n    imageData: Array<number>;\n    /**\n     * File name\n     */\n    name?: string;\n    /**\n     * Receipt foreign key\n     */\n    receiptId: number;\n    /**\n     * File size\n     */\n    size?: number;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface FileDataView { \n    /**\n     * File data id\n     */\n    id: number;\n    /**\n     * Base64 encoded image\n     */\n    encodedImage: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { GroupMember } from './groupMember';\nimport { GroupSettings } from './groupSettings';\n\n/**\n * Group in the system\n */\nexport interface Group { \n    createdAt?: string;\n    createdBy?: number;\n    groupSettings?: GroupSettings;\n    /**\n     * Members of the group\n     */\n    groupMembers: Array<GroupMember>;\n    id: number;\n    /**\n     * Is default group (not used yet)\n     */\n    isDefault?: boolean;\n    /**\n     * Name of the group\n     */\n    name: string;\n    /**\n     * Is all group for user\n     */\n    isAllGroup: boolean;\n    status: Group.StatusEnum;\n    updatedAt?: string;\n}\nexport namespace Group {\n    export type StatusEnum = 'ACTIVE' | 'ARCHIVED';\n    export const StatusEnum = {\n        ACTIVE: 'ACTIVE' as StatusEnum,\n        ARCHIVED: 'ARCHIVED' as StatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Group member\n */\nexport interface GroupMember { \n    createdAt?: string;\n    /**\n     * Group compound primary key\n     */\n    groupId: number;\n    groupRole: GroupMember.GroupRoleEnum;\n    updatedAt?: string;\n    /**\n     * User compound primary key\n     */\n    userId: number;\n}\nexport namespace GroupMember {\n    export type GroupRoleEnum = 'OWNER' | 'VIEWER' | 'EDITOR';\n    export const GroupRoleEnum = {\n        OWNER: 'OWNER' as GroupRoleEnum,\n        VIEWER: 'VIEWER' as GroupRoleEnum,\n        EDITOR: 'EDITOR' as GroupRoleEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { GroupSettingsWhiteListEmail } from './groupSettingsWhiteListEmail';\nimport { SubjectLineRegex } from './subjectLineRegex';\n\nexport interface GroupSettings { \n    /**\n     * Group settings id\n     */\n    id: number;\n    /**\n     * Group foreign key\n     */\n    groupId: number;\n    /**\n     * Whether email integration is enabled\n     */\n    emailIntegrationEnabled?: boolean;\n    /**\n     * Email to read\n     */\n    emailToRead?: string;\n    /**\n     * Subject line regexes\n     */\n    subjectLineRegexes?: Array<SubjectLineRegex>;\n    /**\n     * Email white list\n     */\n    emailWhiteList?: Array<GroupSettingsWhiteListEmail>;\n    /**\n     * Default receipt status\n     */\n    emailDefaultReceiptStatus?: GroupSettings.EmailDefaultReceiptStatusEnum;\n    /**\n     * User foreign key\n     */\n    emailDefaultReceiptPaidById?: number;\n    createdAt?: string;\n    createdBy?: number;\n    updatedAt?: string;\n}\nexport namespace GroupSettings {\n    export type EmailDefaultReceiptStatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const EmailDefaultReceiptStatusEnum = {\n        OPEN: 'OPEN' as EmailDefaultReceiptStatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as EmailDefaultReceiptStatusEnum,\n        RESOLVED: 'RESOLVED' as EmailDefaultReceiptStatusEnum,\n        DRAFT: 'DRAFT' as EmailDefaultReceiptStatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface GroupSettingsWhiteListEmail { \n    /**\n     * Group settings email id\n     */\n    id: number;\n    /**\n     * Group settings foreign key\n     */\n    groupSettingsId: number;\n    /**\n     * Email to match\n     */\n    email: string;\n    createdAt?: string;\n    createdBy?: number;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Itemized item on a receipt\n */\nexport interface Item { \n    /**\n     * Is taxed (not used)\n     */\n    isTaxed?: boolean;\n    /**\n     * Amount the item costs\n     */\n    amount: string;\n    /**\n     * User foreign key\n     */\n    chargedToUserId: number;\n    createdAt?: string;\n    createdBy?: number;\n    id?: number;\n    /**\n     * Item name\n     */\n    name: string;\n    /**\n     * Receipt foreign key\n     */\n    receiptId: number;\n    status: Item.StatusEnum;\n    updatedAt?: string;\n}\nexport namespace Item {\n    export type StatusEnum = 'OPEN' | 'RESOLVED' | 'DRAFT';\n    export const StatusEnum = {\n        OPEN: 'OPEN' as StatusEnum,\n        RESOLVED: 'RESOLVED' as StatusEnum,\n        DRAFT: 'DRAFT' as StatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type ItemStatus = string;","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface LoginCommand { \n    /**\n     * User's username\n     */\n    username: string;\n    /**\n     * User's password\n     */\n    password: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface MagicFillCommand { \n    /**\n     * Image data\n     */\n    imageData?: Array<number>;\n    /**\n     * Name of file\n     */\n    filename?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type NotificationType = string;","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface PagedData { \n    data: Array<any>;\n    totalCount: number;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface PagedRequestCommand { \n    /**\n     * Page number\n     */\n    page: number;\n    /**\n     * Number of records per page\n     */\n    pageSize: number;\n    /**\n     * field to order on\n     */\n    orderBy?: string;\n    sortDirection?: PagedRequestCommand.SortDirectionEnum;\n}\nexport namespace PagedRequestCommand {\n    export type SortDirectionEnum = 'asc' | 'desc' | '';\n    export const SortDirectionEnum = {\n        Asc: 'asc' as SortDirectionEnum,\n        Desc: 'desc' as SortDirectionEnum,\n        Empty: '' as SortDirectionEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface PagedRequestField { \n    /**\n     * Filter operation\n     */\n    operation: PagedRequestField.OperationEnum;\n    /**\n     * Field value\n     */\n    value: string | number | Array<string> | Array<number>;\n}\nexport namespace PagedRequestField {\n    export type OperationEnum = 'CONTAINS' | 'EQUALS' | 'GREATER_THAN' | 'LESS_THAN';\n    export const OperationEnum = {\n        CONTAINS: 'CONTAINS' as OperationEnum,\n        EQUALS: 'EQUALS' as OperationEnum,\n        GREATERTHAN: 'GREATER_THAN' as OperationEnum,\n        LESSTHAN: 'LESS_THAN' as OperationEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface QuickScanCommand { \n    file: Blob;\n    /**\n     * Group foreign key\n     */\n    groupId: number;\n    /**\n     * User foreign key\n     */\n    paidByUserId: number;\n    /**\n     * Status of quick scanned receipt\n     */\n    status: QuickScanCommand.StatusEnum;\n}\nexport namespace QuickScanCommand {\n    export type StatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const StatusEnum = {\n        OPEN: 'OPEN' as StatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as StatusEnum,\n        RESOLVED: 'RESOLVED' as StatusEnum,\n        DRAFT: 'DRAFT' as StatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { Category } from './category';\nimport { Comment } from './comment';\nimport { FileData } from './fileData';\nimport { Item } from './item';\nimport { Tag } from './tag';\n\n/**\n * Receipt\n */\nexport interface Receipt { \n    /**\n     * Reciept total amount\n     */\n    amount: string;\n    /**\n     * Categories associated to receipt\n     */\n    categories?: Array<Category>;\n    /**\n     * Comments associated to receipt\n     */\n    comments?: Array<Comment>;\n    createdAt?: string;\n    createdBy?: number;\n    /**\n     * Receipt date\n     */\n    date: string;\n    /**\n     * Group foreign key\n     */\n    groupId: number;\n    id: number;\n    /**\n     * Files associated to receipt\n     */\n    imageFiles?: Array<FileData>;\n    /**\n     * Receipt name\n     */\n    name: string;\n    /**\n     * User paid foreign key\n     */\n    paidByUserId: number;\n    /**\n     * Items associated to receipt\n     */\n    receiptItems?: Array<Item>;\n    /**\n     * Date resolved\n     */\n    resolvedDate?: string;\n    status: Receipt.StatusEnum;\n    /**\n     * Tags associated to receipt\n     */\n    tags?: Array<Tag>;\n    updatedAt?: string;\n    /**\n     * Created by string, which is anything that is not a user\n     */\n    createdByString?: string;\n}\nexport namespace Receipt {\n    export type StatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const StatusEnum = {\n        OPEN: 'OPEN' as StatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as StatusEnum,\n        RESOLVED: 'RESOLVED' as StatusEnum,\n        DRAFT: 'DRAFT' as StatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface ReceiptFileUploadCommand { \n    file: Blob;\n    /**\n     * Receipt foreign key\n     */\n    receiptId: number;\n    /**\n     * Base64 encoded image for file types that aren't viewable natively in the browser, such as PDFs\n     */\n    encodedImage?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface ReceiptImageConvertToJpgBody { \n    /**\n     * Base64 encoded image\n     */\n    file: Blob;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface ReceiptImageMagicFillBody { \n    file?: Blob;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { ReceiptPagedRequestFilter } from './receiptPagedRequestFilter';\n\nexport interface ReceiptPagedRequestCommand { \n    /**\n     * Page number\n     */\n    page: number;\n    /**\n     * Number of records per page\n     */\n    pageSize: number;\n    /**\n     * field to order on\n     */\n    orderBy?: string;\n    sortDirection?: ReceiptPagedRequestCommand.SortDirectionEnum;\n    filter?: ReceiptPagedRequestFilter;\n}\nexport namespace ReceiptPagedRequestCommand {\n    export type SortDirectionEnum = 'asc' | 'desc' | '';\n    export const SortDirectionEnum = {\n        Asc: 'asc' as SortDirectionEnum,\n        Desc: 'desc' as SortDirectionEnum,\n        Empty: '' as SortDirectionEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Command to reset user's password profile\n */\nexport interface ResetPasswordCommand { \n    /**\n     * User's new password\n     */\n    password: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SearchResult { \n    id: number;\n    name: string;\n    type: string;\n    groupId: number;\n    date: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SignUpCommand { \n    /**\n     * User's username\n     */\n    username: string;\n    /**\n     * User's password\n     */\n    password: string;\n    /**\n     * User's displayname\n     */\n    displayName?: string;\n    /**\n     * Whether the user is a dummy user\n     */\n    isDummyUser?: boolean;\n    /**\n     * User's role\n     */\n    userRole?: boolean;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface SubjectLineRegex { \n    /**\n     * Subject line regex id\n     */\n    id: number;\n    /**\n     * Group settings foreign key\n     */\n    groupSettingsId: number;\n    /**\n     * Regex to match subject line\n     */\n    regex: string;\n    createdAt?: string;\n    createdBy?: number;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Tag to relate receipts to\n */\nexport interface Tag { \n    createdAt?: string;\n    createdBy?: number;\n    id?: number;\n    /**\n     * Tag name\n     */\n    name: string;\n    updatedAt?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Tag to relate receipts to\n */\nexport interface TagView { \n    createdAt?: string;\n    createdBy?: number;\n    id: number;\n    /**\n     * Name of the tag\n     */\n    name: string;\n    /**\n     * Description of the tag\n     */\n    description?: string;\n    updatedAt?: string;\n    /**\n     * Number of receipts associated with this tag\n     */\n    numberOfReceipts: number;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { GroupSettingsWhiteListEmail } from './groupSettingsWhiteListEmail';\nimport { SubjectLineRegex } from './subjectLineRegex';\n\nexport interface UpdateGroupSettingsCommand { \n    /**\n     * Whether email integration is enabled\n     */\n    emailIntegrationEnabled?: boolean;\n    /**\n     * Email to read\n     */\n    emailToRead: string;\n    /**\n     * Subject line regexes\n     */\n    subjectLineRegexes: Array<SubjectLineRegex>;\n    /**\n     * Email white list\n     */\n    emailWhiteList: Array<GroupSettingsWhiteListEmail>;\n    /**\n     * Default receipt status\n     */\n    emailDefaultReceiptStatus?: UpdateGroupSettingsCommand.EmailDefaultReceiptStatusEnum;\n    /**\n     * User foreign key\n     */\n    emailDefaultReceiptPaidById?: number;\n}\nexport namespace UpdateGroupSettingsCommand {\n    export type EmailDefaultReceiptStatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const EmailDefaultReceiptStatusEnum = {\n        OPEN: 'OPEN' as EmailDefaultReceiptStatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as EmailDefaultReceiptStatusEnum,\n        RESOLVED: 'RESOLVED' as EmailDefaultReceiptStatusEnum,\n        DRAFT: 'DRAFT' as EmailDefaultReceiptStatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Command to update user's profile\n */\nexport interface UpdateProfileCommand { \n    /**\n     * User's displayName\n     */\n    displayName: string;\n    /**\n     * Color of default avatar\n     */\n    defaultAvatarColor: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Tag to relate receipts to\n */\nexport interface UpsertTagCommand { \n    /**\n     * Tag name\n     */\n    name: string;\n    /**\n     * Tag description\n     */\n    description?: string;\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface UpsertWidgetCommand { \n    /**\n     * Widget name\n     */\n    name?: string;\n    /**\n     * Type of widget\n     */\n    widgetType: UpsertWidgetCommand.WidgetTypeEnum;\n    /**\n     * Configuration of widget\n     */\n    configuration?: { [key: string]: any; };\n}\nexport namespace UpsertWidgetCommand {\n    export type WidgetTypeEnum = 'GROUP_SUMMARY' | 'FILTERED_RECEIPTS';\n    export const WidgetTypeEnum = {\n        GROUPSUMMARY: 'GROUP_SUMMARY' as WidgetTypeEnum,\n        FILTEREDRECEIPTS: 'FILTERED_RECEIPTS' as WidgetTypeEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * User in the system\n */\nexport interface User { \n    /**\n     * User's password\n     */\n    password?: string;\n    /**\n     * User's username used to login\n     */\n    username: string;\n    createdAt?: string;\n    createdBy?: number;\n    /**\n     * Default avatar color\n     */\n    defaultAvatarColor?: string;\n    /**\n     * Display name\n     */\n    displayName: string;\n    id: number;\n    /**\n     * Is dummy user\n     */\n    isDummyUser: boolean;\n    updatedAt?: string;\n    /**\n     * User's role\n     */\n    userRole: User.UserRoleEnum;\n}\nexport namespace User {\n    export type UserRoleEnum = 'ADMIN' | 'USER';\n    export const UserRoleEnum = {\n        ADMIN: 'ADMIN' as UserRoleEnum,\n        USER: 'USER' as UserRoleEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface UserPreferences { \n    /**\n     * User preferences id\n     */\n    id: number;\n    /**\n     * User foreign key\n     */\n    userId: number;\n    /**\n     * Group foreign key\n     */\n    quickScanDefaultGroupId?: number;\n    /**\n     * User foreign key\n     */\n    quickScanDefaultPaidById?: number;\n    /**\n     * Default quick scan status\n     */\n    quickScanDefaultStatus?: UserPreferences.QuickScanDefaultStatusEnum;\n}\nexport namespace UserPreferences {\n    export type QuickScanDefaultStatusEnum = 'OPEN' | 'NEEDS_ATTENTION' | 'RESOLVED' | 'DRAFT';\n    export const QuickScanDefaultStatusEnum = {\n        OPEN: 'OPEN' as QuickScanDefaultStatusEnum,\n        NEEDSATTENTION: 'NEEDS_ATTENTION' as QuickScanDefaultStatusEnum,\n        RESOLVED: 'RESOLVED' as QuickScanDefaultStatusEnum,\n        DRAFT: 'DRAFT' as QuickScanDefaultStatusEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport type UserRole = string;","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * User in the system\n */\nexport interface UserView { \n    /**\n     * User's username used to login\n     */\n    username: string;\n    createdAt?: string;\n    createdBy?: number;\n    /**\n     * Default avatar color\n     */\n    defaultAvatarColor?: string;\n    /**\n     * Display name\n     */\n    displayName: string;\n    id: number;\n    /**\n     * Is dummy user\n     */\n    isDummyUser: boolean;\n    updatedAt?: string;\n    /**\n     * User's role\n     */\n    userRole: UserView.UserRoleEnum;\n}\nexport namespace UserView {\n    export type UserRoleEnum = 'ADMIN' | 'USER';\n    export const UserRoleEnum = {\n        ADMIN: 'ADMIN' as UserRoleEnum,\n        USER: 'USER' as UserRoleEnum\n    };\n}","/**\n * Receipt Wrangler API.\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 0.0.1\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * Widget related to a user's dashboard\n */\nexport interface Widget { \n    createdAt?: string;\n    createdBy?: number;\n    id: number;\n    /**\n     * Widget name\n     */\n    name?: string;\n    /**\n     * Dashboard foreign key\n     */\n    dashboardId: number;\n    updatedAt?: string;\n    /**\n     * Type of widget\n     */\n    widgetType?: Widget.WidgetTypeEnum;\n    /**\n     * Configuration of widget\n     */\n    configuration?: { [key: string]: any; };\n}\nexport namespace Widget {\n    export type WidgetTypeEnum = 'GROUP_SUMMARY' | 'FILTERED_RECEIPTS';\n    export const WidgetTypeEnum = {\n        GROUPSUMMARY: 'GROUP_SUMMARY' as WidgetTypeEnum,\n        FILTEREDRECEIPTS: 'FILTERED_RECEIPTS' as WidgetTypeEnum\n    };\n}","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { AuthService } from './api/auth.service';\nimport { CategoryService } from './api/category.service';\nimport { CommentService } from './api/comment.service';\nimport { DashboardService } from './api/dashboard.service';\nimport { FeatureConfigService } from './api/featureConfig.service';\nimport { GroupsService } from './api/groups.service';\nimport { NotificationsService } from './api/notifications.service';\nimport { ReceiptService } from './api/receipt.service';\nimport { ReceiptImageService } from './api/receiptImage.service';\nimport { SearchService } from './api/search.service';\nimport { TagService } from './api/tag.service';\nimport { UserService } from './api/user.service';\nimport { UserPreferencesService } from './api/userPreferences.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    AuthService,\n    CategoryService,\n    CommentService,\n    DashboardService,\n    FeatureConfigService,\n    GroupsService,\n    NotificationsService,\n    ReceiptService,\n    ReceiptImageService,\n    SearchService,\n    TagService,\n    UserService,\n    UserPreferencesService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","import { Group } from '../api/model/group';\n\nexport class AddGroup {\n  static readonly type = '[Group] Add Group';\n  constructor(public group: Group) {}\n}\n\nexport class RemoveGroup {\n  static readonly type = '[Group] Remove Group';\n  constructor(public groupId: string) {}\n}\n\nexport class SetGroups {\n  static readonly type = '[Group] Set Groups';\n  constructor(public groups: Group[]) {}\n}\n\nexport class UpdateGroup {\n  static readonly type = '[Group] Update Group';\n  constructor(public group: Group) {}\n}\n\nexport class SetSelectedDashboardId {\n  static readonly type = '[Group] Set Selected Dashboard Id';\n  constructor(public dashboardId?: string) {}\n}\n\nexport class SetSelectedGroupId {\n  static readonly type = '[Group] Set Selected Group Id';\n  constructor(public groupId?: string) {}\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Action,\n  createSelector,\n  Selector,\n  State,\n  StateContext,\n} from '@ngxs/store';\nimport { Group } from '../api/model/group';\nimport {\n  AddGroup,\n  RemoveGroup,\n  SetGroups,\n  SetSelectedDashboardId,\n  SetSelectedGroupId,\n  UpdateGroup,\n} from './group.state.actions';\nimport { GroupMember } from '../api/model/groupMember';\n\nexport interface GroupStateInterface {\n  groups: Group[];\n  selectedGroupId: string;\n  selectedDashboardId: string;\n}\n\n@State<GroupStateInterface>({\n  name: 'groups',\n  defaults: {\n    groups: [],\n    selectedGroupId: '',\n    selectedDashboardId: '',\n  },\n})\n@Injectable()\nexport class GroupState {\n  @Selector()\n  static groups(state: GroupStateInterface): Group[] {\n    return state.groups;\n  }\n\n  @Selector()\n  static allGroupMembers(state: GroupStateInterface): GroupMember[] {\n    return state.groups.map((g) => g.groupMembers).flat();\n  }\n\n  @Selector()\n  static groupsWithoutAll(state: GroupStateInterface): Group[] {\n    return state.groups.filter((g) => !g.isAllGroup);\n  }\n\n  @Selector()\n  static groupsWithoutSelectedGroup(state: GroupStateInterface): Group[] {\n    return state.groups.filter(\n      (g) => g.id.toString() !== state.selectedGroupId\n    );\n  }\n\n  @Selector()\n  static selectedDashboardId(state: GroupStateInterface): string {\n    return state.selectedDashboardId;\n  }\n\n  @Selector()\n  static selectedGroupId(state: GroupStateInterface): string {\n    return state.selectedGroupId;\n  }\n\n  @Selector()\n  static receiptListLink(state: GroupStateInterface): string {\n    return `/receipts/group/${state.selectedGroupId}`;\n  }\n\n  // TODO: needs to be fixed\n  @Selector()\n  static dashboardLink(state: GroupStateInterface): string {\n    return `/dashboard/group/${state.selectedGroupId}`;\n  }\n\n  @Selector()\n  static settingsLinkBase(state: GroupStateInterface): string {\n    return `/groups/${state.selectedGroupId}/settings`;\n  }\n\n  static getGroupById(groupId: string) {\n    return createSelector([GroupState], (state: GroupStateInterface) => {\n      return state.groups.find((g) => g.id.toString() === groupId.toString());\n    });\n  }\n\n  @Action(AddGroup)\n  addGroup(\n    { getState, patchState }: StateContext<GroupStateInterface>,\n    payload: AddGroup\n  ) {\n    const groups = Array.from(getState().groups);\n    groups.push(payload.group);\n\n    patchState({\n      groups: groups,\n    });\n  }\n\n  @Action(RemoveGroup)\n  removeGroup(\n    { getState, patchState }: StateContext<GroupStateInterface>,\n    payload: RemoveGroup\n  ) {\n    const state = getState();\n    const group = GroupState.getGroupById(payload.groupId)(state);\n    if (group) {\n      const index = state.groups.findIndex((g) => g === group);\n      if (index >= 0) {\n        const newInterface = {} as GroupStateInterface;\n        const newGroups = Array.from(state.groups).filter(\n          (g) => g.id !== group.id\n        );\n        newInterface.groups = newGroups;\n        if (group.id.toString() === state.selectedGroupId.toString()) {\n          newInterface.selectedGroupId = state.groups[0].id.toString();\n        }\n        patchState(newInterface);\n      }\n    }\n  }\n\n  @Action(SetGroups)\n  setGroups(\n    { patchState }: StateContext<GroupStateInterface>,\n    payload: SetGroups\n  ) {\n    patchState({\n      groups: payload.groups,\n    });\n  }\n\n  @Action(UpdateGroup)\n  updateGroup(\n    { getState, patchState }: StateContext<GroupStateInterface>,\n    payload: UpdateGroup\n  ) {\n    const groupIndex = getState().groups.findIndex(\n      (g) => g.id?.toString() === payload?.group?.id?.toString()\n    );\n    if (groupIndex > -1) {\n      const newGroups = Array.from(getState().groups);\n      newGroups[groupIndex] = payload.group;\n\n      patchState({\n        groups: newGroups,\n      });\n    }\n  }\n\n  @Action(SetSelectedDashboardId)\n  setSelectedDashboardId(\n    { getState, patchState }: StateContext<GroupStateInterface>,\n    payload: SetSelectedDashboardId\n  ) {\n    patchState({\n      selectedDashboardId: payload.dashboardId,\n    });\n  }\n\n  @Action(SetSelectedGroupId)\n  setSelectedGroupId(\n    { getState, patchState }: StateContext<GroupStateInterface>,\n    payload: SetSelectedGroupId\n  ) {\n    let groupId = '';\n    let dashboardId = '';\n\n    if (payload?.groupId) {\n      groupId = payload.groupId;\n    } else {\n      const groups = getState().groups;\n      groupId = groups[0].id.toString();\n    }\n\n    if (payload.groupId === getState().selectedGroupId) {\n      dashboardId = getState().selectedDashboardId;\n    }\n\n    patchState({\n      selectedGroupId: groupId,\n      selectedDashboardId: dashboardId,\n    });\n  }\n}\n","import { map, Observable } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidatorFn,\n  ValidationErrors,\n} from '@angular/forms';\nimport { UserService } from '../api/api/user.service';\n\n@Injectable()\nexport class UserValidators {\n  constructor(private userService: UserService) {}\n\n  public uniqueUsername(\n    threshold: number,\n    originalValue: string\n  ): AsyncValidatorFn {\n    return (\n      control: AbstractControl\n    ):\n      | Promise<ValidationErrors | null>\n      | Observable<ValidationErrors | null> => {\n      return this.userService.getUsernameCount(control.value).pipe(\n        map((usernameCount) => {\n          if (usernameCount > threshold && control.value !== originalValue) {\n            return { duplicate: true };\n          }\n          return null;\n        })\n      );\n    };\n  }\n}\n","import { FeatureConfig } from '../api';\n\nexport class SetFeatureConfig {\n  static readonly type = '[FeatureConfig] Set Feature Config';\n\n  constructor(public config: FeatureConfig) {}\n}\n","import { User } from '../api/model/user';\n\nexport class SetUsers {\n  static readonly type = '[User] Set Users';\n  constructor(public users: User[]) {}\n}\n\nexport class UpdateUser {\n  static readonly type = '[User] Update User';\n  constructor(public userId: string, public user: User) {}\n}\nexport class AddUser {\n  static readonly type = '[User] Add User';\n  constructor(public user: User) {}\n}\n\nexport class RemoveUser {\n  static readonly type = '[User] Remove User';\n  constructor(public userId: string) {}\n}\n","import { UserPreferences } from '../api/model/userPreferences';\nimport { AuthStateInterface } from './auth-state.interface';\n\nexport class SetAuthState {\n  static readonly type = '[Auth] Set Auth State';\n\n  constructor(public userClaims: AuthStateInterface) {}\n}\n\nexport class SetUserPreferences {\n  static readonly type = '[Auth] Set User PReferences';\n\n  constructor(public userPreferences: UserPreferences) {}\n}\n\nexport class Logout {\n  static readonly type = '[Auth] Logout';\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Observable, switchMap, take } from 'rxjs';\nimport { UserService } from '../api/api/user.service';\nimport { SetAuthState } from '../store/auth.state.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClaimsService {\n  constructor(private store: Store, private userService: UserService) {}\n\n  public getAndSetClaimsForLoggedInUser(): Observable<void> {\n    return this.userService.getUserClaims().pipe(\n      take(1),\n      switchMap((claims) => this.store.dispatch(new SetAuthState(claims)))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Action,\n  createSelector,\n  Selector,\n  State,\n  StateContext,\n} from '@ngxs/store';\nimport { User } from '../api/model/user';\nimport { AuthStateInterface } from './auth-state.interface';\nimport { Logout, SetAuthState, SetUserPreferences } from './auth.state.actions';\nimport { UserPreferences } from '../api';\n\n@State<AuthStateInterface>({\n  name: 'auth',\n  defaults: {},\n})\n@Injectable()\nexport class AuthState {\n  @Selector()\n  static userPreferences(\n    state: AuthStateInterface\n  ): UserPreferences | undefined {\n    return state.userPreferences;\n  }\n\n  @Selector()\n  static userRole(state: AuthStateInterface): string {\n    return state.userRole ?? '';\n  }\n\n  @Selector()\n  static isLoggedIn(state: AuthStateInterface): boolean {\n    return !AuthState.isTokenExpired(state);\n  }\n\n  @Selector()\n  static userId(state: AuthStateInterface): string {\n    return state.userId ?? '';\n  }\n\n  @Selector()\n  static isTokenExpired(state: AuthStateInterface): boolean {\n    if (state.expirationDate) {\n      return new Date() >= new Date(Number(state.expirationDate) * 1000);\n    } else {\n      return true;\n    }\n  }\n\n  @Selector()\n  static loggedInUser(state: AuthStateInterface): User {\n    return {\n      defaultAvatarColor: state.defaultAvatarColor ?? '',\n      displayName: state.displayname ?? '',\n      id: Number(state.userId) ?? '',\n      username: state.username ?? '',\n    } as User;\n  }\n\n  static hasRole(role: string) {\n    return createSelector([AuthState], (state: AuthStateInterface) => {\n      return state.userRole === role;\n    });\n  }\n\n  @Action(SetAuthState)\n  setAuthState(\n    { getState, patchState }: StateContext<AuthStateInterface>,\n    payload: SetAuthState\n  ) {\n    const claims = payload.userClaims as any;\n\n    patchState({\n      defaultAvatarColor: claims['DefaultAvatarColor'],\n      displayname: claims['Displayname'],\n      expirationDate: claims['exp']?.toString(),\n      userId: claims['UserId']?.toString(),\n      username: claims['Username'],\n      userRole: claims['UserRole'],\n    });\n  }\n\n  @Action(Logout)\n  logout({ getState, patchState }: StateContext<AuthStateInterface>) {\n    patchState({\n      defaultAvatarColor: '',\n      displayname: '',\n      expirationDate: '',\n      userId: '',\n      username: '',\n      userRole: undefined,\n      userPreferences: undefined,\n    });\n  }\n\n  @Action(SetUserPreferences)\n  setUserPreferences(\n    { patchState }: StateContext<AuthStateInterface>,\n    payload: SetUserPreferences\n  ) {\n    patchState({\n      userPreferences: payload.userPreferences,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Action,\n  createSelector,\n  Selector,\n  State,\n  StateContext,\n} from '@ngxs/store';\nimport { FeatureConfig } from '../api';\nimport { SetFeatureConfig } from './feature-config.state.actions';\n\n@State<FeatureConfig>({\n  name: 'featureConfig',\n  defaults: { enableLocalSignUp: true, aiPoweredReceipts: false },\n})\n@Injectable()\nexport class FeatureConfigState {\n  @Selector()\n  static enableLocalSignUp(state: FeatureConfig): boolean {\n    return state.enableLocalSignUp as boolean;\n  }\n\n  @Selector()\n  static aiPoweredReceipts(state: FeatureConfig): boolean {\n    return state.aiPoweredReceipts as boolean;\n  }\n\n  static hasFeature(feature: string) {\n    return createSelector([FeatureConfigState], (state: FeatureConfig) => {\n      return !!(state as any)[feature];\n    });\n  }\n\n  @Action(SetFeatureConfig)\n  setFeatureConfig(\n    { patchState }: StateContext<FeatureConfig>,\n    payload: SetFeatureConfig\n  ) {\n    patchState({\n      aiPoweredReceipts: payload.config?.aiPoweredReceipts,\n      enableLocalSignUp: payload.config?.enableLocalSignUp,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Action,\n  createSelector,\n  Selector,\n  State,\n  StateContext,\n} from '@ngxs/store';\nimport { User } from '../api/model/user';\nimport {\n  AddUser,\n  RemoveUser,\n  SetUsers,\n  UpdateUser,\n} from './user.state.actions';\n\nexport interface UserStateInterface {\n  users: User[];\n}\n\n@State<UserStateInterface>({\n  name: 'users',\n  defaults: {\n    users: [],\n  },\n})\n@Injectable()\nexport class UserState {\n  @Selector()\n  static users(state: UserStateInterface): User[] {\n    return state.users;\n  }\n\n  static getUserById(userId: string) {\n    return createSelector([UserState], (state: UserStateInterface) => {\n      return state.users.find((u) => u.id.toString() === userId.toString());\n    });\n  }\n\n  static findUserById(userId: string) {\n    return createSelector([UserState], (state: UserStateInterface) => {\n      return state.users.find((u) => u.id.toString() === userId.toString());\n    });\n  }\n\n  static findUserIndexById(userId: string, users: User[]): number {\n    return users.findIndex((u) => u.id.toString() === userId);\n  }\n\n  @Action(SetUsers)\n  setUsers(\n    { getState, patchState }: StateContext<UserStateInterface>,\n    payload: SetUsers\n  ) {\n    patchState({\n      users: payload.users,\n    });\n  }\n\n  @Action(UpdateUser)\n  updateUser(\n    { getState, patchState }: StateContext<UserStateInterface>,\n    payload: UpdateUser\n  ) {\n    const users = Array.from(getState().users);\n    const index = UserState.findUserIndexById(payload.userId, users);\n    if (index >= 0) {\n      users.splice(index, 1, payload.user);\n      patchState({\n        users: users,\n      });\n    }\n  }\n\n  @Action(AddUser)\n  addUser(\n    { getState, patchState }: StateContext<UserStateInterface>,\n    payload: AddUser\n  ) {\n    const users = Array.from(getState().users);\n    users.push(payload.user);\n    patchState({\n      users: users,\n    });\n  }\n\n  @Action(RemoveUser)\n  removeUser(\n    { getState, patchState }: StateContext<UserStateInterface>,\n    payload: RemoveUser\n  ) {\n    const users = Array.from(getState().users);\n    patchState({\n      users: users.filter((u) => u.id.toString() !== payload.userId.toString()),\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport {\n  catchError,\n  finalize,\n  forkJoin,\n  Observable,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs';\nimport {\n  AuthService,\n  FeatureConfigService,\n  Group,\n  GroupsService,\n  User,\n  UserPreferences,\n  UserPreferencesService,\n  UserService,\n} from '../api';\nimport { SetFeatureConfig } from '../store/feature-config.state.actions';\nimport { GroupState } from '../store/group.state';\nimport { SetGroups, SetSelectedGroupId } from '../store/group.state.actions';\nimport { SetUsers } from '../store/user.state.actions';\n\nimport { ClaimsService } from './claims.service';\nimport { SetUserPreferences } from '../store';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppInitService {\n  constructor(\n    private authService: AuthService,\n    private claimsService: ClaimsService,\n    private featureConfigService: FeatureConfigService,\n    private groupsService: GroupsService,\n    private store: Store,\n    private userService: UserService,\n    private userPreferencesService: UserPreferencesService\n  ) {}\n\n  public initAppData(): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.featureConfigService\n        .getFeatureConfig()\n        .pipe(\n          take(1),\n          switchMap((config) =>\n            this.store.dispatch(new SetFeatureConfig(config))\n          ),\n          catchError((err) => {\n            resolve(false);\n            return err;\n          }),\n          switchMap(() => this.authService.getNewRefreshToken()),\n          switchMap(() => this.getAppData()),\n          tap(() => resolve(true))\n        )\n        .subscribe();\n    });\n  }\n\n  public getAppData(): Observable<[User[], Group[], void, UserPreferences]> {\n    const usersCall = this.userService.getUsers().pipe(\n      take(1),\n      tap((users) => this.store.dispatch(new SetUsers(users)))\n    );\n\n    const groupsCall = this.groupsService.getGroupsForuser().pipe(\n      take(1),\n      tap((groups) => {\n        this.store.dispatch(new SetGroups(groups));\n        const groupId = this.store.selectSnapshot(GroupState.selectedGroupId);\n        if (!groupId) {\n          this.store.dispatch(new SetSelectedGroupId());\n        }\n      })\n    );\n    const userClaims = this.claimsService.getAndSetClaimsForLoggedInUser();\n    const userPreferencesCall = this.userPreferencesService\n      .getUserPreferences()\n      .pipe(\n        take(1),\n        tap((userPreferences) => {\n          this.store.dispatch(new SetUserPreferences(userPreferences));\n        })\n      );\n\n    return forkJoin(usersCall, groupsCall, userClaims, userPreferencesCall);\n  }\n}\n\nexport function initAppData(appInitService: AppInitService) {\n  return () => appInitService.initAppData();\n}\n","import { MatSnackBarConfig } from '@angular/material/snack-bar';\n\nexport const DEFAULT_SNACKBAR_ACTION: string = 'Ok';\n\nexport const DEFAULT_SNACKBAR_CONFIG: MatSnackBarConfig<any> = {\n  horizontalPosition: 'center',\n  verticalPosition: 'top',\n  duration: 3000,\n};\n","import { EmbeddedViewRef, Injectable, TemplateRef } from '@angular/core';\nimport {\n  MatSnackBar,\n  MatSnackBarConfig,\n  MatSnackBarRef,\n} from '@angular/material/snack-bar';\nimport {\n  DEFAULT_SNACKBAR_ACTION,\n  DEFAULT_SNACKBAR_CONFIG,\n} from '../constants/snackbar.constant';\nimport { SnackbarServiceInterface } from '../interfaces/snackbar.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService implements SnackbarServiceInterface {\n  constructor(private snackbar: MatSnackBar) {}\n\n  public error(message: string): void {\n    this.snackbar.open(message, DEFAULT_SNACKBAR_ACTION, {\n      ...DEFAULT_SNACKBAR_CONFIG,\n      panelClass: ['error-snackbar'],\n    });\n  }\n\n  public success(\n    message: string,\n    configOverrides?: MatSnackBarConfig<any>\n  ): void {\n    this.snackbar.open(message, DEFAULT_SNACKBAR_ACTION, {\n      ...DEFAULT_SNACKBAR_CONFIG,\n      ...configOverrides,\n      panelClass: ['success-snackbar'],\n    });\n  }\n\n  public successFromTemplate(\n    template: TemplateRef<any>,\n    configOverrides?: MatSnackBarConfig<any>\n  ): MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this.snackbar.openFromTemplate(template, {\n      ...DEFAULT_SNACKBAR_CONFIG,\n      ...configOverrides,\n      panelClass: ['success-snackbar'],\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, catchError, map, of, switchMap, tap } from 'rxjs';\nimport { AuthService } from '../../api';\nimport { AppInitService, SnackbarService } from '../../services';\n\n@Injectable()\nexport class AuthFormUtil {\n  constructor(\n    private authService: AuthService,\n    private snackbarService: SnackbarService,\n    private appInitService: AppInitService\n  ) {}\n\n  public getSubmitObservable(\n    form: FormGroup,\n    isSignUp: boolean\n  ): Observable<void> {\n    const isValid = form.valid;\n\n    if (isValid && isSignUp) {\n      return this.authService.signUp(form.value).pipe(\n        tap(() => {\n          this.snackbarService.success('User successfully signed up');\n        }),\n        catchError((err) =>\n          of(this.snackbarService.error(err.error['username'] ?? err['errMsg']))\n        )\n      );\n    } else if (isValid && !isSignUp) {\n      return this.authService.login(form.value).pipe(\n        tap(() => {\n          this.snackbarService.success('Successfully logged in');\n        }),\n        switchMap(() => this.appInitService.getAppData()),\n        map(() => undefined)\n      );\n    } else {\n      return of(undefined);\n    }\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ButtonComponent {\n  @Input() public buttonClass: string = '';\n\n  @Input() public color: string = 'primary';\n\n  @Input() public buttonText: string = '';\n\n  @Input() public type: 'button' | 'menu' | 'submit' | 'reset' = 'button';\n\n  @Input() public matButtonType: 'matRaisedButton' | 'iconButton' | 'basic' =\n    'matRaisedButton';\n\n  @Input() public icon: string = '';\n\n  @Input() public customIcon: string = '';\n\n  @Input() public disabled: boolean = false;\n\n  @Input() public buttonRouterLink: string[] = [];\n\n  @Input() public tooltip: string = '';\n\n  @Input() public matBadgeContent?: any;\n\n  @Input() public matBadgeColor: ThemePalette = 'primary';\n\n  @Output() public clicked: EventEmitter<MouseEvent> =\n    new EventEmitter<MouseEvent>();\n\n  public emitClicked(event: MouseEvent): void {\n    this.clicked.emit(event);\n  }\n}\n","<ng-container [ngSwitch]=\"matButtonType\">\n  <button\n    mat-button\n    *ngSwitchCase=\"'basic'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [matTooltip]=\"tooltip\"\n    [routerLink]=\"buttonRouterLink\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    (click)=\"emitClicked($event)\"\n  >\n    <div class=\"d-flex align-items-center\">\n      <mat-icon *ngIf=\"icon\" class=\"me-1\">\n        {{ icon }}\n      </mat-icon>\n      <span>\n        {{ buttonText }}\n      </span>\n    </div>\n  </button>\n\n  <button\n    mat-raised-button\n    *ngSwitchCase=\"'matRaisedButton'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [matTooltip]=\"tooltip\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    [routerLink]=\"buttonRouterLink\"\n    (click)=\"emitClicked($event)\"\n  >\n    <div class=\"d-flex align-items-center\">\n      <mat-icon *ngIf=\"icon\" class=\"me-1\">\n        {{ icon }}\n      </mat-icon>\n      <span>\n        {{ buttonText }}\n      </span>\n    </div>\n  </button>\n\n  <button\n    mat-icon-button\n    *ngSwitchCase=\"'iconButton'\"\n    [class]=\"buttonClass\"\n    [type]=\"type\"\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n    [routerLink]=\"buttonRouterLink\"\n    [matTooltip]=\"tooltip\"\n    [matBadgeColor]=\"matBadgeColor\"\n    [matBadge]=\"matBadgeContent\"\n    (click)=\"emitClicked($event)\"\n  >\n    <mat-icon *ngIf=\"customIcon\" [svgIcon]=\"customIcon\"></mat-icon>\n    <mat-icon *ngIf=\"icon\">\n      {{ icon }}\n    </mat-icon>\n  </button>\n</ng-container>\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { FeatureConfigState } from '../store/feature-config.state';\n\n/**\n * Add the template content to the DOM unless the condition is true.\n */\n@Directive({ selector: '[appFeature]' })\nexport class FeatureDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private store: Store\n  ) {}\n\n  @Input() set appFeature(feature: string) {\n    const hasFeature = this.store.selectSnapshot(\n      FeatureConfigState.hasFeature(feature)\n    );\n\n    if (hasFeature) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!hasFeature) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { map, Observable, startWith } from 'rxjs';\nimport { InputErrorMessage } from './input-error-message';\nimport { BaseInputInterface } from '../base-input.interface';\n\n@Component({\n  selector: 'app-base-input',\n  templateUrl: './base-input.component.html',\n  styleUrls: ['./base-input.component.scss'],\n})\nexport class BaseInputComponent implements OnInit, BaseInputInterface {\n  @Input() public inputFormControl: FormControl = new FormControl();\n\n  @Input() public label: string = '';\n\n  @Input() public additionalErrorMessages?: { [key: string]: string };\n\n  @Input() public readonly: boolean = false;\n\n  @Input() public placeholder?: string;\n\n  public formControlErrors!: Observable<InputErrorMessage[]>;\n\n  public errorMessages: { [key: string]: string } = {};\n\n  public ngOnInit(): void {\n    this.errorMessages = {\n      required: `${this.label} is required.`,\n      email: `${this.label} must be a valid email address.`,\n      duplicate: `${this.label} must be unique.`,\n      min: `Value must be larger than 0`,\n    };\n\n    this.formControlErrors = this.inputFormControl.statusChanges.pipe(\n      startWith(this.inputFormControl.status),\n      map(() => {\n        const errors = this.inputFormControl.errors;\n        if (errors) {\n          const keys = Object.keys(this.inputFormControl.errors as any);\n          return keys.map((k: string) => {\n            const value = errors[k];\n            let message = '';\n\n            if (typeof value === 'string') {\n              message = value;\n            } else if (this.errorMessages[k]) {\n              message = this.errorMessages[k];\n            }\n\n            return {\n              error: k as string,\n              message: message,\n            };\n          });\n        } else {\n          return [];\n        }\n      })\n    );\n\n    if (this.additionalErrorMessages) {\n      this.errorMessages = {\n        ...this.errorMessages,\n        ...this.additionalErrorMessages,\n      };\n    }\n  }\n}\n","<p>base-input works!</p>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\n\nimport { BaseInputComponent } from '../../base-input/base-input/base-input.component';\nimport { InputInterface } from '../input.interface';\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n})\nexport class InputComponent\n  extends BaseInputComponent\n  implements InputInterface, OnChanges\n{\n  @ViewChild('nativeInput') public nativeInput!: { nativeElement: HTMLElement };\n\n  @Input() public inputId: string = '';\n\n  @Input() public type: string = 'text';\n\n  @Input() public showVisibilityEye = false;\n\n  @Input() public isCurrency: boolean = false;\n\n  @Input() public mask: string = '';\n\n  @Input() public maskPrefix: string = '';\n\n  @Input() public thousandSeparator: string = '';\n\n  @Output() public inputBlur: EventEmitter<any> = new EventEmitter<any>(\n    undefined\n  );\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes['isCurrency']?.currentValue) {\n      this.maskPrefix = '$ ';\n      this.mask = 'separator.2';\n      this.thousandSeparator = ',';\n    }\n  }\n\n  public toggleVisibility(): void {\n    if (this.type !== 'password') {\n      this.type = 'password';\n    } else {\n      this.type = 'text';\n    }\n  }\n\n  // TODO: Figure this out as apart of validation issues\n  // private getMinValue(): string {\n  //   const err = this.inputFormControl.errors as any;\n  //   return err['min']['min'] ?? '0';\n  // }\n}\n","<mat-form-field class=\"w-100\">\n  <mat-label>{{ label }}</mat-label>\n  <div class=\"d-flex align-items-center\">\n    <input\n      #nativeInput\n      matInput\n      [id]=\"inputId\"\n      [type]=\"type\"\n      [readonly]=\"readonly\"\n      [formControl]=\"inputFormControl\"\n      [prefix]=\"maskPrefix\"\n      [mask]=\"mask\"\n      [thousandSeparator]=\"thousandSeparator\"\n      (blur)=\"inputBlur.emit($event)\"\n    />\n    <button\n      *ngIf=\"showVisibilityEye\"\n      mat-icon-button\n      type=\"button\"\n      [matTooltip]=\"type === 'password' ? 'Show ' + label : 'Hide ' + label\"\n      (click)=\"toggleVisibility()\"\n    >\n      <mat-icon *ngIf=\"type === 'password'\">visibility</mat-icon>\n      <mat-icon *ngIf=\"type !== 'password'\">visibility_off</mat-icon>\n    </button>\n  </div>\n  <mat-error *ngFor=\"let err of formControlErrors | async\">{{\n    err.message\n  }}</mat-error>\n</mat-form-field>\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Pipe({\n  name: 'formGet',\n})\nexport class FormGetPipe implements PipeTransform {\n  transform(form: FormGroup, path: string): FormControl {\n    const result = form.get(path);\n    if (result) {\n      return result as FormControl;\n    } else {\n      return new FormControl();\n    }\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { BehaviorSubject, take, tap } from 'rxjs';\nimport { GroupState } from '../../store/group.state';\nimport { UserValidators } from '../../validators/user-validators';\nimport { AuthFormUtil } from './auth-form.util';\n\n@Component({\n  selector: 'app-auth-form',\n  templateUrl: './auth-form.component.html',\n  styleUrls: ['./auth-form.component.scss'],\n  providers: [UserValidators],\n})\nexport class AuthForm implements OnInit {\n  @Input() public additionalFieldsTemplate?: TemplateRef<any>;\n\n  @Input() public emitSubmit: boolean = false;\n\n  @Output() public submitted: EventEmitter<void> = new EventEmitter<void>();\n\n  public form: FormGroup = new FormGroup({});\n  public isSignUp: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\n    false\n  );\n  public headerText: string = '';\n  public primaryButtonText: string = '';\n  public secondaryButtonText: string = '';\n  public secondaryButtonRouterLink: string[] = [];\n\n  constructor(\n    protected authFormUtil: AuthFormUtil,\n    protected formBuilder: FormBuilder,\n    protected route: ActivatedRoute,\n    protected router: Router,\n    protected store: Store,\n    protected userValidators: UserValidators\n  ) {}\n\n  public ngOnInit(): void {\n    this.initForm();\n    this.listenForRouteChanges();\n    this.listenForIsSignUpChanges();\n  }\n\n  private listenForRouteChanges(): void {\n    this.route.data\n      .pipe(\n        tap((data) => {\n          this.isSignUp.next(!!data?.['isSignUp']);\n        })\n      )\n      .subscribe();\n  }\n\n  private listenForIsSignUpChanges(): void {\n    this.isSignUp\n      .pipe(\n        tap((isSignUp) => {\n          if (isSignUp) {\n            this.headerText = 'Sign Up';\n            this.primaryButtonText = 'Sign Up';\n            this.secondaryButtonRouterLink = ['/auth/login'];\n            this.secondaryButtonText = 'Back to Login';\n            this.form\n              .get('username')\n              ?.addAsyncValidators(this.userValidators.uniqueUsername(0, ''));\n            this.form.addControl(\n              'displayname',\n              new FormControl('', Validators.required)\n            );\n          } else {\n            this.headerText = 'Login';\n            this.primaryButtonText = 'Login';\n            this.secondaryButtonRouterLink = ['/auth/sign-up'];\n            this.secondaryButtonText = 'Sign Up';\n            this.form\n              .get('username')\n              ?.removeAsyncValidators(\n                this.userValidators.uniqueUsername(0, '')\n              );\n            this.form.removeControl('displayname');\n          }\n        })\n      )\n      .subscribe();\n  }\n\n  private initForm(): void {\n    this.form = this.formBuilder.group({\n      username: ['', [Validators.required]],\n      password: ['', Validators.required],\n    });\n  }\n\n  public submit(): void {\n    if (this.emitSubmit) {\n      this.submitted.emit();\n    } else {\n      const isSignUp = this.isSignUp.getValue();\n\n      this.authFormUtil\n        .getSubmitObservable(this.form, isSignUp)\n        .pipe(\n          take(1),\n          tap(() => {\n            this.router.navigate([\n              this.store.selectSnapshot(GroupState.dashboardLink),\n            ]);\n          })\n        )\n        .subscribe();\n    }\n  }\n}\n","<div class=\"d-flex align-items-center justify-content-center\">\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n    <h2>{{ headerText }}</h2>\n    <div class=\"d-flex flex-column\">\n      <ng-template\n        *ngIf=\"additionalFieldsTemplate\"\n        [ngTemplateOutlet]=\"additionalFieldsTemplate\"\n      ></ng-template>\n      <ng-container *ngIf=\"isSignUp | async\">\n        <app-input\n          label=\"Displayname\"\n          [inputFormControl]=\"form | formGet : 'displayname'\"\n        >\n        </app-input>\n      </ng-container>\n      <app-input\n        label=\"Username\"\n        [inputFormControl]=\"form | formGet : 'username'\"\n      >\n      </app-input>\n      <app-input\n        label=\"Password\"\n        type=\"password\"\n        [showVisibilityEye]=\"true\"\n        [inputFormControl]=\"form | formGet : 'password'\"\n      >\n      </app-input>\n    </div>\n    <div class=\"w-100 d-flex flex-column\">\n      <app-button\n        class=\"w-100\"\n        buttonClass=\"w-100 mb-2\"\n        type=\"submit\"\n        [buttonText]=\"primaryButtonText\"\n      ></app-button>\n      <app-button\n        *appFeature=\"'enableLocalSignUp'\"\n        class=\"w-100\"\n        buttonClass=\"w-100 \"\n        type=\"button\"\n        color=\"accent\"\n        [buttonText]=\"secondaryButtonText\"\n        [routerLink]=\"secondaryButtonRouterLink\"\n      ></app-button>\n    </div>\n  </form>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { FeatureConfigState } from '../store/feature-config.state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureGuard {\n  constructor(private store: Store) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    return this.store.selectSnapshot(\n      FeatureConfigState.hasFeature(route.data['feature'])\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FeatureGuard } from '../guards/feature.guard';\nimport { AuthForm } from './sign-up/auth-form.component';\n\nexport const authRoutes: Routes = [\n  {\n    path: 'sign-up',\n    component: AuthForm,\n    data: {\n      isSignUp: true,\n      feature: 'enableLocalSignUp',\n    },\n    canActivate: [FeatureGuard],\n  },\n  {\n    path: 'login',\n    component: AuthForm,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(authRoutes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { RouterModule } from '@angular/router';\nimport { ButtonComponent } from './button/button.component';\n\n@NgModule({\n  declarations: [ButtonComponent],\n  imports: [\n    CommonModule,\n    MatBadgeModule,\n    MatButtonModule,\n    MatIconModule,\n    MatTooltipModule,\n    RouterModule,\n  ],\n  exports: [ButtonComponent],\n})\nexport class ButtonModule {}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { AuthState } from '../store/auth.state';\n\n@Directive({ selector: '[appRole]' })\nexport class RoleDirective {\n  private hasView = false;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private store: Store\n  ) {}\n\n  @Input() set appRole(role: string) {\n    const hasRole = this.store.selectSnapshot(AuthState.hasRole(role));\n\n    if (hasRole) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!hasRole) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RoleDirective } from './role.directive';\nimport { FeatureDirective } from './feature.directive';\n\n@NgModule({\n  declarations: [RoleDirective, FeatureDirective],\n  imports: [CommonModule],\n  exports: [RoleDirective, FeatureDirective],\n})\nexport class DirectivesModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { NgxMaskDirective, provideNgxMask } from 'ngx-mask';\nimport { InputComponent } from './input/input.component';\n\n@NgModule({\n  declarations: [InputComponent],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatTooltipModule,\n    NgxMaskDirective,\n    ReactiveFormsModule,\n  ],\n  exports: [InputComponent],\n  providers: [provideNgxMask()],\n})\nexport class InputModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormGetPipe } from './form-get.pipe';\n\n@NgModule({\n  declarations: [FormGetPipe],\n  imports: [CommonModule],\n  exports: [FormGetPipe],\n})\nexport class PipesModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ButtonModule } from '../button/button.module';\nimport { DirectivesModule } from '../directives/directives.module';\nimport { InputModule } from '../input/input.module';\nimport { PipesModule } from '../pipes/pipes.module';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AuthForm } from './sign-up/auth-form.component';\n\n@NgModule({\n  declarations: [AuthForm],\n  imports: [\n    AuthRoutingModule,\n    ButtonModule,\n    CommonModule,\n    DirectivesModule,\n    InputModule,\n    PipesModule,\n    ReactiveFormsModule,\n  ],\n  exports: [AuthForm],\n})\nexport class AuthModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BaseInputComponent } from './base-input/base-input.component';\n\n@NgModule({\n  declarations: [BaseInputComponent],\n  imports: [CommonModule],\n  exports: [BaseInputComponent],\n})\nexport class BaseInputModule {}\n","import { Observable } from 'rxjs';\n\nimport { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { AuthState } from '../store/auth.state';\nimport { GroupState } from '../store/group.state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard {\n  constructor(private router: Router, private store: Store) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const isLoggedIn = this.store.selectSnapshot(AuthState.isLoggedIn);\n    const navigatingToAuth = route.url.toString().includes('auth');\n\n    // if user tries to go to login screens while already logged in\n    if (navigatingToAuth && isLoggedIn) {\n      this.router.navigate([\n        this.store.selectSnapshot(GroupState.dashboardLink),\n      ]);\n      return false;\n    } else if (navigatingToAuth && !isLoggedIn) {\n      return true;\n    }\n\n    if (!isLoggedIn) {\n      this.router.navigate(['/auth/login']);\n    }\n\n    return isLoggedIn;\n  }\n}\n","/*\n * Public API Surface of core\n */\nexport * from './lib/animations';\nexport * from './lib/api';\nexport * from './lib/auth';\nexport * from './lib/base-input';\nexport * from './lib/button';\nexport * from './lib/constants';\nexport * from './lib/directives';\nexport * from './lib/guards';\nexport * from './lib/input';\nexport * from './lib/interfaces';\nexport * from './lib/pipes';\nexport * from './lib/services';\nexport * from './lib/store';\nexport * from './lib/validators';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.Configuration","i1.UserService","i1","i2.UserService","i1.AuthService","i2.ClaimsService","i1.FeatureConfigService","i1.GroupsService","i3","i1.UserPreferencesService","i2.SnackbarService","i2.AppInitService","i6","i2","i5","i8","i1.AuthFormUtil","i4","i5.UserValidators","i6.ButtonComponent","i7","i8.FeatureDirective","i9.InputComponent","i10.FormGetPipe"],"mappings":"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"}
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Notification } from '../model/notification';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class NotificationsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Delete all notifications for user
     * This deletes all notifications for a user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteAllNotificationsForUser(observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteAllNotificationsForUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteAllNotificationsForUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Delete notification by id
     * This deletes a notification by id
     * @param notificationId Notification Id to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteNotificationById(notificationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteNotificationById(notificationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteNotificationById(notificationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Notification count
     * This will get the notification count for the currently logged in user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getNotificationCount(observe?: 'body', reportProgress?: boolean): Observable<number>;
    getNotificationCount(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    getNotificationCount(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    /**
     * Get all user notifications
     * This will get all the notifications for the currently logged in user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getNotificationsForuser(observe?: 'body', reportProgress?: boolean): Observable<Array<Notification>>;
    getNotificationsForuser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Notification>>>;
    getNotificationsForuser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Notification>>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NotificationsService>;
}

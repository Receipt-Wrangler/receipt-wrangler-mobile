import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { LoginCommand } from '../model/loginCommand';
import { SignUpCommand } from '../model/signUpCommand';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class AuthService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Get fresh tokens
     * This will get a fresh token pair for the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getNewRefreshToken(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getNewRefreshToken(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getNewRefreshToken(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Login
     * This will log a user into the system
     * @param body Login data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    login(body: LoginCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;
    login(body: LoginCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    login(body: LoginCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Logout
     * This will log a user out of the system and revoke their token [SYSTEM USER]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    logout(observe?: 'body', reportProgress?: boolean): Observable<any>;
    logout(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    logout(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Signs up
     * This will sign a user up for the system
     * @param body Sign up data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    signUp(body: SignUpCommand, observe?: 'body', reportProgress?: boolean): Observable<any>;
    signUp(body: SignUpCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    signUp(body: SignUpCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthService>;
}

import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BulkStatusUpdateCommand } from '../model/bulkStatusUpdateCommand';
import { Receipt } from '../model/receipt';
import { ReceiptPagedRequestCommand } from '../model/receiptPagedRequestCommand';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class ReceiptService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Bulk receipt status update
     * This will bulk update receipt statuses with the option of adding a comment to each [SYSTEM USER]
     * @param body Bulk status data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'body', reportProgress?: boolean): Observable<Array<Receipt>>;
    bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Receipt>>>;
    bulkReceiptStatusUpdate(body: BulkStatusUpdateCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Receipt>>>;
    /**
     * Create receipt
     * This will create a receipt [SYSTEM USER]
     * @param body Receipt to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createReceipt(body: Receipt, observe?: 'body', reportProgress?: boolean): Observable<any>;
    createReceipt(body: Receipt, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    createReceipt(body: Receipt, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Delete receipt
     * This will delete a receipt by id [SYSTEM USER]
     * @param receiptId Id of receipt to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteReceiptById(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteReceiptById(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteReceiptById(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Duplicate receipt
     * This will duplicate a receipt [SYSTEM USER]
     * @param receiptId Id of receipt to duplicate
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    duplicateReceipt(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    duplicateReceipt(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    duplicateReceipt(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get receipt
     * This will get a receipt by receipt id [SYSTEM USER]
     * @param receiptId Id of receipt to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReceiptById(receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;
    getReceiptById(receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;
    getReceiptById(receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;
    /**
     * Gets receipts
     * This will return receipts with the option to sort and filter [SYSTEM USER]
     * @param body
     * @param groupId Get all receipts that belong to groupId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getReceiptsForGroup(body: ReceiptPagedRequestCommand, groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Has access to receipt
     * This will return whether or not the currently logged in user has access to the receipt
     * @param receiptId
     * @param groupRole Role required to have access to receipt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    hasAccessToReceipt(receiptId: number, groupRole?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Quick scan a receipt
     * This take an image and use magic fill to fill and save the receipt [SYSTEM USER]
     * @param file
     * @param groupId
     * @param paidByUserId
     * @param status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'body', reportProgress?: boolean): Observable<Receipt>;
    quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Receipt>>;
    quickScanReceiptForm(file: Blob, groupId: number, paidByUserId: number, status: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Receipt>>;
    /**
     * Update receipt
     * This will update a receipt by receipt id [SYSTEM USER]
     * @param body Receipt to update
     * @param receiptId Id of receipt to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateReceipt(body: Receipt, receiptId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateReceipt(body: Receipt, receiptId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateReceipt(body: Receipt, receiptId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReceiptService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ReceiptService>;
}

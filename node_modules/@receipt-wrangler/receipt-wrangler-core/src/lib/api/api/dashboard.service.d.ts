import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Dashboard } from '../model/dashboard';
import { UpsertDashboardCommand } from '../model/upsertDashboardCommand';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class DashboardService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Create dashboard
     * This will create a dashboard [SYSTEM USER]
     * @param body Dashboard
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createDashboard(body: UpsertDashboardCommand, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;
    createDashboard(body: UpsertDashboardCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;
    createDashboard(body: UpsertDashboardCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;
    /**
     * Delete dashboard
     * This will delete a dashboard by id
     * @param dashboardId Id of dashboard to operate on
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteDashboard(dashboardId: number, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;
    deleteDashboard(dashboardId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;
    deleteDashboard(dashboardId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;
    /**
     * Get dashboards for a user by group id
     * This will get a dashboards for a user by group id
     * @param groupId Id of group to get dashboard for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDashboardsForUserByGroupId(groupId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Dashboard>>;
    getDashboardsForUserByGroupId(groupId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Dashboard>>>;
    getDashboardsForUserByGroupId(groupId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Dashboard>>>;
    /**
     * Update dashboard
     * This will update a dashboard
     * @param body Dashboard to update
     * @param dashboardId Id of dashboard to operate on
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'body', reportProgress?: boolean): Observable<Dashboard>;
    updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Dashboard>>;
    updateDashboard(body: UpsertDashboardCommand, dashboardId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Dashboard>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DashboardService>;
}

import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Category } from '../model/category';
import { PagedData } from '../model/pagedData';
import { PagedRequestCommand } from '../model/pagedRequestCommand';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
export declare class CategoryService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Create category
     * This will create a category
     * @param body Category to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createCategory(body: Category, observe?: 'body', reportProgress?: boolean): Observable<any>;
    createCategory(body: Category, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    createCategory(body: Category, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Delete category
     * This will delete a category by id
     * @param categoryId Category Id to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteCategory(categoryId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteCategory(categoryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteCategory(categoryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get all categories
     * This will return all categories in the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllCategories(observe?: 'body', reportProgress?: boolean): Observable<Array<Category>>;
    getAllCategories(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Category>>>;
    getAllCategories(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Category>>>;
    /**
     * Get category count by name
     * This will return a count of categories with the same name
     * @param categoryName Category name to get count of
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCategoryCountByName(categoryName: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    getCategoryCountByName(categoryName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    getCategoryCountByName(categoryName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    /**
     * Get paged categories
     * This will return paged categories
     * @param body Paging and sorting data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPagedCategories(body: PagedRequestCommand, observe?: 'body', reportProgress?: boolean): Observable<PagedData>;
    getPagedCategories(body: PagedRequestCommand, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedData>>;
    getPagedCategories(body: PagedRequestCommand, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedData>>;
    /**
     * Update category
     * This will update a category
     * @param body Category to update
     * @param categoryId Category Id to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCategory(body: Category, categoryId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateCategory(body: Category, categoryId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateCategory(body: Category, categoryId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<CategoryService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CategoryService>;
}

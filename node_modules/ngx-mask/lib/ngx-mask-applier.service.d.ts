import { IConfig } from './ngx-mask.config';
import * as i0 from "@angular/core";
export declare class NgxMaskApplierService {
    protected _config: IConfig;
    dropSpecialCharacters: IConfig['dropSpecialCharacters'];
    hiddenInput: IConfig['hiddenInput'];
    showTemplate: IConfig['showTemplate'];
    clearIfNotMatch: IConfig['clearIfNotMatch'];
    specialCharacters: IConfig['specialCharacters'];
    patterns: IConfig['patterns'];
    prefix: IConfig['prefix'];
    suffix: IConfig['suffix'];
    thousandSeparator: IConfig['thousandSeparator'];
    decimalMarker: IConfig['decimalMarker'];
    customPattern: IConfig['patterns'];
    showMaskTyped: IConfig['showMaskTyped'];
    placeHolderCharacter: IConfig['placeHolderCharacter'];
    validation: IConfig['validation'];
    separatorLimit: IConfig['separatorLimit'];
    allowNegativeNumbers: IConfig['allowNegativeNumbers'];
    leadZeroDateTime: IConfig['leadZeroDateTime'];
    leadZero: IConfig['leadZero'];
    apm: IConfig['apm'];
    inputTransformFn: IConfig['inputTransformFn'];
    outputTransformFn: IConfig['outputTransformFn'];
    keepCharacterPositions: IConfig['keepCharacterPositions'];
    private _shift;
    plusOnePosition: boolean;
    maskExpression: string;
    actualValue: string;
    showKeepCharacterExp: string;
    shownMaskExpression: string;
    deletedSpecialCharacter: boolean;
    ipError?: boolean;
    cpfCnpjError?: boolean;
    applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string;
    applyMask(inputValue: string | object | boolean | null | undefined, maskExpression: string, position?: number, justPasted?: boolean, backspaced?: boolean, cb?: (...args: any[]) => any): string;
    _findDropSpecialChar(inputSymbol: string): undefined | string;
    _findSpecialChar(inputSymbol: string): undefined | string;
    _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean;
    private _formatWithSeparators;
    private percentage;
    private getPrecision;
    private checkAndRemoveSuffix;
    private checkInputPrecision;
    private _stripToDecimal;
    private _charToRegExpExpression;
    private _shiftStep;
    protected _compareOrIncludes<T>(value: T, comparedValue: T | T[], excludedValue: T): boolean;
    private _validIP;
    private _splitPercentZero;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxMaskApplierService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgxMaskApplierService>;
}

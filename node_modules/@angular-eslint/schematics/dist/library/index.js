"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const ngcli_adapter_1 = require("@nx/devkit/ngcli-adapter");
const utils_1 = require("../utils");
exports.default = (0, devkit_1.convertNxGenerator)(async (tree, options) => {
    var _a;
    // Remove angular-eslint specific options before passing to the Angular schematic
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { setParserOptionsProject } = options, angularOptions = __rest(options, ["setParserOptionsProject"]);
    const libraryGenerator = (0, ngcli_adapter_1.wrapAngularDevkitSchematic)('@schematics/angular', 'library');
    await libraryGenerator(tree, angularOptions);
    // Update the lint builder and config in angular.json
    (0, utils_1.addESLintTargetToProject__NX)(tree, options.name, 'lint');
    (0, utils_1.createESLintConfigForProject__NX)(tree, options.name, (_a = options.setParserOptionsProject) !== null && _a !== void 0 ? _a : false);
});
